/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/pages/careers/apply.js":
/*!****************************************************************!*\
  !*** ./resources/assets/core/js/custom/pages/careers/apply.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTCareersApply = function () {\n  var submitButton;\n  var validator;\n  var form;\n\n  // Init form inputs\n  var initForm = function initForm() {\n    // Team assign. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"position\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('position');\n    });\n\n    // Start date. For more info, please visit the official plugin site: https://flatpickr.js.org/\n    var startDate = $(form.querySelector('[name=\"start_date\"]'));\n    startDate.flatpickr({\n      enableTime: false,\n      dateFormat: \"d, M Y\"\n    });\n  };\n\n  // Handle form validation and submittion\n  var handleForm = function handleForm() {\n    // Stepper custom navigation\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'first_name': {\n          validators: {\n            notEmpty: {\n              message: 'First name is required'\n            }\n          }\n        },\n        'last_name': {\n          validators: {\n            notEmpty: {\n              message: 'Last name is required'\n            }\n          }\n        },\n        'age': {\n          validators: {\n            notEmpty: {\n              message: 'Age is required'\n            }\n          }\n        },\n        'city': {\n          validators: {\n            notEmpty: {\n              message: 'City is required'\n            }\n          }\n        },\n        'email': {\n          validators: {\n            notEmpty: {\n              message: 'Email address is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        },\n        'salary': {\n          validators: {\n            notEmpty: {\n              message: 'Expected salary is required'\n            }\n          }\n        },\n        'position': {\n          validators: {\n            notEmpty: {\n              message: 'Position is required'\n            }\n          }\n        },\n        'start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n\n    // Action buttons\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable button to avoid multiple click \n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Enable button\n              submitButton.disabled = false;\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  //form.submit();\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Scroll top\n\n            // Show error popuo. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            }).then(function (result) {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      }\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      form = document.querySelector('#kt_careers_form');\n      submitButton = document.getElementById('kt_careers_submit_button');\n      initForm();\n      handleForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTCareersApply.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/pages/careers/apply.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/pages/careers/apply.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/pages/careers/apply.js ***!
  \*****************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/pages/careers/apply.js\": (\n    /*!****************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/pages/careers/apply.js ***!\n      \\****************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomPagesCareersApplyJs() {\n      eval(\" // Class definition\\n\\nvar KTCareersApply = function () {\\n  var submitButton;\\n  var validator;\\n  var form; // Init form inputs\\n\\n  var initForm = function initForm() {\\n    // Team assign. For more info, plase visit the official plugin site: https://select2.org/\\n    $(form.querySelector('[name=\\\"position\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('position');\\n    }); // Start date. For more info, please visit the official plugin site: https://flatpickr.js.org/\\n\\n    var startDate = $(form.querySelector('[name=\\\"start_date\\\"]'));\\n    startDate.flatpickr({\\n      enableTime: false,\\n      dateFormat: \\\"d, M Y\\\"\\n    });\\n  }; // Handle form validation and submittion\\n\\n\\n  var handleForm = function handleForm() {\\n    // Stepper custom navigation\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'first_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'First name is required'\\n            }\\n          }\\n        },\\n        'last_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Last name is required'\\n            }\\n          }\\n        },\\n        'age': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Age is required'\\n            }\\n          }\\n        },\\n        'city': {\\n          validators: {\\n            notEmpty: {\\n              message: 'City is required'\\n            }\\n          }\\n        },\\n        'email': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Email address is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        },\\n        'salary': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Expected salary is required'\\n            }\\n          }\\n        },\\n        'position': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Position is required'\\n            }\\n          }\\n        },\\n        'start_date': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Start date is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Action buttons\\n\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true;\\n            setTimeout(function () {\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false;\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {//form.submit();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Scroll top\\n            // Show error popuo. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            }).then(function (result) {\\n              KTUtil.scrollTop();\\n            });\\n          }\\n        });\\n      }\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      // Elements\\n      form = document.querySelector('#kt_careers_form');\\n      submitButton = document.getElementById('kt_careers_submit_button');\\n      initForm();\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCareersApply.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/pages/careers/apply.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/pages/careers/apply.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/pages/careers/apply.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/pages/careers/apply.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/pages/careers/apply.js"]();
/******/ 	
/******/ })()
;