/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/subscriptions/list/list.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/subscriptions/list/list.js ***!
  \*************************************************************************/
/***/ (() => {

"use strict";
eval("\n\nvar KTSubscriptionsList = function () {\n  // Define shared variables\n  var table;\n  var datatable;\n  var toolbarBase;\n  var toolbarSelected;\n  var selectedCount;\n\n  // Private functions\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\n      dateRow[5].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      },\n      // Disable ordering on column 0 (checkbox)\n      {\n        orderable: false,\n        targets: 6\n      } // Disable ordering on column 6 (actions)                \n      ]\n    });\n\n    // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleRowDeletion();\n      toggleToolbars();\n    });\n  };\n\n  // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n  var handleSearch = function handleSearch() {\n    var filterSearch = document.querySelector('[data-kt-subscription-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  };\n\n  // Filter Datatable\n  var handleFilter = function handleFilter() {\n    // Select filter options\n    var filterForm = document.querySelector('[data-kt-subscription-table-filter=\"form\"]');\n    var filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"filter\"]');\n    var resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"reset\"]');\n    var selectOptions = filterForm.querySelectorAll('select');\n\n    // Filter datatable on submit\n    filterButton.addEventListener('click', function () {\n      var filterString = '';\n\n      // Get filter values\n      selectOptions.forEach(function (item, index) {\n        if (item.value && item.value !== '') {\n          if (index !== 0) {\n            filterString += ' ';\n          }\n\n          // Build filter value options\n          filterString += item.value;\n        }\n      });\n\n      // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n      datatable.search(filterString).draw();\n    });\n\n    // Reset datatable\n    resetButton.addEventListener('click', function () {\n      // Reset filter form\n      selectOptions.forEach(function (item, index) {\n        // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\n        $(item).val(null).trigger('change');\n      });\n\n      // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n      datatable.search('').draw();\n    });\n  };\n\n  // Delete subscirption\n  var handleRowDeletion = function handleRowDeletion() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Select parent row\n        var parent = e.target.closest('tr');\n\n        // Get customer name\n        var customerName = parent.querySelectorAll('td')[1].innerText;\n\n        // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + customerName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + customerName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            }).then(function () {\n              // Detect checked checkboxes\n              toggleToolbars();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  };\n\n  // Init toggle toolbar\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n    // Select elements\n    toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\"base\"]');\n    toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\"selected\"]');\n    selectedCount = document.querySelector('[data-kt-subscription-table-select=\"selected_count\"]');\n    var deleteSelected = document.querySelector('[data-kt-subscription-table-select=\"delete_selected\"]');\n\n    // Toggle delete selected toolbar\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    });\n\n    // Deleted selected rows\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected customers?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected customers!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            });\n\n            // Remove header checked box\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          }).then(function () {\n            toggleToolbars(); // Detect checked checkboxes\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected customers was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Toggle toolbars\n  var toggleToolbars = function toggleToolbars() {\n    // Select refreshed checkbox DOM elements \n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n    // Detect checkboxes state & count\n    var checkedState = false;\n    var count = 0;\n\n    // Count checked boxes\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    });\n\n    // Toggle toolbars\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n  return {\n    // Public functions  \n    init: function init() {\n      table = document.getElementById('kt_subscriptions_table');\n      if (!table) {\n        return;\n      }\n      initDatatable();\n      initToggleToolbar();\n      handleSearch();\n      handleRowDeletion();\n      handleFilter();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTSubscriptionsList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/list/list.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js ***!
  \**************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/apps/subscriptions/list/list.js\": (\n    /*!*************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/apps/subscriptions/list/list.js ***!\n      \\*************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAppsSubscriptionsListListJs() {\n      eval(\"\\n\\nvar KTSubscriptionsList = function () {\\n  // Define shared variables\\n  var table;\\n  var datatable;\\n  var toolbarBase;\\n  var toolbarSelected;\\n  var selectedCount; // Private functions\\n\\n  var initDatatable = function initDatatable() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[5].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 4th column in table\\n\\n      dateRow[5].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 0\\n      }, // Disable ordering on column 0 (checkbox)\\n      {\\n        orderable: false,\\n        targets: 6\\n      } // Disable ordering on column 6 (actions)                \\n      ]\\n    }); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\\n\\n    datatable.on('draw', function () {\\n      initToggleToolbar();\\n      handleRowDeletion();\\n      toggleToolbars();\\n    });\\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n\\n  var handleSearch = function handleSearch() {\\n    var filterSearch = document.querySelector('[data-kt-subscription-table-filter=\\\"search\\\"]');\\n    filterSearch.addEventListener('keyup', function (e) {\\n      datatable.search(e.target.value).draw();\\n    });\\n  }; // Filter Datatable\\n\\n\\n  var handleFilter = function handleFilter() {\\n    // Select filter options\\n    var filterForm = document.querySelector('[data-kt-subscription-table-filter=\\\"form\\\"]');\\n    var filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\\\"filter\\\"]');\\n    var resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\\\"reset\\\"]');\\n    var selectOptions = filterForm.querySelectorAll('select'); // Filter datatable on submit\\n\\n    filterButton.addEventListener('click', function () {\\n      var filterString = ''; // Get filter values\\n\\n      selectOptions.forEach(function (item, index) {\\n        if (item.value && item.value !== '') {\\n          if (index !== 0) {\\n            filterString += ' ';\\n          } // Build filter value options\\n\\n\\n          filterString += item.value;\\n        }\\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n      datatable.search(filterString).draw();\\n    }); // Reset datatable\\n\\n    resetButton.addEventListener('click', function () {\\n      // Reset filter form\\n      selectOptions.forEach(function (item, index) {\\n        // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\\n        $(item).val(null).trigger('change');\\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n      datatable.search('').draw();\\n    });\\n  }; // Delete subscirption\\n\\n\\n  var handleRowDeletion = function handleRowDeletion() {\\n    // Select all delete buttons\\n    var deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\\\"delete_row\\\"]');\\n    deleteButtons.forEach(function (d) {\\n      // Delete button on click\\n      d.addEventListener('click', function (e) {\\n        e.preventDefault(); // Select parent row\\n\\n        var parent = e.target.closest('tr'); // Get customer name\\n\\n        var customerName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n        Swal.fire({\\n          text: \\\"Are you sure you want to delete \\\" + customerName + \\\"?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete!\\\",\\n          cancelButtonText: \\\"No, cancel\\\",\\n          customClass: {\\n            confirmButton: \\\"btn fw-bold btn-danger\\\",\\n            cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            Swal.fire({\\n              text: \\\"You have deleted \\\" + customerName + \\\"!.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            }).then(function () {\\n              // Remove current row\\n              datatable.row($(parent)).remove().draw();\\n            }).then(function () {\\n              // Detect checked checkboxes\\n              toggleToolbars();\\n            });\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: customerName + \\\" was not deleted.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }; // Init toggle toolbar\\n\\n\\n  var initToggleToolbar = function initToggleToolbar() {\\n    // Toggle selected action toolbar\\n    // Select all checkboxes\\n    var checkboxes = table.querySelectorAll('[type=\\\"checkbox\\\"]'); // Select elements\\n\\n    toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\\\"base\\\"]');\\n    toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\\\"selected\\\"]');\\n    selectedCount = document.querySelector('[data-kt-subscription-table-select=\\\"selected_count\\\"]');\\n    var deleteSelected = document.querySelector('[data-kt-subscription-table-select=\\\"delete_selected\\\"]'); // Toggle delete selected toolbar\\n\\n    checkboxes.forEach(function (c) {\\n      // Checkbox on click event\\n      c.addEventListener('click', function () {\\n        setTimeout(function () {\\n          toggleToolbars();\\n        }, 50);\\n      });\\n    }); // Deleted selected rows\\n\\n    deleteSelected.addEventListener('click', function () {\\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n      Swal.fire({\\n        text: \\\"Are you sure you want to delete selected customers?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete!\\\",\\n        cancelButtonText: \\\"No, cancel\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\",\\n          cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          Swal.fire({\\n            text: \\\"You have deleted all selected customers!.\\\",\\n            icon: \\\"success\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          }).then(function () {\\n            // Remove all selected customers\\n            checkboxes.forEach(function (c) {\\n              if (c.checked) {\\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\\n              }\\n            }); // Remove header checked box\\n\\n            var headerCheckbox = table.querySelectorAll('[type=\\\"checkbox\\\"]')[0];\\n            headerCheckbox.checked = false;\\n          }).then(function () {\\n            toggleToolbars(); // Detect checked checkboxes\\n\\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\\n          });\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Selected customers was not deleted.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Toggle toolbars\\n\\n\\n  var toggleToolbars = function toggleToolbars() {\\n    // Select refreshed checkbox DOM elements \\n    var allCheckboxes = table.querySelectorAll('tbody [type=\\\"checkbox\\\"]'); // Detect checkboxes state & count\\n\\n    var checkedState = false;\\n    var count = 0; // Count checked boxes\\n\\n    allCheckboxes.forEach(function (c) {\\n      if (c.checked) {\\n        checkedState = true;\\n        count++;\\n      }\\n    }); // Toggle toolbars\\n\\n    if (checkedState) {\\n      selectedCount.innerHTML = count;\\n      toolbarBase.classList.add('d-none');\\n      toolbarSelected.classList.remove('d-none');\\n    } else {\\n      toolbarBase.classList.remove('d-none');\\n      toolbarSelected.classList.add('d-none');\\n    }\\n  };\\n\\n  return {\\n    // Public functions  \\n    init: function init() {\\n      table = document.getElementById('kt_subscriptions_table');\\n\\n      if (!table) {\\n        return;\\n      }\\n\\n      initDatatable();\\n      initToggleToolbar();\\n      handleSearch();\\n      handleRowDeletion();\\n      handleFilter();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTSubscriptionsList.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/list/list.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/subscriptions/list/list.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVzb3VyY2VzQXNzZXRzQ29yZUpzQ3VzdG9tQXBwc1N1YnNjcmlwdGlvbnNMaXN0TGlzdEpzIiwiZXZhbCIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9kZW1vMS9qcy9jdXN0b20vYXBwcy9zdWJzY3JpcHRpb25zL2xpc3QvbGlzdC5qcz9hZGM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBVFRFTlRJT046IEFuIFwiZXZhbC1zb3VyY2UtbWFwXCIgZGV2dG9vbCBoYXMgYmVlbiB1c2VkLlxuICogVGhpcyBkZXZ0b29sIGlzIG5laXRoZXIgbWFkZSBmb3IgcHJvZHVjdGlvbiBub3IgZm9yIHJlYWRhYmxlIG91dHB1dCBmaWxlcy5cbiAqIEl0IHVzZXMgXCJldmFsKClcIiBjYWxscyB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzb3VyY2UgZmlsZSB3aXRoIGF0dGFjaGVkIFNvdXJjZU1hcHMgaW4gdGhlIGJyb3dzZXIgZGV2dG9vbHMuXG4gKiBJZiB5b3UgYXJlIHRyeWluZyB0byByZWFkIHRoZSBvdXRwdXQgZmlsZSwgc2VsZWN0IGEgZGlmZmVyZW50IGRldnRvb2wgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLylcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cbiAqIElmIHlvdSBhcmUgbG9va2luZyBmb3IgcHJvZHVjdGlvbi1yZWFkeSBvdXRwdXQgZmlsZXMsIHNlZSBtb2RlOiBcInByb2R1Y3Rpb25cIiAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL21vZGUvKS5cbiAqL1xuLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL3N1YnNjcmlwdGlvbnMvbGlzdC9saXN0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL3N1YnNjcmlwdGlvbnMvbGlzdC9saXN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKCgpID0+IHtcblxuZXZhbChcIlxcblxcbnZhciBLVFN1YnNjcmlwdGlvbnNMaXN0ID0gZnVuY3Rpb24gKCkge1xcbiAgLy8gRGVmaW5lIHNoYXJlZCB2YXJpYWJsZXNcXG4gIHZhciB0YWJsZTtcXG4gIHZhciBkYXRhdGFibGU7XFxuICB2YXIgdG9vbGJhckJhc2U7XFxuICB2YXIgdG9vbGJhclNlbGVjdGVkO1xcbiAgdmFyIHNlbGVjdGVkQ291bnQ7IC8vIFByaXZhdGUgZnVuY3Rpb25zXFxuXFxuICB2YXIgaW5pdERhdGF0YWJsZSA9IGZ1bmN0aW9uIGluaXREYXRhdGFibGUoKSB7XFxuICAgIC8vIFNldCBkYXRlIGRhdGEgb3JkZXJcXG4gICAgdmFyIHRhYmxlUm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJyk7XFxuICAgIHRhYmxlUm93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcXG4gICAgICB2YXIgZGF0ZVJvdyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpO1xcbiAgICAgIHZhciByZWFsRGF0ZSA9IG1vbWVudChkYXRlUm93WzVdLmlubmVySFRNTCwgXFxcIkREIE1NTSBZWVlZLCBMVFxcXCIpLmZvcm1hdCgpOyAvLyBzZWxlY3QgZGF0ZSBmcm9tIDR0aCBjb2x1bW4gaW4gdGFibGVcXG5cXG4gICAgICBkYXRlUm93WzVdLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmRlcicsIHJlYWxEYXRlKTtcXG4gICAgfSk7IC8vIEluaXQgZGF0YXRhYmxlIC0tLSBtb3JlIGluZm8gb24gZGF0YXRhYmxlczogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9tYW51YWwvXFxuXFxuICAgIGRhdGF0YWJsZSA9ICQodGFibGUpLkRhdGFUYWJsZSh7XFxuICAgICAgXFxcImluZm9cXFwiOiBmYWxzZSxcXG4gICAgICAnb3JkZXInOiBbXSxcXG4gICAgICBcXFwicGFnZUxlbmd0aFxcXCI6IDEwLFxcbiAgICAgIFxcXCJsZW5ndGhDaGFuZ2VcXFwiOiBmYWxzZSxcXG4gICAgICAnY29sdW1uRGVmcyc6IFt7XFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxcbiAgICAgICAgdGFyZ2V0czogMFxcbiAgICAgIH0sIC8vIERpc2FibGUgb3JkZXJpbmcgb24gY29sdW1uIDAgKGNoZWNrYm94KVxcbiAgICAgIHtcXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXFxuICAgICAgICB0YXJnZXRzOiA2XFxuICAgICAgfSAvLyBEaXNhYmxlIG9yZGVyaW5nIG9uIGNvbHVtbiA2IChhY3Rpb25zKSAgICAgICAgICAgICAgICBcXG4gICAgICBdXFxuICAgIH0pOyAvLyBSZS1pbml0IGZ1bmN0aW9ucyBvbiBldmVyeSB0YWJsZSByZS1kcmF3IC0tIG1vcmUgaW5mbzogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9yZWZlcmVuY2UvZXZlbnQvZHJhd1xcblxcbiAgICBkYXRhdGFibGUub24oJ2RyYXcnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgaW5pdFRvZ2dsZVRvb2xiYXIoKTtcXG4gICAgICBoYW5kbGVSb3dEZWxldGlvbigpO1xcbiAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XFxuICAgIH0pO1xcbiAgfTsgLy8gU2VhcmNoIERhdGF0YWJsZSAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvcmVmZXJlbmNlL2FwaS9zZWFyY2goKVxcblxcblxcbiAgdmFyIGhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uIGhhbmRsZVNlYXJjaCgpIHtcXG4gICAgdmFyIGZpbHRlclNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXN1YnNjcmlwdGlvbi10YWJsZS1maWx0ZXI9XFxcInNlYXJjaFxcXCJdJyk7XFxuICAgIGZpbHRlclNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgZGF0YXRhYmxlLnNlYXJjaChlLnRhcmdldC52YWx1ZSkuZHJhdygpO1xcbiAgICB9KTtcXG4gIH07IC8vIEZpbHRlciBEYXRhdGFibGVcXG5cXG5cXG4gIHZhciBoYW5kbGVGaWx0ZXIgPSBmdW5jdGlvbiBoYW5kbGVGaWx0ZXIoKSB7XFxuICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xcbiAgICB2YXIgZmlsdGVyRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXN1YnNjcmlwdGlvbi10YWJsZS1maWx0ZXI9XFxcImZvcm1cXFwiXScpO1xcbiAgICB2YXIgZmlsdGVyQnV0dG9uID0gZmlsdGVyRm9ybS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtZmlsdGVyPVxcXCJmaWx0ZXJcXFwiXScpO1xcbiAgICB2YXIgcmVzZXRCdXR0b24gPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXN1YnNjcmlwdGlvbi10YWJsZS1maWx0ZXI9XFxcInJlc2V0XFxcIl0nKTtcXG4gICAgdmFyIHNlbGVjdE9wdGlvbnMgPSBmaWx0ZXJGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpOyAvLyBGaWx0ZXIgZGF0YXRhYmxlIG9uIHN1Ym1pdFxcblxcbiAgICBmaWx0ZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIGZpbHRlclN0cmluZyA9ICcnOyAvLyBHZXQgZmlsdGVyIHZhbHVlc1xcblxcbiAgICAgIHNlbGVjdE9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcXG4gICAgICAgIGlmIChpdGVtLnZhbHVlICYmIGl0ZW0udmFsdWUgIT09ICcnKSB7XFxuICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xcbiAgICAgICAgICAgIGZpbHRlclN0cmluZyArPSAnICc7XFxuICAgICAgICAgIH0gLy8gQnVpbGQgZmlsdGVyIHZhbHVlIG9wdGlvbnNcXG5cXG5cXG4gICAgICAgICAgZmlsdGVyU3RyaW5nICs9IGl0ZW0udmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgfSk7IC8vIEZpbHRlciBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcXG5cXG4gICAgICBkYXRhdGFibGUuc2VhcmNoKGZpbHRlclN0cmluZykuZHJhdygpO1xcbiAgICB9KTsgLy8gUmVzZXQgZGF0YXRhYmxlXFxuXFxuICAgIHJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIC8vIFJlc2V0IGZpbHRlciBmb3JtXFxuICAgICAgc2VsZWN0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xcbiAgICAgICAgLy8gUmVzZXQgU2VsZWN0MiBkcm9wZG93biAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vc2VsZWN0Mi5vcmcvcHJvZ3JhbW1hdGljLWNvbnRyb2wvYWRkLXNlbGVjdC1jbGVhci1pdGVtc1xcbiAgICAgICAgJChpdGVtKS52YWwobnVsbCkudHJpZ2dlcignY2hhbmdlJyk7XFxuICAgICAgfSk7IC8vIEZpbHRlciBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcXG5cXG4gICAgICBkYXRhdGFibGUuc2VhcmNoKCcnKS5kcmF3KCk7XFxuICAgIH0pO1xcbiAgfTsgLy8gRGVsZXRlIHN1YnNjaXJwdGlvblxcblxcblxcbiAgdmFyIGhhbmRsZVJvd0RlbGV0aW9uID0gZnVuY3Rpb24gaGFuZGxlUm93RGVsZXRpb24oKSB7XFxuICAgIC8vIFNlbGVjdCBhbGwgZGVsZXRlIGJ1dHRvbnNcXG4gICAgdmFyIGRlbGV0ZUJ1dHRvbnMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1zdWJzY3JpcHRpb25zLXRhYmxlLWZpbHRlcj1cXFwiZGVsZXRlX3Jvd1xcXCJdJyk7XFxuICAgIGRlbGV0ZUJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xcbiAgICAgIC8vIERlbGV0ZSBidXR0b24gb24gY2xpY2tcXG4gICAgICBkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gU2VsZWN0IHBhcmVudCByb3dcXG5cXG4gICAgICAgIHZhciBwYXJlbnQgPSBlLnRhcmdldC5jbG9zZXN0KCd0cicpOyAvLyBHZXQgY3VzdG9tZXIgbmFtZVxcblxcbiAgICAgICAgdmFyIGN1c3RvbWVyTmFtZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpWzFdLmlubmVyVGV4dDsgLy8gU3dlZXRBbGVydDIgcG9wIHVwIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXFxuXFxuICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICB0ZXh0OiBcXFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBcXFwiICsgY3VzdG9tZXJOYW1lICsgXFxcIj9cXFwiLFxcbiAgICAgICAgICBpY29uOiBcXFwid2FybmluZ1xcXCIsXFxuICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXFxuICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJZZXMsIGRlbGV0ZSFcXFwiLFxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcXFwiTm8sIGNhbmNlbFxcXCIsXFxuICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXFxcImJ0biBmdy1ib2xkIGJ0bi1kYW5nZXJcXFwiLFxcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbjogXFxcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVxcXCJcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XFxuICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICAgICAgdGV4dDogXFxcIllvdSBoYXZlIGRlbGV0ZWQgXFxcIiArIGN1c3RvbWVyTmFtZSArIFxcXCIhLlxcXCIsXFxuICAgICAgICAgICAgICBpY29uOiBcXFwic3VjY2Vzc1xcXCIsXFxuICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXFxcIk9rLCBnb3QgaXQhXFxcIixcXG4gICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVxcXCJcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJyZW50IHJvd1xcbiAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKHBhcmVudCkpLnJlbW92ZSgpLmRyYXcoKTtcXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIC8vIERldGVjdCBjaGVja2VkIGNoZWNrYm94ZXNcXG4gICAgICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XFxuICAgICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICAgIHRleHQ6IGN1c3RvbWVyTmFtZSArIFxcXCIgd2FzIG5vdCBkZWxldGVkLlxcXCIsXFxuICAgICAgICAgICAgICBpY29uOiBcXFwiZXJyb3JcXFwiLFxcbiAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPaywgZ290IGl0IVxcXCIsXFxuICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gIH07IC8vIEluaXQgdG9nZ2xlIHRvb2xiYXJcXG5cXG5cXG4gIHZhciBpbml0VG9nZ2xlVG9vbGJhciA9IGZ1bmN0aW9uIGluaXRUb2dnbGVUb29sYmFyKCkge1xcbiAgICAvLyBUb2dnbGUgc2VsZWN0ZWQgYWN0aW9uIHRvb2xiYXJcXG4gICAgLy8gU2VsZWN0IGFsbCBjaGVja2JveGVzXFxuICAgIHZhciBjaGVja2JveGVzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgnW3R5cGU9XFxcImNoZWNrYm94XFxcIl0nKTsgLy8gU2VsZWN0IGVsZW1lbnRzXFxuXFxuICAgIHRvb2xiYXJCYXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3Vic2NyaXB0aW9uLXRhYmxlLXRvb2xiYXI9XFxcImJhc2VcXFwiXScpO1xcbiAgICB0b29sYmFyU2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtdG9vbGJhcj1cXFwic2VsZWN0ZWRcXFwiXScpO1xcbiAgICBzZWxlY3RlZENvdW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3Vic2NyaXB0aW9uLXRhYmxlLXNlbGVjdD1cXFwic2VsZWN0ZWRfY291bnRcXFwiXScpO1xcbiAgICB2YXIgZGVsZXRlU2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtc2VsZWN0PVxcXCJkZWxldGVfc2VsZWN0ZWRcXFwiXScpOyAvLyBUb2dnbGUgZGVsZXRlIHNlbGVjdGVkIHRvb2xiYXJcXG5cXG4gICAgY2hlY2tib3hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XFxuICAgICAgLy8gQ2hlY2tib3ggb24gY2xpY2sgZXZlbnRcXG4gICAgICBjLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIHRvZ2dsZVRvb2xiYXJzKCk7XFxuICAgICAgICB9LCA1MCk7XFxuICAgICAgfSk7XFxuICAgIH0pOyAvLyBEZWxldGVkIHNlbGVjdGVkIHJvd3NcXG5cXG4gICAgZGVsZXRlU2VsZWN0ZWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgLy8gU3dlZXRBbGVydDIgcG9wIHVwIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXFxuICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgIHRleHQ6IFxcXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHNlbGVjdGVkIGN1c3RvbWVycz9cXFwiLFxcbiAgICAgICAgaWNvbjogXFxcIndhcm5pbmdcXFwiLFxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcXG4gICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcXFwiWWVzLCBkZWxldGUhXFxcIixcXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFxcXCJObywgY2FuY2VsXFxcIixcXG4gICAgICAgIGN1c3RvbUNsYXNzOiB7XFxuICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXFxcIixcXG4gICAgICAgICAgY2FuY2VsQnV0dG9uOiBcXFwiYnRuIGZ3LWJvbGQgYnRuLWFjdGl2ZS1saWdodC1wcmltYXJ5XFxcIlxcbiAgICAgICAgfVxcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xcbiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xcbiAgICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICAgIHRleHQ6IFxcXCJZb3UgaGF2ZSBkZWxldGVkIGFsbCBzZWxlY3RlZCBjdXN0b21lcnMhLlxcXCIsXFxuICAgICAgICAgICAgaWNvbjogXFxcInN1Y2Nlc3NcXFwiLFxcbiAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXFxcIk9rLCBnb3QgaXQhXFxcIixcXG4gICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXFxcImJ0biBmdy1ib2xkIGJ0bi1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBzZWxlY3RlZCBjdXN0b21lcnNcXG4gICAgICAgICAgICBjaGVja2JveGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcXG4gICAgICAgICAgICAgIGlmIChjLmNoZWNrZWQpIHtcXG4gICAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKGMuY2xvc2VzdCgndGJvZHkgdHInKSkpLnJlbW92ZSgpLmRyYXcoKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTsgLy8gUmVtb3ZlIGhlYWRlciBjaGVja2VkIGJveFxcblxcbiAgICAgICAgICAgIHZhciBoZWFkZXJDaGVja2JveCA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0eXBlPVxcXCJjaGVja2JveFxcXCJdJylbMF07XFxuICAgICAgICAgICAgaGVhZGVyQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICB0b2dnbGVUb29sYmFycygpOyAvLyBEZXRlY3QgY2hlY2tlZCBjaGVja2JveGVzXFxuXFxuICAgICAgICAgICAgaW5pdFRvZ2dsZVRvb2xiYXIoKTsgLy8gUmUtaW5pdCB0b29sYmFyIHRvIHJlY2FsY3VsYXRlIGNoZWNrYm94ZXNcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xcbiAgICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICAgIHRleHQ6IFxcXCJTZWxlY3RlZCBjdXN0b21lcnMgd2FzIG5vdCBkZWxldGVkLlxcXCIsXFxuICAgICAgICAgICAgaWNvbjogXFxcImVycm9yXFxcIixcXG4gICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPaywgZ290IGl0IVxcXCIsXFxuICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVxcXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gIH07IC8vIFRvZ2dsZSB0b29sYmFyc1xcblxcblxcbiAgdmFyIHRvZ2dsZVRvb2xiYXJzID0gZnVuY3Rpb24gdG9nZ2xlVG9vbGJhcnMoKSB7XFxuICAgIC8vIFNlbGVjdCByZWZyZXNoZWQgY2hlY2tib3ggRE9NIGVsZW1lbnRzIFxcbiAgICB2YXIgYWxsQ2hlY2tib3hlcyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IFt0eXBlPVxcXCJjaGVja2JveFxcXCJdJyk7IC8vIERldGVjdCBjaGVja2JveGVzIHN0YXRlICYgY291bnRcXG5cXG4gICAgdmFyIGNoZWNrZWRTdGF0ZSA9IGZhbHNlO1xcbiAgICB2YXIgY291bnQgPSAwOyAvLyBDb3VudCBjaGVja2VkIGJveGVzXFxuXFxuICAgIGFsbENoZWNrYm94ZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xcbiAgICAgIGlmIChjLmNoZWNrZWQpIHtcXG4gICAgICAgIGNoZWNrZWRTdGF0ZSA9IHRydWU7XFxuICAgICAgICBjb3VudCsrO1xcbiAgICAgIH1cXG4gICAgfSk7IC8vIFRvZ2dsZSB0b29sYmFyc1xcblxcbiAgICBpZiAoY2hlY2tlZFN0YXRlKSB7XFxuICAgICAgc2VsZWN0ZWRDb3VudC5pbm5lckhUTUwgPSBjb3VudDtcXG4gICAgICB0b29sYmFyQmFzZS5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcXG4gICAgICB0b29sYmFyU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgdG9vbGJhckJhc2UuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XFxuICAgICAgdG9vbGJhclNlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xcbiAgICB9XFxuICB9O1xcblxcbiAgcmV0dXJuIHtcXG4gICAgLy8gUHVibGljIGZ1bmN0aW9ucyAgXFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3Rfc3Vic2NyaXB0aW9uc190YWJsZScpO1xcblxcbiAgICAgIGlmICghdGFibGUpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgaW5pdERhdGF0YWJsZSgpO1xcbiAgICAgIGluaXRUb2dnbGVUb29sYmFyKCk7XFxuICAgICAgaGFuZGxlU2VhcmNoKCk7XFxuICAgICAgaGFuZGxlUm93RGVsZXRpb24oKTtcXG4gICAgICBoYW5kbGVGaWx0ZXIoKTtcXG4gICAgfVxcbiAgfTtcXG59KCk7IC8vIE9uIGRvY3VtZW50IHJlYWR5XFxuXFxuXFxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XFxuICBLVFN1YnNjcmlwdGlvbnNMaXN0LmluaXQoKTtcXG59KTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl5WlhOdmRYSmpaWE12WVhOelpYUnpMMk52Y21VdmFuTXZZM1Z6ZEc5dEwyRndjSE12YzNWaWMyTnlhWEIwYVc5dWN5OXNhWE4wTDJ4cGMzUXVhbk11YW5NaUxDSnRZWEJ3YVc1bmN5STZJa0ZCUVdFN08wRkJSV0lzU1VGQlNVRXNiVUpCUVcxQ0xFZEJRVWNzV1VGQldUdEJRVU5zUXp0QlFVTkJMRTFCUVVsRExFdEJRVW83UVVGRFFTeE5RVUZKUXl4VFFVRktPMEZCUTBFc1RVRkJTVU1zVjBGQlNqdEJRVU5CTEUxQlFVbERMR1ZCUVVvN1FVRkRRU3hOUVVGSlF5eGhRVUZLTEVOQlRtdERMRU5CVVd4RE96dEJRVU5CTEUxQlFVbERMR0ZCUVdFc1IwRkJSeXhUUVVGb1FrRXNZVUZCWjBJc1IwRkJXVHRCUVVNMVFqdEJRVU5CTEZGQlFVMURMRk5CUVZNc1IwRkJSMDRzUzBGQlN5eERRVUZEVHl4blFrRkJUaXhEUVVGMVFpeFZRVUYyUWl4RFFVRnNRanRCUVVWQlJDeEpRVUZCUVN4VFFVRlRMRU5CUVVORkxFOUJRVllzUTBGQmEwSXNWVUZCUVVNc1IwRkJSeXhGUVVGSk8wRkJRM0pDTEZWQlFVMURMRTlCUVU4c1IwRkJSMFFzUjBGQlJ5eERRVUZEUml4blFrRkJTaXhEUVVGeFFpeEpRVUZ5UWl4RFFVRm9RanRCUVVOQkxGVkJRVTFKTEZGQlFWRXNSMEZCUjBNc1RVRkJUU3hEUVVGRFJpeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRU5CUVZkSExGTkJRVm9zUlVGQmRVSXNhVUpCUVhaQ0xFTkJRVTRzUTBGQlowUkRMRTFCUVdoRUxFVkJRV3BDTEVOQlJuRkNMRU5CUlhORU96dEJRVU16UlVvc1RVRkJRVUVzVDBGQlR5eERRVUZETEVOQlFVUXNRMEZCVUN4RFFVRlhTeXhaUVVGWUxFTkJRWGRDTEZsQlFYaENMRVZCUVhORFNpeFJRVUYwUXp0QlFVTklMRXRCU2tRc1JVRktORUlzUTBGVk5VSTdPMEZCUTBGV0xFbEJRVUZCTEZOQlFWTXNSMEZCUjJVc1EwRkJReXhEUVVGRGFFSXNTMEZCUkN4RFFVRkVMRU5CUVZOcFFpeFRRVUZVTEVOQlFXMUNPMEZCUXpOQ0xHTkJRVkVzUzBGRWJVSTdRVUZGTTBJc1pVRkJVeXhGUVVaclFqdEJRVWN6UWl4dlFrRkJZeXhGUVVoaE8wRkJTVE5DTEhOQ1FVRm5RaXhMUVVwWE8wRkJTek5DTEc5Q1FVRmpMRU5CUTFZN1FVRkJSVU1zVVVGQlFVRXNVMEZCVXl4RlFVRkZMRXRCUVdJN1FVRkJiMEpETEZGQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVFM1FpeFBRVVJWTEVWQlEzZENPMEZCUTJ4RE8wRkJRVVZFTEZGQlFVRkJMRk5CUVZNc1JVRkJSU3hMUVVGaU8wRkJRVzlDUXl4UlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQk4wSXNUMEZHVlN4RFFVVjNRanRCUVVaNFFqdEJRVXhoTEV0QlFXNUNMRU5CUVZvc1EwRllORUlzUTBGelFqVkNPenRCUVVOQmJFSXNTVUZCUVVFc1UwRkJVeXhEUVVGRGJVSXNSVUZCVml4RFFVRmhMRTFCUVdJc1JVRkJjVUlzV1VGQldUdEJRVU0zUWtNc1RVRkJRVUVzYVVKQlFXbENPMEZCUTJwQ1F5eE5RVUZCUVN4cFFrRkJhVUk3UVVGRGFrSkRMRTFCUVVGQkxHTkJRV003UVVGRGFrSXNTMEZLUkR0QlFVdElMRWRCTlVKRUxFTkJWR3RETEVOQmRVTnNRenM3TzBGQlEwRXNUVUZCU1VNc1dVRkJXU3hIUVVGSExGTkJRV1pCTEZsQlFXVXNSMEZCV1R0QlFVTXpRaXhSUVVGTlF5eFpRVUZaTEVkQlFVZERMRkZCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl3NFEwRkJka0lzUTBGQmNrSTdRVUZEUVVZc1NVRkJRVUVzV1VGQldTeERRVUZEUnl4blFrRkJZaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhWUVVGVlF5eERRVUZXTEVWQlFXRTdRVUZEYUVRMVFpeE5RVUZCUVN4VFFVRlRMRU5CUVVNMlFpeE5RVUZXTEVOQlFXbENSQ3hEUVVGRExFTkJRVU5GTEUxQlFVWXNRMEZCVTBNc1MwRkJNVUlzUlVGQmFVTkRMRWxCUVdwRE8wRkJRMGdzUzBGR1JEdEJRVWRJTEVkQlRFUXNRMEY0UTJ0RExFTkJLME5zUXpzN08wRkJRMEVzVFVGQlNVTXNXVUZCV1N4SFFVRkhMRk5CUVdaQkxGbEJRV1VzUjBGQldUdEJRVU16UWp0QlFVTkJMRkZCUVUxRExGVkJRVlVzUjBGQlIxUXNVVUZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTERSRFFVRjJRaXhEUVVGdVFqdEJRVU5CTEZGQlFVMVRMRmxCUVZrc1IwRkJSMFFzVlVGQlZTeERRVUZEVWl4aFFVRllMRU5CUVhsQ0xEaERRVUY2UWl4RFFVRnlRanRCUVVOQkxGRkJRVTFWTEZkQlFWY3NSMEZCUjBZc1ZVRkJWU3hEUVVGRFVpeGhRVUZZTEVOQlFYbENMRFpEUVVGNlFpeERRVUZ3UWp0QlFVTkJMRkZCUVUxWExHRkJRV0VzUjBGQlIwZ3NWVUZCVlN4RFFVRkROVUlzWjBKQlFWZ3NRMEZCTkVJc1VVRkJOVUlzUTBGQmRFSXNRMEZNTWtJc1EwRlBNMEk3TzBGQlEwRTJRaXhKUVVGQlFTeFpRVUZaTEVOQlFVTlNMR2RDUVVGaUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExGbEJRVms3UVVGREwwTXNWVUZCU1Zjc1dVRkJXU3hIUVVGSExFVkJRVzVDTEVOQlJDdERMRU5CUnk5RE96dEJRVU5CUkN4TlFVRkJRU3hoUVVGaExFTkJRVU01UWl4UFFVRmtMRU5CUVhOQ0xGVkJRVU5uUXl4SlFVRkVMRVZCUVU5RExFdEJRVkFzUlVGQmFVSTdRVUZEYmtNc1dVRkJTVVFzU1VGQlNTeERRVUZEVWl4TFFVRk1MRWxCUVdOUkxFbEJRVWtzUTBGQlExSXNTMEZCVEN4TFFVRmxMRVZCUVdwRExFVkJRWEZETzBGQlEycERMR05CUVVsVExFdEJRVXNzUzBGQlN5eERRVUZrTEVWQlFXbENPMEZCUTJKR0xGbEJRVUZCTEZsQlFWa3NTVUZCU1N4SFFVRm9RanRCUVVOSUxGZEJTR2RETEVOQlMycERPenM3UVVGRFFVRXNWVUZCUVVFc1dVRkJXU3hKUVVGSlF5eEpRVUZKTEVOQlFVTlNMRXRCUVhKQ08wRkJRMGc3UVVGRFNpeFBRVlJFTEVWQlNpdERMRU5CWlM5RE96dEJRVU5CTDBJc1RVRkJRVUVzVTBGQlV5eERRVUZETmtJc1RVRkJWaXhEUVVGcFFsTXNXVUZCYWtJc1JVRkJLMEpPTEVsQlFTOUNPMEZCUTBnc1MwRnFRa1FzUlVGU01rSXNRMEV5UWpOQ096dEJRVU5CU1N4SlFVRkJRU3hYUVVGWExFTkJRVU5VTEdkQ1FVRmFMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRmxCUVZrN1FVRkRPVU03UVVGRFFWVXNUVUZCUVVFc1lVRkJZU3hEUVVGRE9VSXNUMEZCWkN4RFFVRnpRaXhWUVVGRFowTXNTVUZCUkN4RlFVRlBReXhMUVVGUUxFVkJRV2xDTzBGQlEyNURPMEZCUTBGNlFpeFJRVUZCUVN4RFFVRkRMRU5CUVVOM1FpeEpRVUZFTEVOQlFVUXNRMEZCVVVVc1IwRkJVaXhEUVVGWkxFbEJRVm9zUlVGQmEwSkRMRTlCUVd4Q0xFTkJRVEJDTEZGQlFURkNPMEZCUTBnc1QwRklSQ3hGUVVZNFF5eERRVTg1UXpzN1FVRkRRVEZETEUxQlFVRkJMRk5CUVZNc1EwRkJRelpDTEUxQlFWWXNRMEZCYVVJc1JVRkJha0lzUlVGQmNVSkhMRWxCUVhKQ08wRkJRMGdzUzBGVVJEdEJRVlZJTEVkQmRFTkVMRU5CYUVSclF5eERRWGRHYkVNN096dEJRVU5CTEUxQlFVbFlMR2xDUVVGcFFpeEhRVUZITEZOQlFYQkNRU3hwUWtGQmIwSXNSMEZCV1R0QlFVTm9RenRCUVVOQkxGRkJRVTF6UWl4aFFVRmhMRWRCUVVjMVF5eExRVUZMTEVOQlFVTlBMR2RDUVVGT0xFTkJRWFZDTEcxRVFVRjJRaXhEUVVGMFFqdEJRVVZCY1VNc1NVRkJRVUVzWVVGQllTeERRVUZEY0VNc1QwRkJaQ3hEUVVGelFpeFZRVUZCY1VNc1EwRkJReXhGUVVGSk8wRkJRM1pDTzBGQlEwRkJMRTFCUVVGQkxFTkJRVU1zUTBGQlEycENMR2RDUVVGR0xFTkJRVzFDTEU5QlFXNUNMRVZCUVRSQ0xGVkJRVlZETEVOQlFWWXNSVUZCWVR0QlFVTnlRMEVzVVVGQlFVRXNRMEZCUXl4RFFVRkRhVUlzWTBGQlJpeEhRVVJ4UXl4RFFVZHlRenM3UVVGRFFTeFpRVUZOUXl4TlFVRk5MRWRCUVVkc1FpeERRVUZETEVOQlFVTkZMRTFCUVVZc1EwRkJVMmxDTEU5QlFWUXNRMEZCYVVJc1NVRkJha0lzUTBGQlppeERRVXB4UXl4RFFVMXlRenM3UVVGRFFTeFpRVUZOUXl4WlFVRlpMRWRCUVVkR0xFMUJRVTBzUTBGQlEzaERMR2RDUVVGUUxFTkJRWGRDTEVsQlFYaENMRVZCUVRoQ0xFTkJRVGxDTEVWQlFXbERNa01zVTBGQmRFUXNRMEZRY1VNc1EwRlRja003TzBGQlEwRkRMRkZCUVVGQkxFbEJRVWtzUTBGQlEwTXNTVUZCVEN4RFFVRlZPMEZCUTA1RExGVkJRVUZCTEVsQlFVa3NSVUZCUlN4eFEwRkJjVU5LTEZsQlFYSkRMRWRCUVc5RUxFZEJSSEJFTzBGQlJVNUxMRlZCUVVGQkxFbEJRVWtzUlVGQlJTeFRRVVpCTzBGQlIwNURMRlZCUVVGQkxHZENRVUZuUWl4RlFVRkZMRWxCU0ZvN1FVRkpUa01zVlVGQlFVRXNZMEZCWXl4RlFVRkZMRXRCU2xZN1FVRkxUa01zVlVGQlFVRXNhVUpCUVdsQ0xFVkJRVVVzWTBGTVlqdEJRVTFPUXl4VlFVRkJRU3huUWtGQlowSXNSVUZCUlN4WlFVNWFPMEZCVDA1RExGVkJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVTlVReXhaUVVGQlFTeGhRVUZoTEVWQlFVVXNkMEpCUkU0N1FVRkZWRU1zV1VGQlFVRXNXVUZCV1N4RlFVRkZPMEZCUmt3N1FVRlFVQ3hUUVVGV0xFVkJWMGRETEVsQldFZ3NRMEZYVVN4VlFVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlEzUkNMR05CUVVsQkxFMUJRVTBzUTBGQlF5OUNMRXRCUVZnc1JVRkJhMEk3UVVGRFpHMUNMRmxCUVVGQkxFbEJRVWtzUTBGQlEwTXNTVUZCVEN4RFFVRlZPMEZCUTA1RExHTkJRVUZCTEVsQlFVa3NSVUZCUlN4elFrRkJjMEpLTEZsQlFYUkNMRWRCUVhGRExFbEJSSEpETzBGQlJVNUxMR05CUVVGQkxFbEJRVWtzUlVGQlJTeFRRVVpCTzBGQlIwNUZMR05CUVVGQkxHTkJRV01zUlVGQlJTeExRVWhXTzBGQlNVNURMR05CUVVGQkxHbENRVUZwUWl4RlFVRkZMR0ZCU21JN1FVRkxUa1VzWTBGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFSRExHZENRVUZCUVN4aFFVRmhMRVZCUVVVN1FVRkVUanRCUVV4UUxHRkJRVllzUlVGUlIwVXNTVUZTU0N4RFFWRlJMRmxCUVZrN1FVRkRhRUk3UVVGRFFUZEVMR05CUVVGQkxGTkJRVk1zUTBGQlExRXNSMEZCVml4RFFVRmpUeXhEUVVGRExFTkJRVU1yUWl4TlFVRkVMRU5CUVdZc1JVRkJlVUpwUWl4TlFVRjZRaXhIUVVGclF5OUNMRWxCUVd4RE8wRkJRMGdzWVVGWVJDeEZRVmRITmtJc1NVRllTQ3hEUVZkUkxGbEJRVms3UVVGRGFFSTdRVUZEUVhaRExHTkJRVUZCTEdOQlFXTTdRVUZEYWtJc1lVRmtSRHRCUVdWSUxGZEJhRUpFTEUxQlowSlBMRWxCUVVsM1F5eE5RVUZOTEVOQlFVTkZMRTlCUVZBc1MwRkJiVUlzVVVGQmRrSXNSVUZCYVVNN1FVRkRjRU5rTEZsQlFVRkJMRWxCUVVrc1EwRkJRME1zU1VGQlRDeERRVUZWTzBGQlEwNURMR05CUVVGQkxFbEJRVWtzUlVGQlJVb3NXVUZCV1N4SFFVRkhMRzFDUVVSbU8wRkJSVTVMTEdOQlFVRkJMRWxCUVVrc1JVRkJSU3hQUVVaQk8wRkJSMDVGTEdOQlFVRkJMR05CUVdNc1JVRkJSU3hMUVVoV08wRkJTVTVETEdOQlFVRkJMR2xDUVVGcFFpeEZRVUZGTEdGQlNtSTdRVUZMVGtVc1kwRkJRVUVzVjBGQlZ5eEZRVUZGTzBGQlExUkRMR2RDUVVGQlFTeGhRVUZoTEVWQlFVVTdRVUZFVGp0QlFVeFFMR0ZCUVZZN1FVRlRTRHRCUVVOS0xGTkJka05FTzBGQmQwTklMRTlCYkVSRU8wRkJiVVJJTEV0QmNrUkVPMEZCYzBSSUxFZEJNVVJFTEVOQmVrWnJReXhEUVhGS2JFTTdPenRCUVVOQkxFMUJRVWwyUXl4cFFrRkJhVUlzUjBGQlJ5eFRRVUZ3UWtFc2FVSkJRVzlDTEVkQlFVMDdRVUZETVVJN1FVRkRRVHRCUVVOQkxGRkJRVTAyUXl4VlFVRlZMRWRCUVVkc1JTeExRVUZMTEVOQlFVTlBMR2RDUVVGT0xFTkJRWFZDTEcxQ1FVRjJRaXhEUVVGdVFpeERRVWd3UWl4RFFVc3hRanM3UVVGRFFVd3NTVUZCUVVFc1YwRkJWeXhIUVVGSGQwSXNVVUZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTERaRFFVRjJRaXhEUVVGa08wRkJRMEY0UWl4SlFVRkJRU3hsUVVGbExFZEJRVWQxUWl4UlFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNhVVJCUVhaQ0xFTkJRV3hDTzBGQlEwRjJRaXhKUVVGQlFTeGhRVUZoTEVkQlFVZHpRaXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc2MwUkJRWFpDTEVOQlFXaENPMEZCUTBFc1VVRkJUWGRETEdOQlFXTXNSMEZCUjNwRExGRkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXgxUkVGQmRrSXNRMEZCZGtJc1EwRlVNRUlzUTBGWE1VSTdPMEZCUTBGMVF5eEpRVUZCUVN4VlFVRlZMRU5CUVVNeFJDeFBRVUZZTEVOQlFXMUNMRlZCUVVFMFJDeERRVUZETEVWQlFVazdRVUZEY0VJN1FVRkRRVUVzVFVGQlFVRXNRMEZCUXl4RFFVRkRlRU1zWjBKQlFVWXNRMEZCYlVJc1QwRkJia0lzUlVGQk5FSXNXVUZCV1R0QlFVTndRM2xETEZGQlFVRkJMRlZCUVZVc1EwRkJReXhaUVVGWk8wRkJRMjVDT1VNc1ZVRkJRVUVzWTBGQll6dEJRVU5xUWl4VFFVWlRMRVZCUlZBc1JVRkdUeXhEUVVGV08wRkJSMGdzVDBGS1JEdEJRVXRJTEV0QlVFUXNSVUZhTUVJc1EwRnhRakZDT3p0QlFVTkJORU1zU1VGQlFVRXNZMEZCWXl4RFFVRkRka01zWjBKQlFXWXNRMEZCWjBNc1QwRkJhRU1zUlVGQmVVTXNXVUZCV1R0QlFVTnFSRHRCUVVOQmRVSXNUVUZCUVVFc1NVRkJTU3hEUVVGRFF5eEpRVUZNTEVOQlFWVTdRVUZEVGtNc1VVRkJRVUVzU1VGQlNTeEZRVUZGTEhGRVFVUkJPMEZCUlU1RExGRkJRVUZCTEVsQlFVa3NSVUZCUlN4VFFVWkJPMEZCUjA1RExGRkJRVUZCTEdkQ1FVRm5RaXhGUVVGRkxFbEJTRm83UVVGSlRrTXNVVUZCUVVFc1kwRkJZeXhGUVVGRkxFdEJTbFk3UVVGTFRrTXNVVUZCUVVFc2FVSkJRV2xDTEVWQlFVVXNZMEZNWWp0QlFVMU9ReXhSUVVGQlFTeG5Ra0ZCWjBJc1JVRkJSU3haUVU1YU8wRkJUMDVETEZGQlFVRkJMRmRCUVZjc1JVRkJSVHRCUVVOVVF5eFZRVUZCUVN4aFFVRmhMRVZCUVVVc2QwSkJSRTQ3UVVGRlZFTXNWVUZCUVVFc1dVRkJXU3hGUVVGRk8wRkJSa3c3UVVGUVVDeFBRVUZXTEVWQlYwZERMRWxCV0Vnc1EwRlhVU3hWUVVGVlF5eE5RVUZXTEVWQlFXdENPMEZCUTNSQ0xGbEJRVWxCTEUxQlFVMHNRMEZCUXk5Q0xFdEJRVmdzUlVGQmEwSTdRVUZEWkcxQ0xGVkJRVUZCTEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hEUVVGVk8wRkJRMDVETEZsQlFVRkJMRWxCUVVrc1JVRkJSU3d5UTBGRVFUdEJRVVZPUXl4WlFVRkJRU3hKUVVGSkxFVkJRVVVzVTBGR1FUdEJRVWRPUlN4WlFVRkJRU3hqUVVGakxFVkJRVVVzUzBGSVZqdEJRVWxPUXl4WlFVRkJRU3hwUWtGQmFVSXNSVUZCUlN4aFFVcGlPMEZCUzA1RkxGbEJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVTlVReXhqUVVGQlFTeGhRVUZoTEVWQlFVVTdRVUZFVGp0QlFVeFFMRmRCUVZZc1JVRlJSMFVzU1VGU1NDeERRVkZSTEZsQlFWazdRVUZEYUVJN1FVRkRRVWtzV1VGQlFVRXNWVUZCVlN4RFFVRkRNVVFzVDBGQldDeERRVUZ0UWl4VlFVRkJORVFzUTBGQlF5eEZRVUZKTzBGQlEzQkNMR3RDUVVGSlFTeERRVUZETEVOQlFVTkZMRTlCUVU0c1JVRkJaVHRCUVVOWWNrVXNaMEpCUVVGQkxGTkJRVk1zUTBGQlExRXNSMEZCVml4RFFVRmpUeXhEUVVGRExFTkJRVU52UkN4RFFVRkRMRU5CUVVOd1FpeFBRVUZHTEVOQlFWVXNWVUZCVml4RFFVRkVMRU5CUVdZc1JVRkJkME5uUWl4TlFVRjRReXhIUVVGcFJDOUNMRWxCUVdwRU8wRkJRMGc3UVVGRFNpeGhRVXBFTEVWQlJtZENMRU5CVVdoQ096dEJRVU5CTEdkQ1FVRk5jME1zWTBGQll5eEhRVUZIZGtVc1MwRkJTeXhEUVVGRFR5eG5Ra0ZCVGl4RFFVRjFRaXh0UWtGQmRrSXNSVUZCTkVNc1EwRkJOVU1zUTBGQmRrSTdRVUZEUVdkRkxGbEJRVUZCTEdOQlFXTXNRMEZCUTBRc1QwRkJaaXhIUVVGNVFpeExRVUY2UWp0QlFVTklMRmRCYmtKRUxFVkJiVUpIVWl4SlFXNUNTQ3hEUVcxQ1VTeFpRVUZaTzBGQlEyaENka01zV1VGQlFVRXNZMEZCWXl4SFFVUkZMRU5CUTBVN08wRkJRMnhDUml4WlFVRkJRU3hwUWtGQmFVSXNSMEZHUkN4RFFVVkxPMEZCUTNoQ0xGZEJkRUpFTzBGQmRVSklMRk5CZUVKRUxFMUJkMEpQTEVsQlFVa3dReXhOUVVGTkxFTkJRVU5GTEU5QlFWQXNTMEZCYlVJc1VVRkJka0lzUlVGQmFVTTdRVUZEY0VOa0xGVkJRVUZCTEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hEUVVGVk8wRkJRMDVETEZsQlFVRkJMRWxCUVVrc1JVRkJSU3h4UTBGRVFUdEJRVVZPUXl4WlFVRkJRU3hKUVVGSkxFVkJRVVVzVDBGR1FUdEJRVWRPUlN4WlFVRkJRU3hqUVVGakxFVkJRVVVzUzBGSVZqdEJRVWxPUXl4WlFVRkJRU3hwUWtGQmFVSXNSVUZCUlN4aFFVcGlPMEZCUzA1RkxGbEJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVTlVReXhqUVVGQlFTeGhRVUZoTEVWQlFVVTdRVUZFVGp0QlFVeFFMRmRCUVZZN1FVRlRTRHRCUVVOS0xFOUJMME5FTzBGQlowUklMRXRCYkVSRU8wRkJiVVJJTEVkQmVrVkVMRU5CZEVwclF5eERRV2xQYkVNN096dEJRVU5CTEUxQlFVMXlReXhqUVVGakxFZEJRVWNzVTBGQmFrSkJMR05CUVdsQ0xFZEJRVTA3UVVGRGVrSTdRVUZEUVN4UlFVRk5hVVFzWVVGQllTeEhRVUZIZUVVc1MwRkJTeXhEUVVGRFR5eG5Ra0ZCVGl4RFFVRjFRaXg1UWtGQmRrSXNRMEZCZEVJc1EwRkdlVUlzUTBGSmVrSTdPMEZCUTBFc1VVRkJTV3RGTEZsQlFWa3NSMEZCUnl4TFFVRnVRanRCUVVOQkxGRkJRVWxETEV0QlFVc3NSMEZCUnl4RFFVRmFMRU5CVG5sQ0xFTkJVWHBDT3p0QlFVTkJSaXhKUVVGQlFTeGhRVUZoTEVOQlFVTm9SU3hQUVVGa0xFTkJRWE5DTEZWQlFVRTBSQ3hEUVVGRExFVkJRVWs3UVVGRGRrSXNWVUZCU1VFc1EwRkJReXhEUVVGRFJTeFBRVUZPTEVWQlFXVTdRVUZEV0Vjc1VVRkJRVUVzV1VGQldTeEhRVUZITEVsQlFXWTdRVUZEUVVNc1VVRkJRVUVzUzBGQlN6dEJRVU5TTzBGQlEwb3NTMEZNUkN4RlFWUjVRaXhEUVdkQ2VrSTdPMEZCUTBFc1VVRkJTVVFzV1VGQlNpeEZRVUZyUWp0QlFVTmtja1VzVFVGQlFVRXNZVUZCWVN4RFFVRkRVeXhUUVVGa0xFZEJRVEJDTmtRc1MwRkJNVUk3UVVGRFFYaEZMRTFCUVVGQkxGZEJRVmNzUTBGQlEzbEZMRk5CUVZvc1EwRkJjMEpETEVkQlFYUkNMRU5CUVRCQ0xGRkJRVEZDTzBGQlEwRjZSU3hOUVVGQlFTeGxRVUZsTEVOQlFVTjNSU3hUUVVGb1FpeERRVUV3UWxnc1RVRkJNVUlzUTBGQmFVTXNVVUZCYWtNN1FVRkRTQ3hMUVVwRUxFMUJTVTg3UVVGRFNEbEVMRTFCUVVGQkxGZEJRVmNzUTBGQlEzbEZMRk5CUVZvc1EwRkJjMEpZTEUxQlFYUkNMRU5CUVRaQ0xGRkJRVGRDTzBGQlEwRTNSQ3hOUVVGQlFTeGxRVUZsTEVOQlFVTjNSU3hUUVVGb1FpeERRVUV3UWtNc1IwRkJNVUlzUTBGQk9FSXNVVUZCT1VJN1FVRkRTRHRCUVVOS0xFZEJla0pFT3p0QlFUSkNRU3hUUVVGUE8wRkJRMGc3UVVGRFFVTXNTVUZCUVVFc1NVRkJTU3hGUVVGRkxHZENRVUZaTzBGQlEyUTNSU3hOUVVGQlFTeExRVUZMTEVkQlFVY3dRaXhSUVVGUkxFTkJRVU52UkN4alFVRlVMRU5CUVhkQ0xIZENRVUY0UWl4RFFVRlNPenRCUVVWQkxGVkJRVWtzUTBGQlF6bEZMRXRCUVV3c1JVRkJXVHRCUVVOU08wRkJRMGc3TzBGQlJVUkxMRTFCUVVGQkxHRkJRV0U3UVVGRFltZENMRTFCUVVGQkxHbENRVUZwUWp0QlFVTnFRa2NzVFVGQlFVRXNXVUZCV1R0QlFVTmFSaXhOUVVGQlFTeHBRa0ZCYVVJN1FVRkRha0paTEUxQlFVRkJMRmxCUVZrN1FVRkRaanRCUVdSRkxFZEJRVkE3UVVGblFrZ3NRMEUzVVhsQ0xFVkJRVEZDTEVNc1EwRXJVVUU3T3p0QlFVTkJOa01zVFVGQlRTeERRVUZEUXl4clFrRkJVQ3hEUVVFd1FpeFpRVUZaTzBGQlEyeERha1lzUlVGQlFVRXNiVUpCUVcxQ0xFTkJRVU00UlN4SlFVRndRanRCUVVOSUxFTkJSa1FpTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl5WlhOdmRYSmpaWE12WVhOelpYUnpMMk52Y21VdmFuTXZZM1Z6ZEc5dEwyRndjSE12YzNWaWMyTnlhWEIwYVc5dWN5OXNhWE4wTDJ4cGMzUXVhbk0vTnpRd09DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNjbHh1WEhKY2JuWmhjaUJMVkZOMVluTmpjbWx3ZEdsdmJuTk1hWE4wSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdMeThnUkdWbWFXNWxJSE5vWVhKbFpDQjJZWEpwWVdKc1pYTmNjbHh1SUNBZ0lIWmhjaUIwWVdKc1pUdGNjbHh1SUNBZ0lIWmhjaUJrWVhSaGRHRmliR1U3WEhKY2JpQWdJQ0IyWVhJZ2RHOXZiR0poY2tKaGMyVTdYSEpjYmlBZ0lDQjJZWElnZEc5dmJHSmhjbE5sYkdWamRHVmtPMXh5WEc0Z0lDQWdkbUZ5SUhObGJHVmpkR1ZrUTI5MWJuUTdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1VISnBkbUYwWlNCbWRXNWpkR2x2Ym5OY2NseHVJQ0FnSUhaaGNpQnBibWwwUkdGMFlYUmhZbXhsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGTmxkQ0JrWVhSbElHUmhkR0VnYjNKa1pYSmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBZV0pzWlZKdmQzTWdQU0IwWVdKc1pTNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZDBZbTlrZVNCMGNpY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBZV0pzWlZKdmQzTXVabTl5UldGamFDaHliM2NnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSbFVtOTNJRDBnY205M0xuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0ozUmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElISmxZV3hFWVhSbElEMGdiVzl0Wlc1MEtHUmhkR1ZTYjNkYk5WMHVhVzV1WlhKSVZFMU1MQ0JjSWtSRUlFMU5UU0JaV1ZsWkxDQk1WRndpS1M1bWIzSnRZWFFvS1RzZ0x5OGdjMlZzWldOMElHUmhkR1VnWm5KdmJTQTBkR2dnWTI5c2RXMXVJR2x1SUhSaFlteGxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR1ZTYjNkYk5WMHVjMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMVzl5WkdWeUp5d2djbVZoYkVSaGRHVXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkpibWwwSUdSaGRHRjBZV0pzWlNBdExTMGdiVzl5WlNCcGJtWnZJRzl1SUdSaGRHRjBZV0pzWlhNNklHaDBkSEJ6T2k4dlpHRjBZWFJoWW14bGN5NXVaWFF2YldGdWRXRnNMMXh5WEc0Z0lDQWdJQ0FnSUdSaGRHRjBZV0pzWlNBOUlDUW9kR0ZpYkdVcExrUmhkR0ZVWVdKc1pTaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lhVzVtYjF3aU9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSjI5eVpHVnlKem9nVzEwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNHRm5aVXhsYm1kMGFGd2lPaUF4TUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWENKc1pXNW5kR2hEYUdGdVoyVmNJam9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDZGpiMngxYlc1RVpXWnpKem9nVzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QnZjbVJsY21GaWJHVTZJR1poYkhObExDQjBZWEpuWlhSek9pQXdJSDBzSUM4dklFUnBjMkZpYkdVZ2IzSmtaWEpwYm1jZ2IyNGdZMjlzZFcxdUlEQWdLR05vWldOclltOTRLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCdmNtUmxjbUZpYkdVNklHWmhiSE5sTENCMFlYSm5aWFJ6T2lBMklIMHNJQzh2SUVScGMyRmliR1VnYjNKa1pYSnBibWNnYjI0Z1kyOXNkVzF1SURZZ0tHRmpkR2x2Ym5NcElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JkWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRkpsTFdsdWFYUWdablZ1WTNScGIyNXpJRzl1SUdWMlpYSjVJSFJoWW14bElISmxMV1J5WVhjZ0xTMGdiVzl5WlNCcGJtWnZPaUJvZEhSd2N6b3ZMMlJoZEdGMFlXSnNaWE11Ym1WMEwzSmxabVZ5Wlc1alpTOWxkbVZ1ZEM5a2NtRjNYSEpjYmlBZ0lDQWdJQ0FnWkdGMFlYUmhZbXhsTG05dUtDZGtjbUYzSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibWwwVkc5bloyeGxWRzl2YkdKaGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWU2IzZEVaV3hsZEdsdmJpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMmRuYkdWVWIyOXNZbUZ5Y3lncE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRk5sWVhKamFDQkVZWFJoZEdGaWJHVWdMUzB0SUc5bVptbGphV0ZzSUdSdlkzTWdjbVZtWlhKbGJtTmxPaUJvZEhSd2N6b3ZMMlJoZEdGMFlXSnNaWE11Ym1WMEwzSmxabVZ5Wlc1alpTOWhjR2t2YzJWaGNtTm9LQ2xjY2x4dUlDQWdJSFpoY2lCb1lXNWtiR1ZUWldGeVkyZ2dQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ptbHNkR1Z5VTJWaGNtTm9JRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25XMlJoZEdFdGEzUXRjM1ZpYzJOeWFYQjBhVzl1TFhSaFlteGxMV1pwYkhSbGNqMWNJbk5sWVhKamFGd2lYU2NwTzF4eVhHNGdJQ0FnSUNBZ0lHWnBiSFJsY2xObFlYSmphQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RyWlhsMWNDY3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRjBZV0pzWlM1elpXRnlZMmdvWlM1MFlYSm5aWFF1ZG1Gc2RXVXBMbVJ5WVhjb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJHYVd4MFpYSWdSR0YwWVhSaFlteGxYSEpjYmlBZ0lDQjJZWElnYUdGdVpHeGxSbWxzZEdWeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5sYkdWamRDQm1hV3gwWlhJZ2IzQjBhVzl1YzF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdacGJIUmxja1p2Y20wZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkYlpHRjBZUzFyZEMxemRXSnpZM0pwY0hScGIyNHRkR0ZpYkdVdFptbHNkR1Z5UFZ3aVptOXliVndpWFNjcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHWnBiSFJsY2tKMWRIUnZiaUE5SUdacGJIUmxja1p2Y20wdWNYVmxjbmxUWld4bFkzUnZjaWduVzJSaGRHRXRhM1F0YzNWaWMyTnlhWEIwYVc5dUxYUmhZbXhsTFdacGJIUmxjajFjSW1acGJIUmxjbHdpWFNjcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjMlYwUW5WMGRHOXVJRDBnWm1sc2RHVnlSbTl5YlM1eGRXVnllVk5sYkdWamRHOXlLQ2RiWkdGMFlTMXJkQzF6ZFdKelkzSnBjSFJwYjI0dGRHRmliR1V0Wm1sc2RHVnlQVndpY21WelpYUmNJbDBuS1R0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1JQY0hScGIyNXpJRDBnWm1sc2RHVnlSbTl5YlM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkelpXeGxZM1FuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1JtbHNkR1Z5SUdSaGRHRjBZV0pzWlNCdmJpQnpkV0p0YVhSY2NseHVJQ0FnSUNBZ0lDQm1hV3gwWlhKQ2RYUjBiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3gwWlhKVGRISnBibWNnUFNBbkp6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVkbGRDQm1hV3gwWlhJZ2RtRnNkV1Z6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRFOXdkR2x2Ym5NdVptOXlSV0ZqYUNnb2FYUmxiU3dnYVc1a1pYZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwZEdWdExuWmhiSFZsSUNZbUlHbDBaVzB1ZG1Gc2RXVWdJVDA5SUNjbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1WkdWNElDRTlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiSFJsY2xOMGNtbHVaeUFyUFNBbklDYzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJDZFdsc1pDQm1hV3gwWlhJZ2RtRnNkV1VnYjNCMGFXOXVjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiSFJsY2xOMGNtbHVaeUFyUFNCcGRHVnRMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFWnBiSFJsY2lCa1lYUmhkR0ZpYkdVZ0xTMHRJRzltWm1samFXRnNJR1J2WTNNZ2NtVm1aWEpsYm1ObE9pQm9kSFJ3Y3pvdkwyUmhkR0YwWVdKc1pYTXVibVYwTDNKbFptVnlaVzVqWlM5aGNHa3ZjMlZoY21Ob0tDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZWFJoWW14bExuTmxZWEpqYUNobWFXeDBaWEpUZEhKcGJtY3BMbVJ5WVhjb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnpaWFFnWkdGMFlYUmhZbXhsWEhKY2JpQWdJQ0FnSUNBZ2NtVnpaWFJDZFhSMGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGMyVjBJR1pwYkhSbGNpQm1iM0p0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRFOXdkR2x2Ym5NdVptOXlSV0ZqYUNnb2FYUmxiU3dnYVc1a1pYZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsYzJWMElGTmxiR1ZqZERJZ1pISnZjR1J2ZDI0Z0xTMHRJRzltWm1samFXRnNJR1J2WTNNZ2NtVm1aWEpsYm1ObE9pQm9kSFJ3Y3pvdkwzTmxiR1ZqZERJdWIzSm5MM0J5YjJkeVlXMXRZWFJwWXkxamIyNTBjbTlzTDJGa1pDMXpaV3hsWTNRdFkyeGxZWEl0YVhSbGJYTmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYVhSbGJTa3VkbUZzS0c1MWJHd3BMblJ5YVdkblpYSW9KMk5vWVc1blpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFWnBiSFJsY2lCa1lYUmhkR0ZpYkdVZ0xTMHRJRzltWm1samFXRnNJR1J2WTNNZ2NtVm1aWEpsYm1ObE9pQm9kSFJ3Y3pvdkwyUmhkR0YwWVdKc1pYTXVibVYwTDNKbFptVnlaVzVqWlM5aGNHa3ZjMlZoY21Ob0tDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZWFJoWW14bExuTmxZWEpqYUNnbkp5a3VaSEpoZHlncE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRVJsYkdWMFpTQnpkV0p6WTJseWNIUnBiMjVjY2x4dUlDQWdJSFpoY2lCb1lXNWtiR1ZTYjNkRVpXeGxkR2x2YmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QlRaV3hsWTNRZ1lXeHNJR1JsYkdWMFpTQmlkWFIwYjI1elhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHVnNaWFJsUW5WMGRHOXVjeUE5SUhSaFlteGxMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMXRrWVhSaExXdDBMWE4xWW5OamNtbHdkR2x2Ym5NdGRHRmliR1V0Wm1sc2RHVnlQVndpWkdWc1pYUmxYM0p2ZDF3aVhTY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmtaV3hsZEdWQ2RYUjBiMjV6TG1admNrVmhZMmdvWkNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVJsYkdWMFpTQmlkWFIwYjI0Z2IyNGdZMnhwWTJ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJWc1pXTjBJSEJoY21WdWRDQnliM2RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoY21WdWRDQTlJR1V1ZEdGeVoyVjBMbU5zYjNObGMzUW9KM1J5SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1IyVjBJR04xYzNSdmJXVnlJRzVoYldWY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWMzUnZiV1Z5VG1GdFpTQTlJSEJoY21WdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZDBaQ2NwV3pGZExtbHVibVZ5VkdWNGREdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRkMlZsZEVGc1pYSjBNaUJ3YjNBZ2RYQWdMUzB0SUc5bVptbGphV0ZzSUdSdlkzTWdjbVZtWlhKbGJtTmxPaUJvZEhSd2N6b3ZMM04zWldWMFlXeGxjblF5TG1kcGRHaDFZaTVwYnk5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGTjNZV3d1Wm1seVpTaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nWENKQmNtVWdlVzkxSUhOMWNtVWdlVzkxSUhkaGJuUWdkRzhnWkdWc1pYUmxJRndpSUNzZ1kzVnpkRzl0WlhKT1lXMWxJQ3NnWENJL1hDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiam9nWENKM1lYSnVhVzVuWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJodmQwTmhibU5sYkVKMWRIUnZiam9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjV6VTNSNWJHbHVaem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlVKMWRIUnZibFJsZUhRNklGd2lXV1Z6TENCa1pXeGxkR1VoWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGdVkyVnNRblYwZEc5dVZHVjRkRG9nWENKT2J5d2dZMkZ1WTJWc1hDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0UTJ4aGMzTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJqb2dYQ0ppZEc0Z1puY3RZbTlzWkNCaWRHNHRaR0Z1WjJWeVhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYm1ObGJFSjFkSFJ2YmpvZ1hDSmlkRzRnWm5jdFltOXNaQ0JpZEc0dFlXTjBhWFpsTFd4cFoyaDBMWEJ5YVcxaGNubGNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNGdLSEpsYzNWc2RDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXVkbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVM2RoYkM1bWFYSmxLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUZ3aVdXOTFJR2hoZG1VZ1pHVnNaWFJsWkNCY0lpQXJJR04xYzNSdmJXVnlUbUZ0WlNBcklGd2lJUzVjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklGd2ljM1ZqWTJWemMxd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1YzFOMGVXeHBibWM2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlVKMWRIUnZibFJsZUhRNklGd2lUMnNzSUdkdmRDQnBkQ0ZjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xYzNSdmJVTnNZWE56T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlVKMWRIUnZiam9nWENKaWRHNGdabmN0WW05c1pDQmlkRzR0Y0hKcGJXRnllVndpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGJXOTJaU0JqZFhKeVpXNTBJSEp2ZDF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVhSaFlteGxMbkp2ZHlna0tIQmhjbVZ1ZENrcExuSmxiVzkyWlNncExtUnlZWGNvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkVaWFJsWTNRZ1kyaGxZMnRsWkNCamFHVmphMkp2ZUdWelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjJkbmJHVlViMjlzWW1GeWN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbGMzVnNkQzVrYVhOdGFYTnpJRDA5UFNBblkyRnVZMlZzSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRkMkZzTG1acGNtVW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nWTNWemRHOXRaWEpPWVcxbElDc2dYQ0lnZDJGeklHNXZkQ0JrWld4bGRHVmtMbHdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052YmpvZ1hDSmxjbkp2Y2x3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVjMU4wZVd4cGJtYzZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJsUmxlSFE2SUZ3aVQyc3NJR2R2ZENCcGRDRmNJaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjM1J2YlVOc1lYTnpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJqb2dYQ0ppZEc0Z1puY3RZbTlzWkNCaWRHNHRjSEpwYldGeWVWd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdkx5QkpibWwwSUhSdloyZHNaU0IwYjI5c1ltRnlYSEpjYmlBZ0lDQjJZWElnYVc1cGRGUnZaMmRzWlZSdmIyeGlZWElnUFNBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdWRzluWjJ4bElITmxiR1ZqZEdWa0lHRmpkR2x2YmlCMGIyOXNZbUZ5WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVMlZzWldOMElHRnNiQ0JqYUdWamEySnZlR1Z6WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTJobFkydGliM2hsY3lBOUlIUmhZbXhsTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0MGVYQmxQVndpWTJobFkydGliM2hjSWwwbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVMlZzWldOMElHVnNaVzFsYm5SelhISmNiaUFnSUNBZ0lDQWdkRzl2YkdKaGNrSmhjMlVnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RiWkdGMFlTMXJkQzF6ZFdKelkzSnBjSFJwYjI0dGRHRmliR1V0ZEc5dmJHSmhjajFjSW1KaGMyVmNJbDBuS1R0Y2NseHVJQ0FnSUNBZ0lDQjBiMjlzWW1GeVUyVnNaV04wWldRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkYlpHRjBZUzFyZEMxemRXSnpZM0pwY0hScGIyNHRkR0ZpYkdVdGRHOXZiR0poY2oxY0luTmxiR1ZqZEdWa1hDSmRKeWs3WEhKY2JpQWdJQ0FnSUNBZ2MyVnNaV04wWldSRGIzVnVkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KMXRrWVhSaExXdDBMWE4xWW5OamNtbHdkR2x2YmkxMFlXSnNaUzF6Wld4bFkzUTlYQ0p6Wld4bFkzUmxaRjlqYjNWdWRGd2lYU2NwTzF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSbGJHVjBaVk5sYkdWamRHVmtJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25XMlJoZEdFdGEzUXRjM1ZpYzJOeWFYQjBhVzl1TFhSaFlteGxMWE5sYkdWamREMWNJbVJsYkdWMFpWOXpaV3hsWTNSbFpGd2lYU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCVWIyZG5iR1VnWkdWc1pYUmxJSE5sYkdWamRHVmtJSFJ2YjJ4aVlYSmNjbHh1SUNBZ0lDQWdJQ0JqYUdWamEySnZlR1Z6TG1admNrVmhZMmdvWXlBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5vWldOclltOTRJRzl1SUdOc2FXTnJJR1YyWlc1MFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIyZG5iR1ZVYjI5c1ltRnljeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dOVEFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUkdWc1pYUmxaQ0J6Wld4bFkzUmxaQ0J5YjNkelhISmNiaUFnSUNBZ0lDQWdaR1ZzWlhSbFUyVnNaV04wWldRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk4zWldWMFFXeGxjblF5SUhCdmNDQjFjQ0F0TFMwZ2IyWm1hV05wWVd3Z1pHOWpjeUJ5WldabGNtVnVZMlU2SUdoMGRIQnpPaTh2YzNkbFpYUmhiR1Z5ZERJdVoybDBhSFZpTG1sdkwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCVGQyRnNMbVpwY21Vb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1hDSkJjbVVnZVc5MUlITjFjbVVnZVc5MUlIZGhiblFnZEc4Z1pHVnNaWFJsSUhObGJHVmpkR1ZrSUdOMWMzUnZiV1Z5Y3o5Y0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklGd2lkMkZ5Ym1sdVoxd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJodmQwTmhibU5sYkVKMWRIUnZiam9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJuTlRkSGxzYVc1bk9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwY20xQ2RYUjBiMjVVWlhoME9pQmNJbGxsY3l3Z1pHVnNaWFJsSVZ3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ1WTJWc1FuVjBkRzl1VkdWNGREb2dYQ0pPYnl3Z1kyRnVZMlZzWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxRGJHRnpjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acGNtMUNkWFIwYjI0NklGd2lZblJ1SUdaM0xXSnZiR1FnWW5SdUxXUmhibWRsY2x3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJtTmxiRUoxZEhSdmJqb2dYQ0ppZEc0Z1puY3RZbTlzWkNCaWRHNHRZV04wYVhabExXeHBaMmgwTFhCeWFXMWhjbmxjSWx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoeVpYTjFiSFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXVkbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVGQyRnNMbVpwY21Vb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCY0lsbHZkU0JvWVhabElHUmxiR1YwWldRZ1lXeHNJSE5sYkdWamRHVmtJR04xYzNSdmJXVnljeUV1WENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ2SUZ3aWMzVmpZMlZ6YzF3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWFIwYjI1elUzUjViR2x1WnpvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBjbTFDZFhSMGIyNVVaWGgwT2lCY0lrOXJMQ0JuYjNRZ2FYUWhYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVU5zWVhOek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hWEp0UW5WMGRHOXVPaUJjSW1KMGJpQm1keTFpYjJ4a0lHSjBiaTF3Y21sdFlYSjVYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHRnNiQ0J6Wld4bFkzUmxaQ0JqZFhOMGIyMWxjbk5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydGliM2hsY3k1bWIzSkZZV05vS0dNZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR011WTJobFkydGxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRjBZV0pzWlM1eWIzY29KQ2hqTG1Oc2IzTmxjM1FvSjNSaWIyUjVJSFJ5SnlrcEtTNXlaVzF2ZG1Vb0tTNWtjbUYzS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUdobFlXUmxjaUJqYUdWamEyVmtJR0p2ZUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JvWldGa1pYSkRhR1ZqYTJKdmVDQTlJSFJoWW14bExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0oxdDBlWEJsUFZ3aVkyaGxZMnRpYjNoY0lsMG5LVnN3WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHVmhaR1Z5UTJobFkydGliM2d1WTJobFkydGxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjJkbmJHVlViMjlzWW1GeWN5Z3BPeUF2THlCRVpYUmxZM1FnWTJobFkydGxaQ0JqYUdWamEySnZlR1Z6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUlViMmRuYkdWVWIyOXNZbUZ5S0NrN0lDOHZJRkpsTFdsdWFYUWdkRzl2YkdKaGNpQjBieUJ5WldOaGJHTjFiR0YwWlNCamFHVmphMkp2ZUdWelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzNWc2RDNWthWE50YVhOeklEMDlQU0FuWTJGdVkyVnNKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk4zWVd3dVptbHlaU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJRndpVTJWc1pXTjBaV1FnWTNWemRHOXRaWEp6SUhkaGN5QnViM1FnWkdWc1pYUmxaQzVjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiam9nWENKbGNuSnZjbHdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjV6VTNSNWJHbHVaem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acGNtMUNkWFIwYjI1VVpYaDBPaUJjSWs5ckxDQm5iM1FnYVhRaFhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xYzNSdmJVTnNZWE56T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFYSnRRblYwZEc5dU9pQmNJbUowYmlCbWR5MWliMnhrSUdKMGJpMXdjbWx0WVhKNVhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdWRzluWjJ4bElIUnZiMnhpWVhKelhISmNiaUFnSUNCamIyNXpkQ0IwYjJkbmJHVlViMjlzWW1GeWN5QTlJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCVFpXeGxZM1FnY21WbWNtVnphR1ZrSUdOb1pXTnJZbTk0SUVSUFRTQmxiR1Z0Wlc1MGN5QmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmhiR3hEYUdWamEySnZlR1Z6SUQwZ2RHRmliR1V1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duZEdKdlpIa2dXM1I1Y0dVOVhDSmphR1ZqYTJKdmVGd2lYU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRVpYUmxZM1FnWTJobFkydGliM2hsY3lCemRHRjBaU0FtSUdOdmRXNTBYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHTm9aV05yWldSVGRHRjBaU0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiM1Z1ZENBOUlEQTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRU52ZFc1MElHTm9aV05yWldRZ1ltOTRaWE5jY2x4dUlDQWdJQ0FnSUNCaGJHeERhR1ZqYTJKdmVHVnpMbVp2Y2tWaFkyZ29ZeUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpMbU5vWldOclpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJaV1JUZEdGMFpTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiM1Z1ZENzck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZSdloyZHNaU0IwYjI5c1ltRnljMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGphR1ZqYTJWa1UzUmhkR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JEYjNWdWRDNXBibTVsY2toVVRVd2dQU0JqYjNWdWREdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXZiR0poY2tKaGMyVXVZMnhoYzNOTWFYTjBMbUZrWkNnblpDMXViMjVsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmIyeGlZWEpUWld4bFkzUmxaQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RrTFc1dmJtVW5LVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjI5c1ltRnlRbUZ6WlM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Nka0xXNXZibVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJHSmhjbE5sYkdWamRHVmtMbU5zWVhOelRHbHpkQzVoWkdRb0oyUXRibTl1WlNjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRkIxWW14cFl5Qm1kVzVqZEdsdmJuTWdJRnh5WEc0Z0lDQWdJQ0FnSUdsdWFYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGaWJHVWdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25hM1JmYzNWaWMyTnlhWEIwYVc5dWMxOTBZV0pzWlNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMFlXSnNaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtbDBSR0YwWVhSaFlteGxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YVhSVWIyZG5iR1ZVYjI5c1ltRnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pWTmxZWEpqYUNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZTYjNkRVpXeGxkR2x2YmlncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZHYVd4MFpYSW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibjBvS1R0Y2NseHVYSEpjYmk4dklFOXVJR1J2WTNWdFpXNTBJSEpsWVdSNVhISmNia3RVVlhScGJDNXZia1JQVFVOdmJuUmxiblJNYjJGa1pXUW9ablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnUzFSVGRXSnpZM0pwY0hScGIyNXpUR2x6ZEM1cGJtbDBLQ2s3WEhKY2JuMHBPeUpkTENKdVlXMWxjeUk2V3lKTFZGTjFZbk5qY21sd2RHbHZibk5NYVhOMElpd2lkR0ZpYkdVaUxDSmtZWFJoZEdGaWJHVWlMQ0owYjI5c1ltRnlRbUZ6WlNJc0luUnZiMnhpWVhKVFpXeGxZM1JsWkNJc0luTmxiR1ZqZEdWa1EyOTFiblFpTENKcGJtbDBSR0YwWVhSaFlteGxJaXdpZEdGaWJHVlNiM2R6SWl3aWNYVmxjbmxUWld4bFkzUnZja0ZzYkNJc0ltWnZja1ZoWTJnaUxDSnliM2NpTENKa1lYUmxVbTkzSWl3aWNtVmhiRVJoZEdVaUxDSnRiMjFsYm5RaUxDSnBibTVsY2toVVRVd2lMQ0ptYjNKdFlYUWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSWtJaXdpUkdGMFlWUmhZbXhsSWl3aWIzSmtaWEpoWW14bElpd2lkR0Z5WjJWMGN5SXNJbTl1SWl3aWFXNXBkRlJ2WjJkc1pWUnZiMnhpWVhJaUxDSm9ZVzVrYkdWU2IzZEVaV3hsZEdsdmJpSXNJblJ2WjJkc1pWUnZiMnhpWVhKeklpd2lhR0Z1Wkd4bFUyVmhjbU5vSWl3aVptbHNkR1Z5VTJWaGNtTm9JaXdpWkc5amRXMWxiblFpTENKeGRXVnllVk5sYkdWamRHOXlJaXdpWVdSa1JYWmxiblJNYVhOMFpXNWxjaUlzSW1VaUxDSnpaV0Z5WTJnaUxDSjBZWEpuWlhRaUxDSjJZV3gxWlNJc0ltUnlZWGNpTENKb1lXNWtiR1ZHYVd4MFpYSWlMQ0ptYVd4MFpYSkdiM0p0SWl3aVptbHNkR1Z5UW5WMGRHOXVJaXdpY21WelpYUkNkWFIwYjI0aUxDSnpaV3hsWTNSUGNIUnBiMjV6SWl3aVptbHNkR1Z5VTNSeWFXNW5JaXdpYVhSbGJTSXNJbWx1WkdWNElpd2lkbUZzSWl3aWRISnBaMmRsY2lJc0ltUmxiR1YwWlVKMWRIUnZibk1pTENKa0lpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSndZWEpsYm5RaUxDSmpiRzl6WlhOMElpd2lZM1Z6ZEc5dFpYSk9ZVzFsSWl3aWFXNXVaWEpVWlhoMElpd2lVM2RoYkNJc0ltWnBjbVVpTENKMFpYaDBJaXdpYVdOdmJpSXNJbk5vYjNkRFlXNWpaV3hDZFhSMGIyNGlMQ0ppZFhSMGIyNXpVM1I1YkdsdVp5SXNJbU52Ym1acGNtMUNkWFIwYjI1VVpYaDBJaXdpWTJGdVkyVnNRblYwZEc5dVZHVjRkQ0lzSW1OMWMzUnZiVU5zWVhOeklpd2lZMjl1Wm1seWJVSjFkSFJ2YmlJc0ltTmhibU5sYkVKMWRIUnZiaUlzSW5Sb1pXNGlMQ0p5WlhOMWJIUWlMQ0p5WlcxdmRtVWlMQ0prYVhOdGFYTnpJaXdpWTJobFkydGliM2hsY3lJc0ltUmxiR1YwWlZObGJHVmpkR1ZrSWl3aVl5SXNJbk5sZEZScGJXVnZkWFFpTENKamFHVmphMlZrSWl3aWFHVmhaR1Z5UTJobFkydGliM2dpTENKaGJHeERhR1ZqYTJKdmVHVnpJaXdpWTJobFkydGxaRk4wWVhSbElpd2lZMjkxYm5RaUxDSmpiR0Z6YzB4cGMzUWlMQ0poWkdRaUxDSnBibWwwSWl3aVoyVjBSV3hsYldWdWRFSjVTV1FpTENKTFZGVjBhV3dpTENKdmJrUlBUVU52Ym5SbGJuUk1iMkZrWldRaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy9zdWJzY3JpcHRpb25zL2xpc3QvbGlzdC5qc1xcblwiKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBzdGFydHVwXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBjYW4ndCBiZSBpbmxpbmVkIGJlY2F1c2UgdGhlIGV2YWwtc291cmNlLW1hcCBkZXZ0b29sIGlzIHVzZWQuXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vKioqKioqLyBcdF9fd2VicGFja19tb2R1bGVzX19bXCIuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy9zdWJzY3JpcHRpb25zL2xpc3QvbGlzdC5qc1wiXSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIH0pKClcbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFTLENBQUMsWUFBTTtFQUFFO0VBQ2xCO0VBQVUsWUFBWTs7RUFDdEI7RUFBVSxJQUFJQSxtQkFBbUIsR0FBSTtJQUVyQyxLQUFNLG1FQUFtRTtJQUN6RTtBQUNBO0FBQ0E7SUFDQTtJQUFPLFNBQUFDLHVEQUFBLEVBQU07TUFFYkMsSUFBSSxDQUFDLHc1bUNBQXc1bUMsQ0FBQzs7TUFFOTVtQztJQUFNLENBQUM7O0lBRVA7RUFBVSxDQUFFO0VBQ1o7RUFDQTtFQUNBLFNBQVU7RUFDVixTQUFVO0VBQ1YsU0FBVTtFQUNWO0VBQVUsSUFBSUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDO0VBQVVILG1CQUFtQixDQUFDLG1FQUFtRSxDQUFDLENBQUMsQ0FBQztFQUNwRztFQUNBO0FBQVMsQ0FBQyxFQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9kZW1vMS9qcy9jdXN0b20vYXBwcy9zdWJzY3JpcHRpb25zL2xpc3QvbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/subscriptions/list/list.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js"]();
/******/ 	
/******/ })()
;