/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/subscriptions/list/list.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/subscriptions/list/list.js ***!
  \*************************************************************************/
/***/ (() => {

"use strict";
eval("\n\nvar KTSubscriptionsList = function () {\n  // Define shared variables\n  var table;\n  var datatable;\n  var toolbarBase;\n  var toolbarSelected;\n  var selectedCount; // Private functions\n\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\n\n      dateRow[5].setAttribute('data-order', realDate);\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      }, // Disable ordering on column 0 (checkbox)\n      {\n        orderable: false,\n        targets: 6\n      } // Disable ordering on column 6 (actions)                \n      ]\n    }); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleRowDeletion();\n      toggleToolbars();\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearch = function handleSearch() {\n    var filterSearch = document.querySelector('[data-kt-subscription-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Filter Datatable\n\n\n  var handleFilter = function handleFilter() {\n    // Select filter options\n    var filterForm = document.querySelector('[data-kt-subscription-table-filter=\"form\"]');\n    var filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"filter\"]');\n    var resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"reset\"]');\n    var selectOptions = filterForm.querySelectorAll('select'); // Filter datatable on submit\n\n    filterButton.addEventListener('click', function () {\n      var filterString = ''; // Get filter values\n\n      selectOptions.forEach(function (item, index) {\n        if (item.value && item.value !== '') {\n          if (index !== 0) {\n            filterString += ' ';\n          } // Build filter value options\n\n\n          filterString += item.value;\n        }\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search(filterString).draw();\n    }); // Reset datatable\n\n    resetButton.addEventListener('click', function () {\n      // Reset filter form\n      selectOptions.forEach(function (item, index) {\n        // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\n        $(item).val(null).trigger('change');\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n      datatable.search('').draw();\n    });\n  }; // Delete subscirption\n\n\n  var handleRowDeletion = function handleRowDeletion() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get customer name\n\n        var customerName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + customerName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + customerName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            }).then(function () {\n              // Detect checked checkboxes\n              toggleToolbars();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]'); // Select elements\n\n    toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\"base\"]');\n    toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\"selected\"]');\n    selectedCount = document.querySelector('[data-kt-subscription-table-select=\"selected_count\"]');\n    var deleteSelected = document.querySelector('[data-kt-subscription-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected customers?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected customers!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          }).then(function () {\n            toggleToolbars(); // Detect checked checkboxes\n\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected customers was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Select refreshed checkbox DOM elements \n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n\n  return {\n    // Public functions  \n    init: function init() {\n      table = document.getElementById('kt_subscriptions_table');\n\n      if (!table) {\n        return;\n      }\n\n      initDatatable();\n      initToggleToolbar();\n      handleSearch();\n      handleRowDeletion();\n      handleFilter();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTSubscriptionsList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvc3Vic2NyaXB0aW9ucy9saXN0L2xpc3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBWTtBQUNsQztBQUNBLE1BQUlDLEtBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsV0FBSjtBQUNBLE1BQUlDLGVBQUo7QUFDQSxNQUFJQyxhQUFKLENBTmtDLENBUWxDOztBQUNBLE1BQUlDLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBWTtBQUM1QjtBQUNBLFFBQU1DLFNBQVMsR0FBR04sS0FBSyxDQUFDTyxnQkFBTixDQUF1QixVQUF2QixDQUFsQjtBQUVBRCxJQUFBQSxTQUFTLENBQUNFLE9BQVYsQ0FBa0IsVUFBQUMsR0FBRyxFQUFJO0FBQ3JCLFVBQU1DLE9BQU8sR0FBR0QsR0FBRyxDQUFDRixnQkFBSixDQUFxQixJQUFyQixDQUFoQjtBQUNBLFVBQU1JLFFBQVEsR0FBR0MsTUFBTSxDQUFDRixPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdHLFNBQVosRUFBdUIsaUJBQXZCLENBQU4sQ0FBZ0RDLE1BQWhELEVBQWpCLENBRnFCLENBRXNEOztBQUMzRUosTUFBQUEsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXSyxZQUFYLENBQXdCLFlBQXhCLEVBQXNDSixRQUF0QztBQUNILEtBSkQsRUFKNEIsQ0FVNUI7O0FBQ0FWLElBQUFBLFNBQVMsR0FBR2UsQ0FBQyxDQUFDaEIsS0FBRCxDQUFELENBQVNpQixTQUFULENBQW1CO0FBQzNCLGNBQVEsS0FEbUI7QUFFM0IsZUFBUyxFQUZrQjtBQUczQixvQkFBYyxFQUhhO0FBSTNCLHNCQUFnQixLQUpXO0FBSzNCLG9CQUFjLENBQ1Y7QUFBRUMsUUFBQUEsU0FBUyxFQUFFLEtBQWI7QUFBb0JDLFFBQUFBLE9BQU8sRUFBRTtBQUE3QixPQURVLEVBQ3dCO0FBQ2xDO0FBQUVELFFBQUFBLFNBQVMsRUFBRSxLQUFi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RSxPQUFOLEVBQWU7QUFDWEcsUUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDQUMsUUFBQUEsS0FBSztBQUNSO0FBQ0osS0FMRCxFQVR5QixDQWdCekI7O0FBQ0EsUUFBSUQsWUFBSixFQUFrQjtBQUNkckUsTUFBQUEsYUFBYSxDQUFDUyxTQUFkLEdBQTBCNkQsS0FBMUI7QUFDQXhFLE1BQUFBLFdBQVcsQ0FBQ3lFLFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLFFBQTFCO0FBQ0F6RSxNQUFBQSxlQUFlLENBQUN3RSxTQUFoQixDQUEwQlgsTUFBMUIsQ0FBaUMsUUFBakM7QUFDSCxLQUpELE1BSU87QUFDSDlELE1BQUFBLFdBQVcsQ0FBQ3lFLFNBQVosQ0FBc0JYLE1BQXRCLENBQTZCLFFBQTdCO0FBQ0E3RCxNQUFBQSxlQUFlLENBQUN3RSxTQUFoQixDQUEwQkMsR0FBMUIsQ0FBOEIsUUFBOUI7QUFDSDtBQUNKLEdBekJEOztBQTJCQSxTQUFPO0FBQ0g7QUFDQUMsSUFBQUEsSUFBSSxFQUFFLGdCQUFZO0FBQ2Q3RSxNQUFBQSxLQUFLLEdBQUcwQixRQUFRLENBQUNvRCxjQUFULENBQXdCLHdCQUF4QixDQUFSOztBQUVBLFVBQUksQ0FBQzlFLEtBQUwsRUFBWTtBQUNSO0FBQ0g7O0FBRURLLE1BQUFBLGFBQWE7QUFDYmdCLE1BQUFBLGlCQUFpQjtBQUNqQkcsTUFBQUEsWUFBWTtBQUNaRixNQUFBQSxpQkFBaUI7QUFDakJZLE1BQUFBLFlBQVk7QUFDZjtBQWRFLEdBQVA7QUFnQkgsQ0E3UXlCLEVBQTFCLEMsQ0ErUUE7OztBQUNBNkMsTUFBTSxDQUFDQyxrQkFBUCxDQUEwQixZQUFZO0FBQ2xDakYsRUFBQUEsbUJBQW1CLENBQUM4RSxJQUFwQjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvc3Vic2NyaXB0aW9ucy9saXN0L2xpc3QuanM/NzQwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVFN1YnNjcmlwdGlvbnNMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRGVmaW5lIHNoYXJlZCB2YXJpYWJsZXNcclxuICAgIHZhciB0YWJsZTtcclxuICAgIHZhciBkYXRhdGFibGU7XHJcbiAgICB2YXIgdG9vbGJhckJhc2U7XHJcbiAgICB2YXIgdG9vbGJhclNlbGVjdGVkO1xyXG4gICAgdmFyIHNlbGVjdGVkQ291bnQ7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBpbml0RGF0YXRhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNldCBkYXRlIGRhdGEgb3JkZXJcclxuICAgICAgICBjb25zdCB0YWJsZVJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xyXG5cclxuICAgICAgICB0YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlUm93ID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxEYXRlID0gbW9tZW50KGRhdGVSb3dbNV0uaW5uZXJIVE1MLCBcIkREIE1NTSBZWVlZLCBMVFwiKS5mb3JtYXQoKTsgLy8gc2VsZWN0IGRhdGUgZnJvbSA0dGggY29sdW1uIGluIHRhYmxlXHJcbiAgICAgICAgICAgIGRhdGVSb3dbNV0uc2V0QXR0cmlidXRlKCdkYXRhLW9yZGVyJywgcmVhbERhdGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBJbml0IGRhdGF0YWJsZSAtLS0gbW9yZSBpbmZvIG9uIGRhdGF0YWJsZXM6IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvbWFudWFsL1xyXG4gICAgICAgIGRhdGF0YWJsZSA9ICQodGFibGUpLkRhdGFUYWJsZSh7XHJcbiAgICAgICAgICAgIFwiaW5mb1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgJ29yZGVyJzogW10sXHJcbiAgICAgICAgICAgIFwicGFnZUxlbmd0aFwiOiAxMCxcclxuICAgICAgICAgICAgXCJsZW5ndGhDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICdjb2x1bW5EZWZzJzogW1xyXG4gICAgICAgICAgICAgICAgeyBvcmRlcmFibGU6IGZhbHNlLCB0YXJnZXRzOiAwIH0sIC8vIERpc2FibGUgb3JkZXJpbmcgb24gY29sdW1uIDAgKGNoZWNrYm94KVxyXG4gICAgICAgICAgICAgICAgeyBvcmRlcmFibGU6IGZhbHNlLCB0YXJnZXRzOiA2IH0sIC8vIERpc2FibGUgb3JkZXJpbmcgb24gY29sdW1uIDYgKGFjdGlvbnMpICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlLWluaXQgZnVuY3Rpb25zIG9uIGV2ZXJ5IHRhYmxlIHJlLWRyYXcgLS0gbW9yZSBpbmZvOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9ldmVudC9kcmF3XHJcbiAgICAgICAgZGF0YXRhYmxlLm9uKCdkcmF3JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbml0VG9nZ2xlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICBoYW5kbGVSb3dEZWxldGlvbigpO1xyXG4gICAgICAgICAgICB0b2dnbGVUb29sYmFycygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNlYXJjaCBEYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgIHZhciBoYW5kbGVTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyU2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3Vic2NyaXB0aW9uLXRhYmxlLWZpbHRlcj1cInNlYXJjaFwiXScpO1xyXG4gICAgICAgIGZpbHRlclNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGRhdGF0YWJsZS5zZWFyY2goZS50YXJnZXQudmFsdWUpLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGaWx0ZXIgRGF0YXRhYmxlXHJcbiAgICB2YXIgaGFuZGxlRmlsdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNlbGVjdCBmaWx0ZXIgb3B0aW9uc1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtZmlsdGVyPVwiZm9ybVwiXScpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckJ1dHRvbiA9IGZpbHRlckZvcm0ucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3Vic2NyaXB0aW9uLXRhYmxlLWZpbHRlcj1cImZpbHRlclwiXScpO1xyXG4gICAgICAgIGNvbnN0IHJlc2V0QnV0dG9uID0gZmlsdGVyRm9ybS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtZmlsdGVyPVwicmVzZXRcIl0nKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RPcHRpb25zID0gZmlsdGVyRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKTtcclxuXHJcbiAgICAgICAgLy8gRmlsdGVyIGRhdGF0YWJsZSBvbiBzdWJtaXRcclxuICAgICAgICBmaWx0ZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJTdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCBmaWx0ZXIgdmFsdWVzXHJcbiAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlICYmIGl0ZW0udmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclN0cmluZyArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBCdWlsZCBmaWx0ZXIgdmFsdWUgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclN0cmluZyArPSBpdGVtLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZpbHRlciBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgICAgICAgICAgZGF0YXRhYmxlLnNlYXJjaChmaWx0ZXJTdHJpbmcpLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgZGF0YXRhYmxlXHJcbiAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFJlc2V0IGZpbHRlciBmb3JtXHJcbiAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IFNlbGVjdDIgZHJvcGRvd24gLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL3NlbGVjdDIub3JnL3Byb2dyYW1tYXRpYy1jb250cm9sL2FkZC1zZWxlY3QtY2xlYXItaXRlbXNcclxuICAgICAgICAgICAgICAgICQoaXRlbSkudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZpbHRlciBkYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgICAgICAgICAgZGF0YXRhYmxlLnNlYXJjaCgnJykuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlbGV0ZSBzdWJzY2lycHRpb25cclxuICAgIHZhciBoYW5kbGVSb3dEZWxldGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIGRlbGV0ZSBidXR0b25zXHJcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9ucyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LXN1YnNjcmlwdGlvbnMtdGFibGUtZmlsdGVyPVwiZGVsZXRlX3Jvd1wiXScpO1xyXG5cclxuICAgICAgICBkZWxldGVCdXR0b25zLmZvckVhY2goZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIERlbGV0ZSBidXR0b24gb24gY2xpY2tcclxuICAgICAgICAgICAgZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0IHBhcmVudCByb3dcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IGN1c3RvbWVyIG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbWVyTmFtZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpWzFdLmlubmVyVGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTd2VldEFsZXJ0MiBwb3AgdXAgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIFwiICsgY3VzdG9tZXJOYW1lICsgXCI/XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBkZWxldGUhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgY2FuY2VsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tYWN0aXZlLWxpZ2h0LXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IGhhdmUgZGVsZXRlZCBcIiArIGN1c3RvbWVyTmFtZSArIFwiIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJyZW50IHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKHBhcmVudCkpLnJlbW92ZSgpLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlY3QgY2hlY2tlZCBjaGVja2JveGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVUb29sYmFycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogY3VzdG9tZXJOYW1lICsgXCIgd2FzIG5vdCBkZWxldGVkLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0IHRvZ2dsZSB0b29sYmFyXHJcbiAgICB2YXIgaW5pdFRvZ2dsZVRvb2xiYXIgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gVG9nZ2xlIHNlbGVjdGVkIGFjdGlvbiB0b29sYmFyXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCBjaGVja2JveGVzXHJcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0IGVsZW1lbnRzXHJcbiAgICAgICAgdG9vbGJhckJhc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtdG9vbGJhcj1cImJhc2VcIl0nKTtcclxuICAgICAgICB0b29sYmFyU2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1zdWJzY3JpcHRpb24tdGFibGUtdG9vbGJhcj1cInNlbGVjdGVkXCJdJyk7XHJcbiAgICAgICAgc2VsZWN0ZWRDb3VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXN1YnNjcmlwdGlvbi10YWJsZS1zZWxlY3Q9XCJzZWxlY3RlZF9jb3VudFwiXScpO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZVNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3Vic2NyaXB0aW9uLXRhYmxlLXNlbGVjdD1cImRlbGV0ZV9zZWxlY3RlZFwiXScpO1xyXG5cclxuICAgICAgICAvLyBUb2dnbGUgZGVsZXRlIHNlbGVjdGVkIHRvb2xiYXJcclxuICAgICAgICBjaGVja2JveGVzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgIC8vIENoZWNrYm94IG9uIGNsaWNrIGV2ZW50XHJcbiAgICAgICAgICAgIGMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVUb29sYmFycygpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gRGVsZXRlZCBzZWxlY3RlZCByb3dzXHJcbiAgICAgICAgZGVsZXRlU2VsZWN0ZWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFN3ZWV0QWxlcnQyIHBvcCB1cCAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvL1xyXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHNlbGVjdGVkIGN1c3RvbWVycz9cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgZGVsZXRlIVwiLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgY2FuY2VsXCIsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLWRhbmdlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tYWN0aXZlLWxpZ2h0LXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdSBoYXZlIGRlbGV0ZWQgYWxsIHNlbGVjdGVkIGN1c3RvbWVycyEuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBzZWxlY3RlZCBjdXN0b21lcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hlcy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5yb3coJChjLmNsb3Nlc3QoJ3Rib2R5IHRyJykpKS5yZW1vdmUoKS5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGhlYWRlciBjaGVja2VkIGJveFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJDaGVja2JveCA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0eXBlPVwiY2hlY2tib3hcIl0nKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVUb29sYmFycygpOyAvLyBEZXRlY3QgY2hlY2tlZCBjaGVja2JveGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRUb2dnbGVUb29sYmFyKCk7IC8vIFJlLWluaXQgdG9vbGJhciB0byByZWNhbGN1bGF0ZSBjaGVja2JveGVzXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU2VsZWN0ZWQgY3VzdG9tZXJzIHdhcyBub3QgZGVsZXRlZC5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVG9nZ2xlIHRvb2xiYXJzXHJcbiAgICBjb25zdCB0b2dnbGVUb29sYmFycyA9ICgpID0+IHtcclxuICAgICAgICAvLyBTZWxlY3QgcmVmcmVzaGVkIGNoZWNrYm94IERPTSBlbGVtZW50cyBcclxuICAgICAgICBjb25zdCBhbGxDaGVja2JveGVzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndGJvZHkgW3R5cGU9XCJjaGVja2JveFwiXScpO1xyXG5cclxuICAgICAgICAvLyBEZXRlY3QgY2hlY2tib3hlcyBzdGF0ZSAmIGNvdW50XHJcbiAgICAgICAgbGV0IGNoZWNrZWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBjb3VudCA9IDA7XHJcblxyXG4gICAgICAgIC8vIENvdW50IGNoZWNrZWQgYm94ZXNcclxuICAgICAgICBhbGxDaGVja2JveGVzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrZWRTdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFRvZ2dsZSB0b29sYmFyc1xyXG4gICAgICAgIGlmIChjaGVja2VkU3RhdGUpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRDb3VudC5pbm5lckhUTUwgPSBjb3VudDtcclxuICAgICAgICAgICAgdG9vbGJhckJhc2UuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgIHRvb2xiYXJTZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b29sYmFyQmFzZS5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgdG9vbGJhclNlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIFB1YmxpYyBmdW5jdGlvbnMgIFxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3Rfc3Vic2NyaXB0aW9uc190YWJsZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0RGF0YXRhYmxlKCk7XHJcbiAgICAgICAgICAgIGluaXRUb2dnbGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZVNlYXJjaCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVSb3dEZWxldGlvbigpO1xyXG4gICAgICAgICAgICBoYW5kbGVGaWx0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oKTtcclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgS1RTdWJzY3JpcHRpb25zTGlzdC5pbml0KCk7XHJcbn0pOyJdLCJuYW1lcyI6WyJLVFN1YnNjcmlwdGlvbnNMaXN0IiwidGFibGUiLCJkYXRhdGFibGUiLCJ0b29sYmFyQmFzZSIsInRvb2xiYXJTZWxlY3RlZCIsInNlbGVjdGVkQ291bnQiLCJpbml0RGF0YXRhYmxlIiwidGFibGVSb3dzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJyb3ciLCJkYXRlUm93IiwicmVhbERhdGUiLCJtb21lbnQiLCJpbm5lckhUTUwiLCJmb3JtYXQiLCJzZXRBdHRyaWJ1dGUiLCIkIiwiRGF0YVRhYmxlIiwib3JkZXJhYmxlIiwidGFyZ2V0cyIsIm9uIiwiaW5pdFRvZ2dsZVRvb2xiYXIiLCJoYW5kbGVSb3dEZWxldGlvbiIsInRvZ2dsZVRvb2xiYXJzIiwiaGFuZGxlU2VhcmNoIiwiZmlsdGVyU2VhcmNoIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzZWFyY2giLCJ0YXJnZXQiLCJ2YWx1ZSIsImRyYXciLCJoYW5kbGVGaWx0ZXIiLCJmaWx0ZXJGb3JtIiwiZmlsdGVyQnV0dG9uIiwicmVzZXRCdXR0b24iLCJzZWxlY3RPcHRpb25zIiwiZmlsdGVyU3RyaW5nIiwiaXRlbSIsImluZGV4IiwidmFsIiwidHJpZ2dlciIsImRlbGV0ZUJ1dHRvbnMiLCJkIiwicHJldmVudERlZmF1bHQiLCJwYXJlbnQiLCJjbG9zZXN0IiwiY3VzdG9tZXJOYW1lIiwiaW5uZXJUZXh0IiwiU3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsInNob3dDYW5jZWxCdXR0b24iLCJidXR0b25zU3R5bGluZyIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsImN1c3RvbUNsYXNzIiwiY29uZmlybUJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsInRoZW4iLCJyZXN1bHQiLCJyZW1vdmUiLCJkaXNtaXNzIiwiY2hlY2tib3hlcyIsImRlbGV0ZVNlbGVjdGVkIiwiYyIsInNldFRpbWVvdXQiLCJjaGVja2VkIiwiaGVhZGVyQ2hlY2tib3giLCJhbGxDaGVja2JveGVzIiwiY2hlY2tlZFN0YXRlIiwiY291bnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbml0IiwiZ2V0RWxlbWVudEJ5SWQiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/list/list.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js ***!
  \**************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/subscriptions/list/list.js\":\n    /*!*************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/subscriptions/list/list.js ***!\r\n      \\*************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsSubscriptionsListListJs() {\n      eval(\"\\n\\nvar KTSubscriptionsList = function () {\\n  // Define shared variables\\n  var table;\\n  var datatable;\\n  var toolbarBase;\\n  var toolbarSelected;\\n  var selectedCount; // Private functions\\n\\n  var initDatatable = function initDatatable() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[5].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 4th column in table\\n\\n      dateRow[5].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 0\\n      }, // Disable ordering on column 0 (checkbox)\\n      {\\n        orderable: false,\\n        targets: 6\\n      } // Disable ordering on column 6 (actions)                \\n      ]\\n    }); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\\n\\n    datatable.on('draw', function () {\\n      initToggleToolbar();\\n      handleRowDeletion();\\n      toggleToolbars();\\n    });\\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n\\n  var handleSearch = function handleSearch() {\\n    var filterSearch = document.querySelector('[data-kt-subscription-table-filter=\\\"search\\\"]');\\n    filterSearch.addEventListener('keyup', function (e) {\\n      datatable.search(e.target.value).draw();\\n    });\\n  }; // Filter Datatable\\n\\n\\n  var handleFilter = function handleFilter() {\\n    // Select filter options\\n    var filterForm = document.querySelector('[data-kt-subscription-table-filter=\\\"form\\\"]');\\n    var filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\\\"filter\\\"]');\\n    var resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\\\"reset\\\"]');\\n    var selectOptions = filterForm.querySelectorAll('select'); // Filter datatable on submit\\n\\n    filterButton.addEventListener('click', function () {\\n      var filterString = ''; // Get filter values\\n\\n      selectOptions.forEach(function (item, index) {\\n        if (item.value && item.value !== '') {\\n          if (index !== 0) {\\n            filterString += ' ';\\n          } // Build filter value options\\n\\n\\n          filterString += item.value;\\n        }\\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n      datatable.search(filterString).draw();\\n    }); // Reset datatable\\n\\n    resetButton.addEventListener('click', function () {\\n      // Reset filter form\\n      selectOptions.forEach(function (item, index) {\\n        // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\\n        $(item).val(null).trigger('change');\\n      }); // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n      datatable.search('').draw();\\n    });\\n  }; // Delete subscirption\\n\\n\\n  var handleRowDeletion = function handleRowDeletion() {\\n    // Select all delete buttons\\n    var deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\\\"delete_row\\\"]');\\n    deleteButtons.forEach(function (d) {\\n      // Delete button on click\\n      d.addEventListener('click', function (e) {\\n        e.preventDefault(); // Select parent row\\n\\n        var parent = e.target.closest('tr'); // Get customer name\\n\\n        var customerName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n        Swal.fire({\\n          text: \\\"Are you sure you want to delete \\\" + customerName + \\\"?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete!\\\",\\n          cancelButtonText: \\\"No, cancel\\\",\\n          customClass: {\\n            confirmButton: \\\"btn fw-bold btn-danger\\\",\\n            cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            Swal.fire({\\n              text: \\\"You have deleted \\\" + customerName + \\\"!.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            }).then(function () {\\n              // Remove current row\\n              datatable.row($(parent)).remove().draw();\\n            }).then(function () {\\n              // Detect checked checkboxes\\n              toggleToolbars();\\n            });\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: customerName + \\\" was not deleted.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }; // Init toggle toolbar\\n\\n\\n  var initToggleToolbar = function initToggleToolbar() {\\n    // Toggle selected action toolbar\\n    // Select all checkboxes\\n    var checkboxes = table.querySelectorAll('[type=\\\"checkbox\\\"]'); // Select elements\\n\\n    toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\\\"base\\\"]');\\n    toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\\\"selected\\\"]');\\n    selectedCount = document.querySelector('[data-kt-subscription-table-select=\\\"selected_count\\\"]');\\n    var deleteSelected = document.querySelector('[data-kt-subscription-table-select=\\\"delete_selected\\\"]'); // Toggle delete selected toolbar\\n\\n    checkboxes.forEach(function (c) {\\n      // Checkbox on click event\\n      c.addEventListener('click', function () {\\n        setTimeout(function () {\\n          toggleToolbars();\\n        }, 50);\\n      });\\n    }); // Deleted selected rows\\n\\n    deleteSelected.addEventListener('click', function () {\\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n      Swal.fire({\\n        text: \\\"Are you sure you want to delete selected customers?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete!\\\",\\n        cancelButtonText: \\\"No, cancel\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\",\\n          cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          Swal.fire({\\n            text: \\\"You have deleted all selected customers!.\\\",\\n            icon: \\\"success\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          }).then(function () {\\n            // Remove all selected customers\\n            checkboxes.forEach(function (c) {\\n              if (c.checked) {\\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\\n              }\\n            }); // Remove header checked box\\n\\n            var headerCheckbox = table.querySelectorAll('[type=\\\"checkbox\\\"]')[0];\\n            headerCheckbox.checked = false;\\n          }).then(function () {\\n            toggleToolbars(); // Detect checked checkboxes\\n\\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\\n          });\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Selected customers was not deleted.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Toggle toolbars\\n\\n\\n  var toggleToolbars = function toggleToolbars() {\\n    // Select refreshed checkbox DOM elements \\n    var allCheckboxes = table.querySelectorAll('tbody [type=\\\"checkbox\\\"]'); // Detect checkboxes state & count\\n\\n    var checkedState = false;\\n    var count = 0; // Count checked boxes\\n\\n    allCheckboxes.forEach(function (c) {\\n      if (c.checked) {\\n        checkedState = true;\\n        count++;\\n      }\\n    }); // Toggle toolbars\\n\\n    if (checkedState) {\\n      selectedCount.innerHTML = count;\\n      toolbarBase.classList.add('d-none');\\n      toolbarSelected.classList.remove('d-none');\\n    } else {\\n      toolbarBase.classList.remove('d-none');\\n      toolbarSelected.classList.add('d-none');\\n    }\\n  };\\n\\n  return {\\n    // Public functions  \\n    init: function init() {\\n      table = document.getElementById('kt_subscriptions_table');\\n\\n      if (!table) {\\n        return;\\n      }\\n\\n      initDatatable();\\n      initToggleToolbar();\\n      handleSearch();\\n      handleRowDeletion();\\n      handleFilter();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTSubscriptionsList.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/list/list.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/subscriptions/list/list.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/subscriptions/list/list.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/subscriptions/list/list.js"]();
/******/ 	
/******/ })()
;