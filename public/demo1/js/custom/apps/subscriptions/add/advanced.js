/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js ***!
  \****************************************************************************/
/***/ (() => {

"use strict";
eval("\n\nvar KTSubscriptionsAdvanced = function () {\n  // Shared variables\n  var table;\n  var datatable;\n\n  var initCustomFieldsDatatable = function initCustomFieldsDatatable() {\n    // Define variables\n    var addButton = document.getElementById('kt_create_new_custom_fields_add'); // Duplicate input fields\n\n    var fieldName = table.querySelector('tbody tr td:first-child').innerHTML;\n    var fieldValue = table.querySelector('tbody tr td:nth-child(2)').innerHTML;\n    var deleteButton = table.querySelector('tbody tr td:last-child').innerHTML; // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      'ordering': false,\n      'paging': false,\n      \"lengthChange\": false\n    }); // Define datatable row node\n\n    var rowNode; // Handle add button\n\n    addButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      rowNode = datatable.row.add([fieldName, fieldValue, deleteButton]).draw().node(); // Add custom class to last column -- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n\n      $(rowNode).find('td').eq(2).addClass('text-end'); // Re-calculate index\n\n      initCustomFieldRowIndex();\n    });\n  }; // Handle row index count\n\n\n  var initCustomFieldRowIndex = function initCustomFieldRowIndex() {\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (tr, index) {\n      // add index number to input names & id\n      var fieldNameInput = tr.querySelector('td:first-child input');\n      var fieldValueInput = tr.querySelector('td:nth-child(2) input');\n      var fieldNameLabel = fieldNameInput.getAttribute('id');\n      var fieldValueLabel = fieldValueInput.getAttribute('id');\n      fieldNameInput.setAttribute('name', fieldNameLabel + '-' + index);\n      fieldValueInput.setAttribute('name', fieldValueLabel + '-' + index);\n    });\n  }; // Delete product\n\n\n  var deleteCustomField = function deleteCustomField() {\n    KTUtil.on(table, '[data-kt-action=\"field_remove\"]', 'click', function (e) {\n      e.preventDefault(); // Select parent row\n\n      var parent = e.target.closest('tr'); // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n      Swal.fire({\n        text: \"Are you sure you want to delete this field ?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted it!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove current row\n            datatable.row($(parent)).remove().draw();\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"It was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  return {\n    init: function init() {\n      table = document.getElementById('kt_create_new_custom_fields');\n      initCustomFieldsDatatable();\n      initCustomFieldRowIndex();\n      deleteCustomField();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTSubscriptionsAdvanced.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/subscriptions/add/advanced.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/subscriptions/add/advanced.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js\":\n    /*!****************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js ***!\r\n      \\****************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsSubscriptionsAddAdvancedJs() {\n      eval(\"\\n\\nvar KTSubscriptionsAdvanced = function () {\\n  // Shared variables\\n  var table;\\n  var datatable;\\n\\n  var initCustomFieldsDatatable = function initCustomFieldsDatatable() {\\n    // Define variables\\n    var addButton = document.getElementById('kt_create_new_custom_fields_add'); // Duplicate input fields\\n\\n    var fieldName = table.querySelector('tbody tr td:first-child').innerHTML;\\n    var fieldValue = table.querySelector('tbody tr td:nth-child(2)').innerHTML;\\n    var deleteButton = table.querySelector('tbody tr td:last-child').innerHTML; // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      'ordering': false,\\n      'paging': false,\\n      \\\"lengthChange\\\": false\\n    }); // Define datatable row node\\n\\n    var rowNode; // Handle add button\\n\\n    addButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      rowNode = datatable.row.add([fieldName, fieldValue, deleteButton]).draw().node(); // Add custom class to last column -- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\\n\\n      $(rowNode).find('td').eq(2).addClass('text-end'); // Re-calculate index\\n\\n      initCustomFieldRowIndex();\\n    });\\n  }; // Handle row index count\\n\\n\\n  var initCustomFieldRowIndex = function initCustomFieldRowIndex() {\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (tr, index) {\\n      // add index number to input names & id\\n      var fieldNameInput = tr.querySelector('td:first-child input');\\n      var fieldValueInput = tr.querySelector('td:nth-child(2) input');\\n      var fieldNameLabel = fieldNameInput.getAttribute('id');\\n      var fieldValueLabel = fieldValueInput.getAttribute('id');\\n      fieldNameInput.setAttribute('name', fieldNameLabel + '-' + index);\\n      fieldValueInput.setAttribute('name', fieldValueLabel + '-' + index);\\n    });\\n  }; // Delete product\\n\\n\\n  var deleteCustomField = function deleteCustomField() {\\n    KTUtil.on(table, '[data-kt-action=\\\"field_remove\\\"]', 'click', function (e) {\\n      e.preventDefault(); // Select parent row\\n\\n      var parent = e.target.closest('tr'); // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n      Swal.fire({\\n        text: \\\"Are you sure you want to delete this field ?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete!\\\",\\n        cancelButtonText: \\\"No, cancel\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\",\\n          cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          Swal.fire({\\n            text: \\\"You have deleted it!.\\\",\\n            icon: \\\"success\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          }).then(function () {\\n            // Remove current row\\n            datatable.row($(parent)).remove().draw();\\n          });\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"It was not deleted.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    init: function init() {\\n      table = document.getElementById('kt_create_new_custom_fields');\\n      initCustomFieldsDatatable();\\n      initCustomFieldRowIndex();\\n      deleteCustomField();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTSubscriptionsAdvanced.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/subscriptions/add/advanced.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/subscriptions/add/advanced.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/subscriptions/add/advanced.js"]();
/******/ 	
/******/ })()
;