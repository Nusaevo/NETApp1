/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js ***!
  \************************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTCustomersExport = function () {\n  var element;\n  var submitButton;\n  var cancelButton;\n  var closeButton;\n  var validator;\n  var form;\n  var modal; // Init form inputs\n\n  var handleForm = function handleForm() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'date': {\n          validators: {\n            notEmpty: {\n              message: 'Date range is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Action buttons\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n              Swal.fire({\n                text: \"Customer list has been successfully exported!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false;\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  var initForm = function initForm() {\n    var datepicker = form.querySelector(\"[name=date]\"); // Handle datepicker range -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n\n    $(datepicker).flatpickr({\n      altInput: true,\n      altFormat: \"F j, Y\",\n      dateFormat: \"Y-m-d\",\n      mode: \"range\"\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_customers_export_modal');\n      modal = new bootstrap.Modal(element);\n      form = document.querySelector('#kt_customers_export_form');\n      submitButton = form.querySelector('#kt_customers_export_submit');\n      cancelButton = form.querySelector('#kt_customers_export_cancel');\n      closeButton = element.querySelector('#kt_customers_export_close');\n      handleForm();\n      initForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTCustomersExport.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/ecommerce/customers/listing/export.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/ecommerce/customers/listing/export.js ***!
  \*************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js\":\n    /*!************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js ***!\r\n      \\************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsEcommerceCustomersListingExportJs() {\n      eval(\" // Class definition\\n\\nvar KTCustomersExport = function () {\\n  var element;\\n  var submitButton;\\n  var cancelButton;\\n  var closeButton;\\n  var validator;\\n  var form;\\n  var modal; // Init form inputs\\n\\n  var handleForm = function handleForm() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'date': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Date range is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Action buttons\\n\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\\n\\n            submitButton.disabled = true;\\n            setTimeout(function () {\\n              submitButton.removeAttribute('data-kt-indicator');\\n              Swal.fire({\\n                text: \\\"Customer list has been successfully exported!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide(); // Enable submit button after loading\\n\\n                  submitButton.disabled = false;\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n    closeButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  var initForm = function initForm() {\\n    var datepicker = form.querySelector(\\\"[name=date]\\\"); // Handle datepicker range -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\\n\\n    $(datepicker).flatpickr({\\n      altInput: true,\\n      altFormat: \\\"F j, Y\\\",\\n      dateFormat: \\\"Y-m-d\\\",\\n      mode: \\\"range\\\"\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      // Elements\\n      element = document.querySelector('#kt_customers_export_modal');\\n      modal = new bootstrap.Modal(element);\\n      form = document.querySelector('#kt_customers_export_form');\\n      submitButton = form.querySelector('#kt_customers_export_submit');\\n      cancelButton = form.querySelector('#kt_customers_export_cancel');\\n      closeButton = element.querySelector('#kt_customers_export_close');\\n      handleForm();\\n      initForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCustomersExport.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/ecommerce/customers/listing/export.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/ecommerce/customers/listing/export.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/ecommerce/customers/listing/export.js"]();
/******/ 	
/******/ })()
;