/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js ***!
  \*************************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTAppEcommerceReportShipping = function () {\n  // Shared variables\n  var table;\n  var datatable; // Private functions\n\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[0].innerHTML, \"MMM DD, YYYY\").format(); // select date from 4th column in table\n\n      dateRow[0].setAttribute('data-order', realDate);\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      'pageLength': 10\n    });\n  }; // Init daterangepicker\n\n\n  var initDaterangepicker = function initDaterangepicker() {\n    var start = moment().subtract(29, \"days\");\n    var end = moment();\n    var input = $(\"#kt_ecommerce_report_shipping_daterangepicker\");\n\n    function cb(start, end) {\n      input.html(start.format(\"MMMM D, YYYY\") + \" - \" + end.format(\"MMMM D, YYYY\"));\n    }\n\n    input.daterangepicker({\n      startDate: start,\n      endDate: end,\n      ranges: {\n        \"Today\": [moment(), moment()],\n        \"Yesterday\": [moment().subtract(1, \"days\"), moment().subtract(1, \"days\")],\n        \"Last 7 Days\": [moment().subtract(6, \"days\"), moment()],\n        \"Last 30 Days\": [moment().subtract(29, \"days\"), moment()],\n        \"This Month\": [moment().startOf(\"month\"), moment().endOf(\"month\")],\n        \"Last Month\": [moment().subtract(1, \"month\").startOf(\"month\"), moment().subtract(1, \"month\").endOf(\"month\")]\n      }\n    }, cb);\n    cb(start, end);\n  }; // Handle status filter dropdown\n\n\n  var handleStatusFilter = function handleStatusFilter() {\n    var filterStatus = document.querySelector('[data-kt-ecommerce-order-filter=\"status\"]');\n    $(filterStatus).on('change', function (e) {\n      var value = e.target.value;\n\n      if (value === 'all') {\n        value = '';\n      }\n\n      datatable.column(3).search(value).draw();\n    });\n  }; // Hook export buttons\n\n\n  var exportButtons = function exportButtons() {\n    var documentTitle = 'Shipping Report';\n    var buttons = new $.fn.dataTable.Buttons(table, {\n      buttons: [{\n        extend: 'copyHtml5',\n        title: documentTitle\n      }, {\n        extend: 'excelHtml5',\n        title: documentTitle\n      }, {\n        extend: 'csvHtml5',\n        title: documentTitle\n      }, {\n        extend: 'pdfHtml5',\n        title: documentTitle\n      }]\n    }).container().appendTo($('#kt_ecommerce_report_shipping_export')); // Hook dropdown menu click event to datatable export buttons\n\n    var exportButtons = document.querySelectorAll('#kt_ecommerce_report_shipping_export_menu [data-kt-ecommerce-export]');\n    exportButtons.forEach(function (exportButton) {\n      exportButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Get clicked export value\n\n        var exportValue = e.target.getAttribute('data-kt-ecommerce-export');\n        var target = document.querySelector('.dt-buttons .buttons-' + exportValue); // Trigger click event on hidden datatable export buttons\n\n        target.click();\n      });\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-ecommerce-order-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      table = document.querySelector('#kt_ecommerce_report_shipping_table');\n\n      if (!table) {\n        return;\n      }\n\n      initDatatable();\n      initDaterangepicker();\n      exportButtons();\n      handleSearchDatatable();\n      handleStatusFilter();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppEcommerceReportShipping.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/ecommerce/reports/shipping/shipping.js":
/*!**************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/ecommerce/reports/shipping/shipping.js ***!
  \**************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js\":\n    /*!*************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js ***!\r\n      \\*************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsEcommerceReportsShippingShippingJs() {\n      eval(\" // Class definition\\n\\nvar KTAppEcommerceReportShipping = function () {\\n  // Shared variables\\n  var table;\\n  var datatable; // Private functions\\n\\n  var initDatatable = function initDatatable() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[0].innerHTML, \\\"MMM DD, YYYY\\\").format(); // select date from 4th column in table\\n\\n      dateRow[0].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      'pageLength': 10\\n    });\\n  }; // Init daterangepicker\\n\\n\\n  var initDaterangepicker = function initDaterangepicker() {\\n    var start = moment().subtract(29, \\\"days\\\");\\n    var end = moment();\\n    var input = $(\\\"#kt_ecommerce_report_shipping_daterangepicker\\\");\\n\\n    function cb(start, end) {\\n      input.html(start.format(\\\"MMMM D, YYYY\\\") + \\\" - \\\" + end.format(\\\"MMMM D, YYYY\\\"));\\n    }\\n\\n    input.daterangepicker({\\n      startDate: start,\\n      endDate: end,\\n      ranges: {\\n        \\\"Today\\\": [moment(), moment()],\\n        \\\"Yesterday\\\": [moment().subtract(1, \\\"days\\\"), moment().subtract(1, \\\"days\\\")],\\n        \\\"Last 7 Days\\\": [moment().subtract(6, \\\"days\\\"), moment()],\\n        \\\"Last 30 Days\\\": [moment().subtract(29, \\\"days\\\"), moment()],\\n        \\\"This Month\\\": [moment().startOf(\\\"month\\\"), moment().endOf(\\\"month\\\")],\\n        \\\"Last Month\\\": [moment().subtract(1, \\\"month\\\").startOf(\\\"month\\\"), moment().subtract(1, \\\"month\\\").endOf(\\\"month\\\")]\\n      }\\n    }, cb);\\n    cb(start, end);\\n  }; // Handle status filter dropdown\\n\\n\\n  var handleStatusFilter = function handleStatusFilter() {\\n    var filterStatus = document.querySelector('[data-kt-ecommerce-order-filter=\\\"status\\\"]');\\n    $(filterStatus).on('change', function (e) {\\n      var value = e.target.value;\\n\\n      if (value === 'all') {\\n        value = '';\\n      }\\n\\n      datatable.column(3).search(value).draw();\\n    });\\n  }; // Hook export buttons\\n\\n\\n  var exportButtons = function exportButtons() {\\n    var documentTitle = 'Shipping Report';\\n    var buttons = new $.fn.dataTable.Buttons(table, {\\n      buttons: [{\\n        extend: 'copyHtml5',\\n        title: documentTitle\\n      }, {\\n        extend: 'excelHtml5',\\n        title: documentTitle\\n      }, {\\n        extend: 'csvHtml5',\\n        title: documentTitle\\n      }, {\\n        extend: 'pdfHtml5',\\n        title: documentTitle\\n      }]\\n    }).container().appendTo($('#kt_ecommerce_report_shipping_export')); // Hook dropdown menu click event to datatable export buttons\\n\\n    var exportButtons = document.querySelectorAll('#kt_ecommerce_report_shipping_export_menu [data-kt-ecommerce-export]');\\n    exportButtons.forEach(function (exportButton) {\\n      exportButton.addEventListener('click', function (e) {\\n        e.preventDefault(); // Get clicked export value\\n\\n        var exportValue = e.target.getAttribute('data-kt-ecommerce-export');\\n        var target = document.querySelector('.dt-buttons .buttons-' + exportValue); // Trigger click event on hidden datatable export buttons\\n\\n        target.click();\\n      });\\n    });\\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n\\n  var handleSearchDatatable = function handleSearchDatatable() {\\n    var filterSearch = document.querySelector('[data-kt-ecommerce-order-filter=\\\"search\\\"]');\\n    filterSearch.addEventListener('keyup', function (e) {\\n      datatable.search(e.target.value).draw();\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      table = document.querySelector('#kt_ecommerce_report_shipping_table');\\n\\n      if (!table) {\\n        return;\\n      }\\n\\n      initDatatable();\\n      initDaterangepicker();\\n      exportButtons();\\n      handleSearchDatatable();\\n      handleStatusFilter();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAppEcommerceReportShipping.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/ecommerce/reports/shipping/shipping.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/ecommerce/reports/shipping/shipping.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/ecommerce/reports/shipping/shipping.js"]();
/******/ 	
/******/ })()
;