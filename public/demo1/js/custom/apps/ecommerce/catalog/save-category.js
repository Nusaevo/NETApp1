/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js ***!
  \*********************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTAppEcommerceSaveCategory = function () {\n  // Private functions\n  // Init quill editor\n  var initQuill = function initQuill() {\n    // Define all elements for quill editor\n    var elements = ['#kt_ecommerce_add_category_description', '#kt_ecommerce_add_category_meta_description']; // Loop all elements\n\n    elements.forEach(function (element) {\n      // Get quill element\n      var quill = document.querySelector(element); // Break if element not found\n\n      if (!quill) {\n        return;\n      } // Init quill --- more info: https://quilljs.com/docs/quickstart/\n\n\n      quill = new Quill(element, {\n        modules: {\n          toolbar: [[{\n            header: [1, 2, false]\n          }], ['bold', 'italic', 'underline'], ['image', 'code-block']]\n        },\n        placeholder: 'Type your text here...',\n        theme: 'snow' // or 'bubble'\n\n      });\n    });\n  }; // Init tagify\n\n\n  var initTagify = function initTagify() {\n    // Define all elements for tagify\n    var elements = ['#kt_ecommerce_add_category_meta_keywords']; // Loop all elements\n\n    elements.forEach(function (element) {\n      // Get tagify element\n      var tagify = document.querySelector(element); // Break if element not found\n\n      if (!tagify) {\n        return;\n      } // Init tagify --- more info: https://yaireo.github.io/tagify/\n\n\n      new Tagify(tagify);\n    });\n  }; // Init form repeater --- more info: https://github.com/DubFriend/jquery.repeater\n\n\n  var initFormRepeater = function initFormRepeater() {\n    $('#kt_ecommerce_add_category_conditions').repeater({\n      initEmpty: false,\n      defaultValues: {\n        'text-input': 'foo'\n      },\n      show: function show() {\n        $(this).slideDown(); // Init select2 on new repeated items\n\n        initConditionsSelect2();\n      },\n      hide: function hide(deleteElement) {\n        $(this).slideUp(deleteElement);\n      }\n    });\n  }; // Init condition select2\n\n\n  var initConditionsSelect2 = function initConditionsSelect2() {\n    // Tnit new repeating condition types\n    var allConditionTypes = document.querySelectorAll('[data-kt-ecommerce-catalog-add-category=\"condition_type\"]');\n    allConditionTypes.forEach(function (type) {\n      if ($(type).hasClass(\"select2-hidden-accessible\")) {\n        return;\n      } else {\n        $(type).select2({\n          minimumResultsForSearch: -1\n        });\n      }\n    }); // Tnit new repeating condition equals\n\n    var allConditionEquals = document.querySelectorAll('[data-kt-ecommerce-catalog-add-category=\"condition_equals\"]');\n    allConditionEquals.forEach(function (equal) {\n      if ($(equal).hasClass(\"select2-hidden-accessible\")) {\n        return;\n      } else {\n        $(equal).select2({\n          minimumResultsForSearch: -1\n        });\n      }\n    });\n  }; // Category status handler\n\n\n  var handleStatus = function handleStatus() {\n    var target = document.getElementById('kt_ecommerce_add_category_status');\n    var select = document.getElementById('kt_ecommerce_add_category_status_select');\n    var statusClasses = ['bg-success', 'bg-warning', 'bg-danger'];\n    $(select).on('change', function (e) {\n      var value = e.target.value;\n\n      switch (value) {\n        case \"published\":\n          {\n            var _target$classList;\n\n            (_target$classList = target.classList).remove.apply(_target$classList, statusClasses);\n\n            target.classList.add('bg-success');\n            hideDatepicker();\n            break;\n          }\n\n        case \"scheduled\":\n          {\n            var _target$classList2;\n\n            (_target$classList2 = target.classList).remove.apply(_target$classList2, statusClasses);\n\n            target.classList.add('bg-warning');\n            showDatepicker();\n            break;\n          }\n\n        case \"unpublished\":\n          {\n            var _target$classList3;\n\n            (_target$classList3 = target.classList).remove.apply(_target$classList3, statusClasses);\n\n            target.classList.add('bg-danger');\n            hideDatepicker();\n            break;\n          }\n\n        default:\n          break;\n      }\n    }); // Handle datepicker\n\n    var datepicker = document.getElementById('kt_ecommerce_add_category_status_datepicker'); // Init flatpickr --- more info: https://flatpickr.js.org/\n\n    $('#kt_ecommerce_add_category_status_datepicker').flatpickr({\n      enableTime: true,\n      dateFormat: \"Y-m-d H:i\"\n    });\n\n    var showDatepicker = function showDatepicker() {\n      datepicker.parentNode.classList.remove('d-none');\n    };\n\n    var hideDatepicker = function hideDatepicker() {\n      datepicker.parentNode.classList.add('d-none');\n    };\n  }; // Condition type handler\n\n\n  var handleConditions = function handleConditions() {\n    var allConditions = document.querySelectorAll('[name=\"method\"][type=\"radio\"]');\n    var conditionMatch = document.querySelector('[data-kt-ecommerce-catalog-add-category=\"auto-options\"]');\n    allConditions.forEach(function (radio) {\n      radio.addEventListener('change', function (e) {\n        if (e.target.value === '1') {\n          conditionMatch.classList.remove('d-none');\n        } else {\n          conditionMatch.classList.add('d-none');\n        }\n      });\n    });\n  }; // Submit form handler\n\n\n  var handleSubmit = function handleSubmit() {\n    // Define variables\n    var validator; // Get elements\n\n    var form = document.getElementById('kt_ecommerce_add_category_form');\n    var submitButton = document.getElementById('kt_ecommerce_add_category_submit'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'category_name': {\n          validators: {\n            notEmpty: {\n              message: 'Category name is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Handle submit button\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  // Enable submit button after loading\n                  submitButton.disabled = false; // Redirect to customers list page\n\n                  window.location = form.getAttribute(\"data-kt-redirect\");\n                }\n              });\n            }, 2000);\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // Init forms\n      initQuill();\n      initTagify();\n      initFormRepeater();\n      initConditionsSelect2(); // Handle forms\n\n      handleStatus();\n      handleConditions();\n      handleSubmit();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppEcommerceSaveCategory.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/ecommerce/catalog/save-category.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/ecommerce/catalog/save-category.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js\":\n    /*!*********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js ***!\r\n      \\*********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsEcommerceCatalogSaveCategoryJs() {\n      eval(\" // Class definition\\n\\nvar KTAppEcommerceSaveCategory = function () {\\n  // Private functions\\n  // Init quill editor\\n  var initQuill = function initQuill() {\\n    // Define all elements for quill editor\\n    var elements = ['#kt_ecommerce_add_category_description', '#kt_ecommerce_add_category_meta_description']; // Loop all elements\\n\\n    elements.forEach(function (element) {\\n      // Get quill element\\n      var quill = document.querySelector(element); // Break if element not found\\n\\n      if (!quill) {\\n        return;\\n      } // Init quill --- more info: https://quilljs.com/docs/quickstart/\\n\\n\\n      quill = new Quill(element, {\\n        modules: {\\n          toolbar: [[{\\n            header: [1, 2, false]\\n          }], ['bold', 'italic', 'underline'], ['image', 'code-block']]\\n        },\\n        placeholder: 'Type your text here...',\\n        theme: 'snow' // or 'bubble'\\n\\n      });\\n    });\\n  }; // Init tagify\\n\\n\\n  var initTagify = function initTagify() {\\n    // Define all elements for tagify\\n    var elements = ['#kt_ecommerce_add_category_meta_keywords']; // Loop all elements\\n\\n    elements.forEach(function (element) {\\n      // Get tagify element\\n      var tagify = document.querySelector(element); // Break if element not found\\n\\n      if (!tagify) {\\n        return;\\n      } // Init tagify --- more info: https://yaireo.github.io/tagify/\\n\\n\\n      new Tagify(tagify);\\n    });\\n  }; // Init form repeater --- more info: https://github.com/DubFriend/jquery.repeater\\n\\n\\n  var initFormRepeater = function initFormRepeater() {\\n    $('#kt_ecommerce_add_category_conditions').repeater({\\n      initEmpty: false,\\n      defaultValues: {\\n        'text-input': 'foo'\\n      },\\n      show: function show() {\\n        $(this).slideDown(); // Init select2 on new repeated items\\n\\n        initConditionsSelect2();\\n      },\\n      hide: function hide(deleteElement) {\\n        $(this).slideUp(deleteElement);\\n      }\\n    });\\n  }; // Init condition select2\\n\\n\\n  var initConditionsSelect2 = function initConditionsSelect2() {\\n    // Tnit new repeating condition types\\n    var allConditionTypes = document.querySelectorAll('[data-kt-ecommerce-catalog-add-category=\\\"condition_type\\\"]');\\n    allConditionTypes.forEach(function (type) {\\n      if ($(type).hasClass(\\\"select2-hidden-accessible\\\")) {\\n        return;\\n      } else {\\n        $(type).select2({\\n          minimumResultsForSearch: -1\\n        });\\n      }\\n    }); // Tnit new repeating condition equals\\n\\n    var allConditionEquals = document.querySelectorAll('[data-kt-ecommerce-catalog-add-category=\\\"condition_equals\\\"]');\\n    allConditionEquals.forEach(function (equal) {\\n      if ($(equal).hasClass(\\\"select2-hidden-accessible\\\")) {\\n        return;\\n      } else {\\n        $(equal).select2({\\n          minimumResultsForSearch: -1\\n        });\\n      }\\n    });\\n  }; // Category status handler\\n\\n\\n  var handleStatus = function handleStatus() {\\n    var target = document.getElementById('kt_ecommerce_add_category_status');\\n    var select = document.getElementById('kt_ecommerce_add_category_status_select');\\n    var statusClasses = ['bg-success', 'bg-warning', 'bg-danger'];\\n    $(select).on('change', function (e) {\\n      var value = e.target.value;\\n\\n      switch (value) {\\n        case \\\"published\\\":\\n          {\\n            var _target$classList;\\n\\n            (_target$classList = target.classList).remove.apply(_target$classList, statusClasses);\\n\\n            target.classList.add('bg-success');\\n            hideDatepicker();\\n            break;\\n          }\\n\\n        case \\\"scheduled\\\":\\n          {\\n            var _target$classList2;\\n\\n            (_target$classList2 = target.classList).remove.apply(_target$classList2, statusClasses);\\n\\n            target.classList.add('bg-warning');\\n            showDatepicker();\\n            break;\\n          }\\n\\n        case \\\"unpublished\\\":\\n          {\\n            var _target$classList3;\\n\\n            (_target$classList3 = target.classList).remove.apply(_target$classList3, statusClasses);\\n\\n            target.classList.add('bg-danger');\\n            hideDatepicker();\\n            break;\\n          }\\n\\n        default:\\n          break;\\n      }\\n    }); // Handle datepicker\\n\\n    var datepicker = document.getElementById('kt_ecommerce_add_category_status_datepicker'); // Init flatpickr --- more info: https://flatpickr.js.org/\\n\\n    $('#kt_ecommerce_add_category_status_datepicker').flatpickr({\\n      enableTime: true,\\n      dateFormat: \\\"Y-m-d H:i\\\"\\n    });\\n\\n    var showDatepicker = function showDatepicker() {\\n      datepicker.parentNode.classList.remove('d-none');\\n    };\\n\\n    var hideDatepicker = function hideDatepicker() {\\n      datepicker.parentNode.classList.add('d-none');\\n    };\\n  }; // Condition type handler\\n\\n\\n  var handleConditions = function handleConditions() {\\n    var allConditions = document.querySelectorAll('[name=\\\"method\\\"][type=\\\"radio\\\"]');\\n    var conditionMatch = document.querySelector('[data-kt-ecommerce-catalog-add-category=\\\"auto-options\\\"]');\\n    allConditions.forEach(function (radio) {\\n      radio.addEventListener('change', function (e) {\\n        if (e.target.value === '1') {\\n          conditionMatch.classList.remove('d-none');\\n        } else {\\n          conditionMatch.classList.add('d-none');\\n        }\\n      });\\n    });\\n  }; // Submit form handler\\n\\n\\n  var handleSubmit = function handleSubmit() {\\n    // Define variables\\n    var validator; // Get elements\\n\\n    var form = document.getElementById('kt_ecommerce_add_category_form');\\n    var submitButton = document.getElementById('kt_ecommerce_add_category_submit'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'category_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Category name is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Handle submit button\\n\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\\n\\n            submitButton.disabled = true;\\n            setTimeout(function () {\\n              submitButton.removeAttribute('data-kt-indicator');\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  // Enable submit button after loading\\n                  submitButton.disabled = false; // Redirect to customers list page\\n\\n                  window.location = form.getAttribute(\\\"data-kt-redirect\\\");\\n                }\\n              });\\n            }, 2000);\\n          } else {\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      // Init forms\\n      initQuill();\\n      initTagify();\\n      initFormRepeater();\\n      initConditionsSelect2(); // Handle forms\\n\\n      handleStatus();\\n      handleConditions();\\n      handleSubmit();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAppEcommerceSaveCategory.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/ecommerce/catalog/save-category.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/ecommerce/catalog/save-category.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/ecommerce/catalog/save-category.js"]();
/******/ 	
/******/ })()
;