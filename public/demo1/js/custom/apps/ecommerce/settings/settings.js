/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js ***!
  \*****************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTAppEcommerceSettings = function () {\n  // Shared variables\n\n  // Private functions\n  var initForms = function initForms() {\n    var forms = ['kt_ecommerce_settings_general_form', 'kt_ecommerce_settings_general_store', 'kt_ecommerce_settings_general_localization', 'kt_ecommerce_settings_general_products', 'kt_ecommerce_settings_general_customers'];\n\n    // Init all forms\n    forms.forEach(function (formId) {\n      // Select form\n      var form = document.getElementById(formId);\n      if (!form) {\n        return;\n      }\n\n      // Dynamically create validation non-empty rule\n      var requiredFields = form.querySelectorAll('.required');\n      var detectedField;\n      var validationFields = {\n        fields: {},\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      };\n\n      // Detect required fields\n      requiredFields.forEach(function (el) {\n        var input = el.closest('.row').querySelector('input');\n        if (input) {\n          detectedField = input;\n        }\n        var textarea = el.closest('.row').querySelector('textarea');\n        if (textarea) {\n          detectedField = textarea;\n        }\n        var select = el.closest('.row').querySelector('select');\n        if (select) {\n          detectedField = select;\n        }\n\n        // Add validation rule                \n        var name = detectedField.getAttribute('name');\n        validationFields.fields[name] = {\n          validators: {\n            notEmpty: {\n              message: el.innerText + ' is required'\n            }\n          }\n        };\n      });\n\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n      var validator = FormValidation.formValidation(form, validationFields);\n\n      // Submit button handler\n      var submitButton = form.querySelector('[data-kt-ecommerce-settings-type=\"submit\"]');\n      submitButton.addEventListener('click', function (e) {\n        // Prevent default button action\n        e.preventDefault();\n\n        // Validate form before submit\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n            if (status == 'Valid') {\n              // Show loading indication\n              submitButton.setAttribute('data-kt-indicator', 'on');\n\n              // Disable button to avoid multiple click \n              submitButton.disabled = true;\n\n              // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n              setTimeout(function () {\n                // Remove loading indication\n                submitButton.removeAttribute('data-kt-indicator');\n\n                // Enable button\n                submitButton.disabled = false;\n\n                // Show popup confirmation \n                Swal.fire({\n                  text: \"Form has been successfully submitted!\",\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                });\n\n                //form.submit(); // Submit form\n              }, 2000);\n            } else {\n              // Show popup error \n              Swal.fire({\n                text: \"Oops! There are some error(s) detected.\",\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Init Tagify\n  var initTagify = function initTagify() {\n    // Get tagify elements\n    var elements = document.querySelectorAll('[data-kt-ecommerce-settings-type=\"tagify\"]');\n\n    // Init tagify\n    elements.forEach(function (element) {\n      new Tagify(element);\n    });\n  };\n\n  // Init Select2 with flags\n  var initSelect2Flags = function initSelect2Flags() {\n    // Format options\n    var optionFormat = function optionFormat(item) {\n      if (!item.id) {\n        return item.text;\n      }\n      var span = document.createElement('span');\n      var template = '';\n      template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n      template += item.text;\n      span.innerHTML = template;\n      return $(span);\n    };\n\n    // Init Select2 --- more info: https://select2.org/\n    $('[data-kt-ecommerce-settings-type=\"select2_flags\"]').select2({\n      placeholder: \"Select a country\",\n      minimumResultsForSearch: Infinity,\n      templateSelection: optionFormat,\n      templateResult: optionFormat\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      initForms();\n      initTagify();\n      initSelect2Flags();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTAppEcommerceSettings.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/ecommerce/settings/settings.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/ecommerce/settings/settings.js ***!
  \******************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js\": (\n    /*!*****************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js ***!\n      \\*****************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAppsEcommerceSettingsSettingsJs() {\n      eval(\" // Class definition\\n\\nvar KTAppEcommerceSettings = function () {\\n  // Shared variables\\n  // Private functions\\n  var initForms = function initForms() {\\n    var forms = ['kt_ecommerce_settings_general_form', 'kt_ecommerce_settings_general_store', 'kt_ecommerce_settings_general_localization', 'kt_ecommerce_settings_general_products', 'kt_ecommerce_settings_general_customers']; // Init all forms\\n\\n    forms.forEach(function (formId) {\\n      // Select form\\n      var form = document.getElementById(formId);\\n\\n      if (!form) {\\n        return;\\n      } // Dynamically create validation non-empty rule\\n\\n\\n      var requiredFields = form.querySelectorAll('.required');\\n      var detectedField;\\n      var validationFields = {\\n        fields: {},\\n        plugins: {\\n          trigger: new FormValidation.plugins.Trigger(),\\n          bootstrap: new FormValidation.plugins.Bootstrap5({\\n            rowSelector: '.fv-row',\\n            eleInvalidClass: '',\\n            eleValidClass: ''\\n          })\\n        }\\n      }; // Detect required fields\\n\\n      requiredFields.forEach(function (el) {\\n        var input = el.closest('.row').querySelector('input');\\n\\n        if (input) {\\n          detectedField = input;\\n        }\\n\\n        var textarea = el.closest('.row').querySelector('textarea');\\n\\n        if (textarea) {\\n          detectedField = textarea;\\n        }\\n\\n        var select = el.closest('.row').querySelector('select');\\n\\n        if (select) {\\n          detectedField = select;\\n        } // Add validation rule                \\n\\n\\n        var name = detectedField.getAttribute('name');\\n        validationFields.fields[name] = {\\n          validators: {\\n            notEmpty: {\\n              message: el.innerText + ' is required'\\n            }\\n          }\\n        };\\n      }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n      var validator = FormValidation.formValidation(form, validationFields); // Submit button handler\\n\\n      var submitButton = form.querySelector('[data-kt-ecommerce-settings-type=\\\"submit\\\"]');\\n      submitButton.addEventListener('click', function (e) {\\n        // Prevent default button action\\n        e.preventDefault(); // Validate form before submit\\n\\n        if (validator) {\\n          validator.validate().then(function (status) {\\n            console.log('validated!');\\n\\n            if (status == 'Valid') {\\n              // Show loading indication\\n              submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n              submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n              setTimeout(function () {\\n                // Remove loading indication\\n                submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n                submitButton.disabled = false; // Show popup confirmation \\n\\n                Swal.fire({\\n                  text: \\\"Form has been successfully submitted!\\\",\\n                  icon: \\\"success\\\",\\n                  buttonsStyling: false,\\n                  confirmButtonText: \\\"Ok, got it!\\\",\\n                  customClass: {\\n                    confirmButton: \\\"btn btn-primary\\\"\\n                  }\\n                }); //form.submit(); // Submit form\\n              }, 2000);\\n            } else {\\n              // Show popup error \\n              Swal.fire({\\n                text: \\\"Oops! There are some error(s) detected.\\\",\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              });\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Init Tagify\\n\\n\\n  var initTagify = function initTagify() {\\n    // Get tagify elements\\n    var elements = document.querySelectorAll('[data-kt-ecommerce-settings-type=\\\"tagify\\\"]'); // Init tagify\\n\\n    elements.forEach(function (element) {\\n      new Tagify(element);\\n    });\\n  }; // Init Select2 with flags\\n\\n\\n  var initSelect2Flags = function initSelect2Flags() {\\n    // Format options\\n    var optionFormat = function optionFormat(item) {\\n      if (!item.id) {\\n        return item.text;\\n      }\\n\\n      var span = document.createElement('span');\\n      var template = '';\\n      template += '<img src=\\\"' + item.element.getAttribute('data-kt-select2-country') + '\\\" class=\\\"rounded-circle h-20px me-2\\\" alt=\\\"image\\\"/>';\\n      template += item.text;\\n      span.innerHTML = template;\\n      return $(span);\\n    }; // Init Select2 --- more info: https://select2.org/\\n\\n\\n    $('[data-kt-ecommerce-settings-type=\\\"select2_flags\\\"]').select2({\\n      placeholder: \\\"Select a country\\\",\\n      minimumResultsForSearch: Infinity,\\n      templateSelection: optionFormat,\\n      templateResult: optionFormat\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      initForms();\\n      initTagify();\\n      initSelect2Flags();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAppEcommerceSettings.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVzb3VyY2VzQXNzZXRzQ29yZUpzQ3VzdG9tQXBwc0Vjb21tZXJjZVNldHRpbmdzU2V0dGluZ3NKcyIsImV2YWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvZGVtbzEvanMvY3VzdG9tL2FwcHMvZWNvbW1lcmNlL3NldHRpbmdzL3NldHRpbmdzLmpzP2RmZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEFUVEVOVElPTjogQW4gXCJldmFsLXNvdXJjZS1tYXBcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQuXG4gKiBUaGlzIGRldnRvb2wgaXMgbmVpdGhlciBtYWRlIGZvciBwcm9kdWN0aW9uIG5vciBmb3IgcmVhZGFibGUgb3V0cHV0IGZpbGVzLlxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cbiAqIElmIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWQgdGhlIG91dHB1dCBmaWxlLCBzZWxlY3QgYSBkaWZmZXJlbnQgZGV2dG9vbCAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvKVxuICogb3IgZGlzYWJsZSB0aGUgZGVmYXVsdCBkZXZ0b29sIHdpdGggXCJkZXZ0b29sOiBmYWxzZVwiLlxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxuICovXG4vKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvZWNvbW1lcmNlL3NldHRpbmdzL3NldHRpbmdzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy9lY29tbWVyY2Uvc2V0dGluZ3Mvc2V0dGluZ3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKCgpID0+IHtcblxuZXZhbChcIiAvLyBDbGFzcyBkZWZpbml0aW9uXFxuXFxudmFyIEtUQXBwRWNvbW1lcmNlU2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XFxuICAvLyBTaGFyZWQgdmFyaWFibGVzXFxuICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xcbiAgdmFyIGluaXRGb3JtcyA9IGZ1bmN0aW9uIGluaXRGb3JtcygpIHtcXG4gICAgdmFyIGZvcm1zID0gWydrdF9lY29tbWVyY2Vfc2V0dGluZ3NfZ2VuZXJhbF9mb3JtJywgJ2t0X2Vjb21tZXJjZV9zZXR0aW5nc19nZW5lcmFsX3N0b3JlJywgJ2t0X2Vjb21tZXJjZV9zZXR0aW5nc19nZW5lcmFsX2xvY2FsaXphdGlvbicsICdrdF9lY29tbWVyY2Vfc2V0dGluZ3NfZ2VuZXJhbF9wcm9kdWN0cycsICdrdF9lY29tbWVyY2Vfc2V0dGluZ3NfZ2VuZXJhbF9jdXN0b21lcnMnXTsgLy8gSW5pdCBhbGwgZm9ybXNcXG5cXG4gICAgZm9ybXMuZm9yRWFjaChmdW5jdGlvbiAoZm9ybUlkKSB7XFxuICAgICAgLy8gU2VsZWN0IGZvcm1cXG4gICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZvcm1JZCk7XFxuXFxuICAgICAgaWYgKCFmb3JtKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSAvLyBEeW5hbWljYWxseSBjcmVhdGUgdmFsaWRhdGlvbiBub24tZW1wdHkgcnVsZVxcblxcblxcbiAgICAgIHZhciByZXF1aXJlZEZpZWxkcyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLnJlcXVpcmVkJyk7XFxuICAgICAgdmFyIGRldGVjdGVkRmllbGQ7XFxuICAgICAgdmFyIHZhbGlkYXRpb25GaWVsZHMgPSB7XFxuICAgICAgICBmaWVsZHM6IHt9LFxcbiAgICAgICAgcGx1Z2luczoge1xcbiAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXFxuICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XFxuICAgICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcXG4gICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxcbiAgICAgICAgICAgIGVsZVZhbGlkQ2xhc3M6ICcnXFxuICAgICAgICAgIH0pXFxuICAgICAgICB9XFxuICAgICAgfTsgLy8gRGV0ZWN0IHJlcXVpcmVkIGZpZWxkc1xcblxcbiAgICAgIHJlcXVpcmVkRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XFxuICAgICAgICB2YXIgaW5wdXQgPSBlbC5jbG9zZXN0KCcucm93JykucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcXG5cXG4gICAgICAgIGlmIChpbnB1dCkge1xcbiAgICAgICAgICBkZXRlY3RlZEZpZWxkID0gaW5wdXQ7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgdGV4dGFyZWEgPSBlbC5jbG9zZXN0KCcucm93JykucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKTtcXG5cXG4gICAgICAgIGlmICh0ZXh0YXJlYSkge1xcbiAgICAgICAgICBkZXRlY3RlZEZpZWxkID0gdGV4dGFyZWE7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgc2VsZWN0ID0gZWwuY2xvc2VzdCgnLnJvdycpLnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCcpO1xcblxcbiAgICAgICAgaWYgKHNlbGVjdCkge1xcbiAgICAgICAgICBkZXRlY3RlZEZpZWxkID0gc2VsZWN0O1xcbiAgICAgICAgfSAvLyBBZGQgdmFsaWRhdGlvbiBydWxlICAgICAgICAgICAgICAgIFxcblxcblxcbiAgICAgICAgdmFyIG5hbWUgPSBkZXRlY3RlZEZpZWxkLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xcbiAgICAgICAgdmFsaWRhdGlvbkZpZWxkcy5maWVsZHNbbmFtZV0gPSB7XFxuICAgICAgICAgIHZhbGlkYXRvcnM6IHtcXG4gICAgICAgICAgICBub3RFbXB0eToge1xcbiAgICAgICAgICAgICAgbWVzc2FnZTogZWwuaW5uZXJUZXh0ICsgJyBpcyByZXF1aXJlZCdcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH07XFxuICAgICAgfSk7IC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXFxuXFxuICAgICAgdmFyIHZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKGZvcm0sIHZhbGlkYXRpb25GaWVsZHMpOyAvLyBTdWJtaXQgYnV0dG9uIGhhbmRsZXJcXG5cXG4gICAgICB2YXIgc3VibWl0QnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1lY29tbWVyY2Utc2V0dGluZ3MtdHlwZT1cXFwic3VibWl0XFxcIl0nKTtcXG4gICAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gVmFsaWRhdGUgZm9ybSBiZWZvcmUgc3VibWl0XFxuXFxuICAgICAgICBpZiAodmFsaWRhdG9yKSB7XFxuICAgICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZWQhJyk7XFxuXFxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnVmFsaWQnKSB7XFxuICAgICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxcbiAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTsgLy8gRGlzYWJsZSBidXR0b24gdG8gYXZvaWQgbXVsdGlwbGUgY2xpY2sgXFxuXFxuICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlOyAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb24uIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246IGh0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvL1xcblxcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsb2FkaW5nIGluZGljYXRpb25cXG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InKTsgLy8gRW5hYmxlIGJ1dHRvblxcblxcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTsgLy8gU2hvdyBwb3B1cCBjb25maXJtYXRpb24gXFxuXFxuICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XFxuICAgICAgICAgICAgICAgICAgdGV4dDogXFxcIkZvcm0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHN1Ym1pdHRlZCFcXFwiLFxcbiAgICAgICAgICAgICAgICAgIGljb246IFxcXCJzdWNjZXNzXFxcIixcXG4gICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPaywgZ290IGl0IVxcXCIsXFxuICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gYnRuLXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTsgLy9mb3JtLnN1Ym1pdCgpOyAvLyBTdWJtaXQgZm9ybVxcbiAgICAgICAgICAgICAgfSwgMjAwMCk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgZXJyb3IgXFxuICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICAgICAgICB0ZXh0OiBcXFwiT29wcyEgVGhlcmUgYXJlIHNvbWUgZXJyb3IocykgZGV0ZWN0ZWQuXFxcIixcXG4gICAgICAgICAgICAgICAgaWNvbjogXFxcImVycm9yXFxcIixcXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXFxcIk9rLCBnb3QgaXQhXFxcIixcXG4gICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gIH07IC8vIEluaXQgVGFnaWZ5XFxuXFxuXFxuICB2YXIgaW5pdFRhZ2lmeSA9IGZ1bmN0aW9uIGluaXRUYWdpZnkoKSB7XFxuICAgIC8vIEdldCB0YWdpZnkgZWxlbWVudHNcXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEta3QtZWNvbW1lcmNlLXNldHRpbmdzLXR5cGU9XFxcInRhZ2lmeVxcXCJdJyk7IC8vIEluaXQgdGFnaWZ5XFxuXFxuICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcXG4gICAgICBuZXcgVGFnaWZ5KGVsZW1lbnQpO1xcbiAgICB9KTtcXG4gIH07IC8vIEluaXQgU2VsZWN0MiB3aXRoIGZsYWdzXFxuXFxuXFxuICB2YXIgaW5pdFNlbGVjdDJGbGFncyA9IGZ1bmN0aW9uIGluaXRTZWxlY3QyRmxhZ3MoKSB7XFxuICAgIC8vIEZvcm1hdCBvcHRpb25zXFxuICAgIHZhciBvcHRpb25Gb3JtYXQgPSBmdW5jdGlvbiBvcHRpb25Gb3JtYXQoaXRlbSkge1xcbiAgICAgIGlmICghaXRlbS5pZCkge1xcbiAgICAgICAgcmV0dXJuIGl0ZW0udGV4dDtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XFxuICAgICAgdmFyIHRlbXBsYXRlID0gJyc7XFxuICAgICAgdGVtcGxhdGUgKz0gJzxpbWcgc3JjPVxcXCInICsgaXRlbS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1zZWxlY3QyLWNvdW50cnknKSArICdcXFwiIGNsYXNzPVxcXCJyb3VuZGVkLWNpcmNsZSBoLTIwcHggbWUtMlxcXCIgYWx0PVxcXCJpbWFnZVxcXCIvPic7XFxuICAgICAgdGVtcGxhdGUgKz0gaXRlbS50ZXh0O1xcbiAgICAgIHNwYW4uaW5uZXJIVE1MID0gdGVtcGxhdGU7XFxuICAgICAgcmV0dXJuICQoc3Bhbik7XFxuICAgIH07IC8vIEluaXQgU2VsZWN0MiAtLS0gbW9yZSBpbmZvOiBodHRwczovL3NlbGVjdDIub3JnL1xcblxcblxcbiAgICAkKCdbZGF0YS1rdC1lY29tbWVyY2Utc2V0dGluZ3MtdHlwZT1cXFwic2VsZWN0Ml9mbGFnc1xcXCJdJykuc2VsZWN0Mih7XFxuICAgICAgcGxhY2Vob2xkZXI6IFxcXCJTZWxlY3QgYSBjb3VudHJ5XFxcIixcXG4gICAgICBtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDogSW5maW5pdHksXFxuICAgICAgdGVtcGxhdGVTZWxlY3Rpb246IG9wdGlvbkZvcm1hdCxcXG4gICAgICB0ZW1wbGF0ZVJlc3VsdDogb3B0aW9uRm9ybWF0XFxuICAgIH0pO1xcbiAgfTsgLy8gUHVibGljIG1ldGhvZHNcXG5cXG5cXG4gIHJldHVybiB7XFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgaW5pdEZvcm1zKCk7XFxuICAgICAgaW5pdFRhZ2lmeSgpO1xcbiAgICAgIGluaXRTZWxlY3QyRmxhZ3MoKTtcXG4gICAgfVxcbiAgfTtcXG59KCk7IC8vIE9uIGRvY3VtZW50IHJlYWR5XFxuXFxuXFxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XFxuICBLVEFwcEVjb21tZXJjZVNldHRpbmdzLmluaXQoKTtcXG59KTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl5WlhOdmRYSmpaWE12WVhOelpYUnpMMk52Y21VdmFuTXZZM1Z6ZEc5dEwyRndjSE12WldOdmJXMWxjbU5sTDNObGRIUnBibWR6TDNObGRIUnBibWR6TG1wekxtcHpJaXdpYldGd2NHbHVaM01pT2lKRFFVVkJPenRCUVVOQkxFbEJRVWxCTEhOQ1FVRnpRaXhIUVVGSExGbEJRVms3UVVGRGNrTTdRVUZIUVR0QlFVTkJMRTFCUVUxRExGTkJRVk1zUjBGQlJ5eFRRVUZhUVN4VFFVRlpMRWRCUVUwN1FVRkRjRUlzVVVGQlRVTXNTMEZCU3l4SFFVRkhMRU5CUTFZc2IwTkJSRlVzUlVGRlZpeHhRMEZHVlN4RlFVZFdMRFJEUVVoVkxFVkJTVllzZDBOQlNsVXNSVUZMVml4NVEwRk1WU3hEUVVGa0xFTkJSRzlDTEVOQlUzQkNPenRCUVVOQlFTeEpRVUZCUVN4TFFVRkxMRU5CUVVORExFOUJRVTRzUTBGQll5eFZRVUZCUXl4TlFVRk5MRVZCUVVrN1FVRkRjRUk3UVVGRFFTeFZRVUZOUXl4SlFVRkpMRWRCUVVkRExGRkJRVkVzUTBGQlEwTXNZMEZCVkN4RFFVRjNRa2dzVFVGQmVFSXNRMEZCWWpzN1FVRkZRU3hWUVVGSExFTkJRVU5ETEVsQlFVb3NSVUZCVXp0QlFVTk1PMEZCUTBnc1QwRk9iVUlzUTBGUmNFSTdPenRCUVVOQkxGVkJRVTFITEdOQlFXTXNSMEZCUjBnc1NVRkJTU3hEUVVGRFNTeG5Ra0ZCVEN4RFFVRnpRaXhYUVVGMFFpeERRVUYyUWp0QlFVTkJMRlZCUVVsRExHRkJRVW83UVVGRFFTeFZRVUZKUXl4blFrRkJaMElzUjBGQlJ6dEJRVU51UWtNc1VVRkJRVUVzVFVGQlRTeEZRVUZGTEVWQlJGYzdRVUZIYmtKRExGRkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVTk1ReXhWUVVGQlFTeFBRVUZQTEVWQlFVVXNTVUZCU1VNc1kwRkJZeXhEUVVGRFJpeFBRVUZtTEVOQlFYVkNSeXhQUVVFelFpeEZRVVJLTzBGQlJVeERMRlZCUVVGQkxGTkJRVk1zUlVGQlJTeEpRVUZKUml4alFVRmpMRU5CUVVOR0xFOUJRV1lzUTBGQmRVSkxMRlZCUVROQ0xFTkJRWE5ETzBGQlF6ZERReXhaUVVGQlFTeFhRVUZYTEVWQlFVVXNVMEZFWjBNN1FVRkZOME5ETEZsQlFVRkJMR1ZCUVdVc1JVRkJSU3hGUVVZMFFqdEJRVWMzUTBNc1dVRkJRVUVzWVVGQllTeEZRVUZGTzBGQlNEaENMRmRCUVhSRE8wRkJSazQ3UVVGSVZTeFBRVUYyUWl4RFFWaHZRaXhEUVhkQ2NFSTdPMEZCUTBGaUxFMUJRVUZCTEdOQlFXTXNRMEZCUTB3c1QwRkJaaXhEUVVGMVFpeFZRVUZCYlVJc1JVRkJSU3hGUVVGSk8wRkJRM3BDTEZsQlFVMURMRXRCUVVzc1IwRkJSMFFzUlVGQlJTeERRVUZEUlN4UFFVRklMRU5CUVZjc1RVRkJXQ3hGUVVGdFFrTXNZVUZCYmtJc1EwRkJhVU1zVDBGQmFrTXNRMEZCWkRzN1FVRkRRU3haUVVGSlJpeExRVUZLTEVWQlFWYzdRVUZEVUdJc1ZVRkJRVUVzWVVGQllTeEhRVUZIWVN4TFFVRm9RanRCUVVOSU96dEJRVVZFTEZsQlFVMUhMRkZCUVZFc1IwRkJSMG9zUlVGQlJTeERRVUZEUlN4UFFVRklMRU5CUVZjc1RVRkJXQ3hGUVVGdFFrTXNZVUZCYmtJc1EwRkJhVU1zVlVGQmFrTXNRMEZCYWtJN08wRkJRMEVzV1VGQlNVTXNVVUZCU2l4RlFVRmpPMEZCUTFab1FpeFZRVUZCUVN4aFFVRmhMRWRCUVVkblFpeFJRVUZvUWp0QlFVTklPenRCUVVWRUxGbEJRVTFETEUxQlFVMHNSMEZCUjB3c1JVRkJSU3hEUVVGRFJTeFBRVUZJTEVOQlFWY3NUVUZCV0N4RlFVRnRRa01zWVVGQmJrSXNRMEZCYVVNc1VVRkJha01zUTBGQlpqczdRVUZEUVN4WlFVRkpSU3hOUVVGS0xFVkJRVms3UVVGRFVtcENMRlZCUVVGQkxHRkJRV0VzUjBGQlIybENMRTFCUVdoQ08wRkJRMGdzVTBGa2QwSXNRMEZuUW5wQ096czdRVUZEUVN4WlFVRk5ReXhKUVVGSkxFZEJRVWRzUWl4aFFVRmhMRU5CUVVOdFFpeFpRVUZrTEVOQlFUSkNMRTFCUVROQ0xFTkJRV0k3UVVGRFFXeENMRkZCUVVGQkxHZENRVUZuUWl4RFFVRkRReXhOUVVGcVFpeERRVUYzUW1kQ0xFbEJRWGhDTEVsQlFXZERPMEZCUXpWQ1JTeFZRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRkRVa01zV1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUTA1RExHTkJRVUZCTEU5QlFVOHNSVUZCUlZZc1JVRkJSU3hEUVVGRFZ5eFRRVUZJTEVkQlFXVTdRVUZFYkVJN1FVRkVSanRCUVVSblFpeFRRVUZvUXp0QlFVOUlMRTlCZWtKRUxFVkJla0p2UWl4RFFXOUVjRUk3TzBGQlEwRXNWVUZCU1VNc1UwRkJVeXhIUVVGSGJrSXNZMEZCWXl4RFFVRkRiMElzWTBGQlppeERRVU5hT1VJc1NVRkVXU3hGUVVWYVRTeG5Ra0ZHV1N4RFFVRm9RaXhEUVhKRWIwSXNRMEV3UkhCQ096dEJRVU5CTEZWQlFVMTVRaXhaUVVGWkxFZEJRVWN2UWl4SlFVRkpMRU5CUVVOdlFpeGhRVUZNTEVOQlFXMUNMRFJEUVVGdVFpeERRVUZ5UWp0QlFVTkJWeXhOUVVGQlFTeFpRVUZaTEVOQlFVTkRMR2RDUVVGaUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExGVkJRVlZETEVOQlFWWXNSVUZCWVR0QlFVTm9SRHRCUVVOQlFTeFJRVUZCUVN4RFFVRkRMRU5CUVVORExHTkJRVVlzUjBGR1owUXNRMEZKYUVRN08wRkJRMEVzV1VGQlNVd3NVMEZCU2l4RlFVRmxPMEZCUTFoQkxGVkJRVUZCTEZOQlFWTXNRMEZCUTAwc1VVRkJWaXhIUVVGeFFrTXNTVUZCY2tJc1EwRkJNRUlzVlVGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVONFEwTXNXVUZCUVVFc1QwRkJUeXhEUVVGRFF5eEhRVUZTTEVOQlFWa3NXVUZCV2pzN1FVRkZRU3huUWtGQlNVWXNUVUZCVFN4SlFVRkpMRTlCUVdRc1JVRkJkVUk3UVVGRGJrSTdRVUZEUVU0c1kwRkJRVUVzV1VGQldTeERRVUZEVXl4WlFVRmlMRU5CUVRCQ0xHMUNRVUV4UWl4RlFVRXJReXhKUVVFdlF5eEZRVVp0UWl4RFFVbHVRanM3UVVGRFFWUXNZMEZCUVVFc1dVRkJXU3hEUVVGRFZTeFJRVUZpTEVkQlFYZENMRWxCUVhoQ0xFTkJURzFDTEVOQlQyNUNPenRCUVVOQlF5eGpRVUZCUVN4VlFVRlZMRU5CUVVNc1dVRkJXVHRCUVVOdVFqdEJRVU5CV0N4blFrRkJRVUVzV1VGQldTeERRVUZEV1N4bFFVRmlMRU5CUVRaQ0xHMUNRVUUzUWl4RlFVWnRRaXhEUVVsdVFqczdRVUZEUVZvc1owSkJRVUZCTEZsQlFWa3NRMEZCUTFVc1VVRkJZaXhIUVVGM1FpeExRVUY0UWl4RFFVeHRRaXhEUVU5dVFqczdRVUZEUVVjc1owSkJRVUZCTEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hEUVVGVk8wRkJRMDVETEd0Q1FVRkJRU3hKUVVGSkxFVkJRVVVzZFVOQlJFRTdRVUZGVGtNc2EwSkJRVUZCTEVsQlFVa3NSVUZCUlN4VFFVWkJPMEZCUjA1RExHdENRVUZCUVN4alFVRmpMRVZCUVVVc1MwRklWanRCUVVsT1F5eHJRa0ZCUVVFc2FVSkJRV2xDTEVWQlFVVXNZVUZLWWp0QlFVdE9ReXhyUWtGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFSRExHOUNRVUZCUVN4aFFVRmhMRVZCUVVVN1FVRkVUanRCUVV4UUxHbENRVUZXTEVWQlVtMUNMRU5CYTBKdVFqdEJRVU5JTEdWQmJrSlRMRVZCYlVKUUxFbEJia0pQTEVOQlFWWTdRVUZ2UWtnc1lVRTFRa1FzVFVFMFFrODdRVUZEU0R0QlFVTkJVQ3hqUVVGQlFTeEpRVUZKTEVOQlFVTkRMRWxCUVV3c1EwRkJWVHRCUVVOT1F5eG5Ra0ZCUVVFc1NVRkJTU3hGUVVGRkxIbERRVVJCTzBGQlJVNURMR2RDUVVGQlFTeEpRVUZKTEVWQlFVVXNUMEZHUVR0QlFVZE9ReXhuUWtGQlFVRXNZMEZCWXl4RlFVRkZMRXRCU0ZZN1FVRkpUa01zWjBKQlFVRkJMR2xDUVVGcFFpeEZRVUZGTEdGQlNtSTdRVUZMVGtNc1owSkJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVTlVReXhyUWtGQlFVRXNZVUZCWVN4RlFVRkZPMEZCUkU0N1FVRk1VQ3hsUVVGV08wRkJVMGc3UVVGRFNpeFhRVE5EUkR0QlFUUkRTRHRCUVVOS0xFOUJia1JFTzBGQmIwUklMRXRCYUVoRU8wRkJhVWhJTEVkQk0waEVMRU5CVEhGRExFTkJhMGx5UXpzN08wRkJRMEVzVFVGQlRVTXNWVUZCVlN4SFFVRkhMRk5CUVdKQkxGVkJRV0VzUjBGQlRUdEJRVU55UWp0QlFVTkJMRkZCUVUxRExGRkJRVkVzUjBGQlIzQkVMRkZCUVZFc1EwRkJRMGNzWjBKQlFWUXNRMEZCTUVJc05FTkJRVEZDTEVOQlFXcENMRU5CUm5GQ0xFTkJTWEpDT3p0QlFVTkJhVVFzU1VGQlFVRXNVVUZCVVN4RFFVRkRka1FzVDBGQlZDeERRVUZwUWl4VlFVRkJkMFFzVDBGQlR5eEZRVUZKTzBGQlEzaENMRlZCUVVsRExFMUJRVW9zUTBGQlYwUXNUMEZCV0R0QlFVTklMRXRCUmtRN1FVRkhTQ3hIUVZKRUxFTkJia2x4UXl4RFFUWkpja003T3p0QlFVTkJMRTFCUVUxRkxHZENRVUZuUWl4SFFVRkhMRk5CUVc1Q1FTeG5Ra0ZCYlVJc1IwRkJUVHRCUVVNelFqdEJRVU5CTEZGQlFVMURMRmxCUVZrc1IwRkJSeXhUUVVGbVFTeFpRVUZsTEVOQlFVTkRMRWxCUVVRc1JVRkJWVHRCUVVNelFpeFZRVUZMTEVOQlFVTkJMRWxCUVVrc1EwRkJRME1zUlVGQldDeEZRVUZuUWp0QlFVTmFMR1ZCUVU5RUxFbEJRVWtzUTBGQlExb3NTVUZCV2p0QlFVTklPenRCUVVWRUxGVkJRVWxqTEVsQlFVa3NSMEZCUnpORUxGRkJRVkVzUTBGQlF6UkVMR0ZCUVZRc1EwRkJkVUlzVFVGQmRrSXNRMEZCV0R0QlFVTkJMRlZCUVVsRExGRkJRVkVzUjBGQlJ5eEZRVUZtTzBGQlJVRkJMRTFCUVVGQkxGRkJRVkVzU1VGQlNTeGxRVUZsU2l4SlFVRkpMRU5CUVVOS0xFOUJRVXdzUTBGQllUbENMRmxCUVdJc1EwRkJNRUlzZVVKQlFURkNMRU5CUVdZc1IwRkJjMFVzYjBSQlFXeEdPMEZCUTBGelF5eE5RVUZCUVN4UlFVRlJMRWxCUVVsS0xFbEJRVWtzUTBGQlExb3NTVUZCYWtJN1FVRkZRV01zVFVGQlFVRXNTVUZCU1N4RFFVRkRSeXhUUVVGTUxFZEJRV2xDUkN4UlFVRnFRanRCUVVWQkxHRkJRVTlGTEVOQlFVTXNRMEZCUTBvc1NVRkJSQ3hEUVVGU08wRkJRMGdzUzBGa1JDeERRVVl5UWl4RFFXdENNMEk3T3p0QlFVTkJTU3hKUVVGQlFTeERRVUZETEVOQlFVTXNiVVJCUVVRc1EwRkJSQ3hEUVVGMVJFTXNUMEZCZGtRc1EwRkJLMFE3UVVGRE0wUkRMRTFCUVVGQkxGZEJRVmNzUlVGQlJTeHJRa0ZFT0VNN1FVRkZNMFJETEUxQlFVRkJMSFZDUVVGMVFpeEZRVUZGUXl4UlFVWnJRenRCUVVjelJFTXNUVUZCUVVFc2FVSkJRV2xDTEVWQlFVVmFMRmxCU0hkRE8wRkJTVE5FWVN4TlFVRkJRU3hqUVVGakxFVkJRVVZpTzBGQlNqSkRMRXRCUVM5RU8wRkJUVWdzUjBGNlFrUXNRMEU1U1hGRExFTkJlVXR5UXpzN08wRkJRMEVzVTBGQlR6dEJRVU5JWXl4SlFVRkJRU3hKUVVGSkxFVkJRVVVzWjBKQlFWazdRVUZGWkRORkxFMUJRVUZCTEZOQlFWTTdRVUZEVkhkRUxFMUJRVUZCTEZWQlFWVTdRVUZEVmtrc1RVRkJRVUVzWjBKQlFXZENPMEZCUlc1Q08wRkJVRVVzUjBGQlVEdEJRVk5JTEVOQmJrdzBRaXhGUVVFM1FpeERMRU5CY1V4Qk96czdRVUZEUVdkQ0xFMUJRVTBzUTBGQlEwTXNhMEpCUVZBc1EwRkJNRUlzV1VGQldUdEJRVU5zUXpsRkxFVkJRVUZCTEhOQ1FVRnpRaXhEUVVGRE5FVXNTVUZCZGtJN1FVRkRTQ3hEUVVaRUlpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmNtVnpiM1Z5WTJWekwyRnpjMlYwY3k5amIzSmxMMnB6TDJOMWMzUnZiUzloY0hCekwyVmpiMjF0WlhKalpTOXpaWFIwYVc1bmN5OXpaWFIwYVc1bmN5NXFjejlpTnpBeklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHdpZFhObElITjBjbWxqZEZ3aU8xeHlYRzVjY2x4dUx5OGdRMnhoYzNNZ1pHVm1hVzVwZEdsdmJseHlYRzUyWVhJZ1MxUkJjSEJGWTI5dGJXVnlZMlZUWlhSMGFXNW5jeUE5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDOHZJRk5vWVhKbFpDQjJZWEpwWVdKc1pYTmNjbHh1WEhKY2JseHlYRzRnSUNBZ0x5OGdVSEpwZG1GMFpTQm1kVzVqZEdsdmJuTmNjbHh1SUNBZ0lHTnZibk4wSUdsdWFYUkdiM0p0Y3lBOUlDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbWIzSnRjeUE5SUZ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSjJ0MFgyVmpiMjF0WlhKalpWOXpaWFIwYVc1bmMxOW5aVzVsY21Gc1gyWnZjbTBuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FuYTNSZlpXTnZiVzFsY21ObFgzTmxkSFJwYm1kelgyZGxibVZ5WVd4ZmMzUnZjbVVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FuYTNSZlpXTnZiVzFsY21ObFgzTmxkSFJwYm1kelgyZGxibVZ5WVd4ZmJHOWpZV3hwZW1GMGFXOXVKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKMnQwWDJWamIyMXRaWEpqWlY5elpYUjBhVzVuYzE5blpXNWxjbUZzWDNCeWIyUjFZM1J6Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSjJ0MFgyVmpiMjF0WlhKalpWOXpaWFIwYVc1bmMxOW5aVzVsY21Gc1gyTjFjM1J2YldWeWN5Y3NYSEpjYmlBZ0lDQWdJQ0FnWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NXNXBkQ0JoYkd3Z1ptOXliWE5jY2x4dUlDQWdJQ0FnSUNCbWIzSnRjeTVtYjNKRllXTm9LR1p2Y20xSlpDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZObGJHVmpkQ0JtYjNKdFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1p2Y20wZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNobWIzSnRTV1FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9JV1p2Y20wcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJFZVc1aGJXbGpZV3hzZVNCamNtVmhkR1VnZG1Gc2FXUmhkR2x2YmlCdWIyNHRaVzF3ZEhrZ2NuVnNaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYRjFhWEpsWkVacFpXeGtjeUE5SUdadmNtMHVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbkpsY1hWcGNtVmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1pYUmxZM1JsWkVacFpXeGtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2FXUmhkR2x2YmtacFpXeGtjeUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBaV3hrY3pvZ2UzMHNYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHeDFaMmx1Y3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWFXZG5aWEk2SUc1bGR5QkdiM0p0Vm1Gc2FXUmhkR2x2Ymk1d2JIVm5hVzV6TGxSeWFXZG5aWElvS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjI5MGMzUnlZWEE2SUc1bGR5QkdiM0p0Vm1Gc2FXUmhkR2x2Ymk1d2JIVm5hVzV6TGtKdmIzUnpkSEpoY0RVb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM2RUWld4bFkzUnZjam9nSnk1bWRpMXliM2NuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVkpiblpoYkdsa1EyeGhjM002SUNjbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiR1ZXWVd4cFpFTnNZWE56T2lBbkoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSbGRHVmpkQ0J5WlhGMWFYSmxaQ0JtYVdWc1pITmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnhkV2x5WldSR2FXVnNaSE11Wm05eVJXRmphQ2hsYkNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBibkIxZENBOUlHVnNMbU5zYjNObGMzUW9KeTV5YjNjbktTNXhkV1Z5ZVZObGJHVmpkRzl5S0NkcGJuQjFkQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVjBaV04wWldSR2FXVnNaQ0E5SUdsdWNIVjBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxlSFJoY21WaElEMGdaV3d1WTJ4dmMyVnpkQ2duTG5KdmR5Y3BMbkYxWlhKNVUyVnNaV04wYjNJb0ozUmxlSFJoY21WaEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHVjRkR0Z5WldFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYUmxZM1JsWkVacFpXeGtJRDBnZEdWNGRHRnlaV0U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZzWldOMElEMGdaV3d1WTJ4dmMyVnpkQ2duTG5KdmR5Y3BMbkYxWlhKNVUyVnNaV04wYjNJb0ozTmxiR1ZqZENjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hObGJHVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsZEdWamRHVmtSbWxsYkdRZ1BTQnpaV3hsWTNRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRV1JrSUhaaGJHbGtZWFJwYjI0Z2NuVnNaU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHNWhiV1VnUFNCa1pYUmxZM1JsWkVacFpXeGtMbWRsZEVGMGRISnBZblYwWlNnbmJtRnRaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNhV1JoZEdsdmJrWnBaV3hrY3k1bWFXVnNaSE5iYm1GdFpWMGdQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzYVdSaGRHOXljem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzUkZiWEIwZVRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWld3dWFXNXVaWEpVWlhoMElDc2dKeUJwY3lCeVpYRjFhWEpsWkNkY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmJtbDBJR1p2Y20wZ2RtRnNhV1JoZEdsdmJpQnlkV3hsY3k0Z1JtOXlJRzF2Y21VZ2FXNW1ieUJqYUdWamF5QjBhR1VnUm05eWJWWmhiR2xrWVhScGIyNGdjR3gxWjJsdUozTWdiMlptYVdOcFlXd2daRzlqZFcxbGJuUmhkR2x2Ympwb2RIUndjem92TDJadmNtMTJZV3hwWkdGMGFXOXVMbWx2TDF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEc5eUlEMGdSbTl5YlZaaGJHbGtZWFJwYjI0dVptOXliVlpoYkdsa1lYUnBiMjRvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2FXUmhkR2x2YmtacFpXeGtjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UzVmliV2wwSUdKMWRIUnZiaUJvWVc1a2JHVnlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOMVltMXBkRUoxZEhSdmJpQTlJR1p2Y20wdWNYVmxjbmxUWld4bFkzUnZjaWduVzJSaGRHRXRhM1F0WldOdmJXMWxjbU5sTFhObGRIUnBibWR6TFhSNWNHVTlYQ0p6ZFdKdGFYUmNJbDBuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzNWaWJXbDBRblYwZEc5dUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0Z0tHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGQnlaWFpsYm5RZ1pHVm1ZWFZzZENCaWRYUjBiMjRnWVdOMGFXOXVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVm1Gc2FXUmhkR1VnWm05eWJTQmlaV1p2Y21VZ2MzVmliV2wwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzYVdSaGRHOXlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzYVdSaGRHOXlMblpoYkdsa1lYUmxLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9jM1JoZEhWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkMllXeHBaR0YwWldRaEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoZEhWeklEMDlJQ2RXWVd4cFpDY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYjNjZ2JHOWhaR2x1WnlCcGJtUnBZMkYwYVc5dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFdKdGFYUkNkWFIwYjI0dWMyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXdDBMV2x1WkdsallYUnZjaWNzSUNkdmJpY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVScGMyRmliR1VnWW5WMGRHOXVJSFJ2SUdGMmIybGtJRzExYkhScGNHeGxJR05zYVdOcklGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWaWJXbDBRblYwZEc5dUxtUnBjMkZpYkdWa0lEMGdkSEoxWlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRhVzExYkdGMFpTQm1iM0p0SUhOMVltMXBjM05wYjI0dUlFWnZjaUJ0YjNKbElHbHVabThnWTJobFkyc2dkR2hsSUhCc2RXZHBiaWR6SUc5bVptbGphV0ZzSUdSdlkzVnRaVzUwWVhScGIyNDZJR2gwZEhCek9pOHZjM2RsWlhSaGJHVnlkREl1WjJsMGFIVmlMbWx2TDF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHeHZZV1JwYm1jZ2FXNWthV05oZEdsdmJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFZbTFwZEVKMWRIUnZiaTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGEzUXRhVzVrYVdOaGRHOXlKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVZ1WVdKc1pTQmlkWFIwYjI1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRXSnRhWFJDZFhSMGIyNHVaR2x6WVdKc1pXUWdQU0JtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyaHZkeUJ3YjNCMWNDQmpiMjVtYVhKdFlYUnBiMjRnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVTNkaGJDNW1hWEpsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1hDSkdiM0p0SUdoaGN5QmlaV1Z1SUhOMVkyTmxjM05tZFd4c2VTQnpkV0p0YVhSMFpXUWhYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ2SUZ3aWMzVmpZMlZ6YzF3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFhSMGIyNXpVM1I1YkdsdVp6b2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acGNtMUNkWFIwYjI1VVpYaDBPaUJjSWs5ckxDQm5iM1FnYVhRaFhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVU5zWVhOek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVhKdFFuVjBkRzl1T2lCY0ltSjBiaUJpZEc0dGNISnBiV0Z5ZVZ3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTltYjNKdExuTjFZbTFwZENncE95QXZMeUJUZFdKdGFYUWdabTl5YlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnTWpBd01DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRhRzkzSUhCdmNIVndJR1Z5Y205eUlGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVTNkaGJDNW1hWEpsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJjSWs5dmNITWhJRlJvWlhKbElHRnlaU0J6YjIxbElHVnljbTl5S0hNcElHUmxkR1ZqZEdWa0xsd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklGd2laWEp5YjNKY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWFIwYjI1elUzUjViR2x1WnpvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJsUmxlSFE2SUZ3aVQyc3NJR2R2ZENCcGRDRmNJaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhOMGIyMURiR0Z6Y3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFYSnRRblYwZEc5dU9pQmNJbUowYmlCaWRHNHRjSEpwYldGeWVWd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdTVzVwZENCVVlXZHBabmxjY2x4dUlDQWdJR052Ym5OMElHbHVhWFJVWVdkcFpua2dQU0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1IyVjBJSFJoWjJsbWVTQmxiR1Z0Wlc1MGMxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHVnNaVzFsYm5SeklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMlJoZEdFdGEzUXRaV052YlcxbGNtTmxMWE5sZEhScGJtZHpMWFI1Y0dVOVhDSjBZV2RwWm5sY0lsMG5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnU1c1cGRDQjBZV2RwWm5sY2NseHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MGN5NW1iM0pGWVdOb0tHVnNaVzFsYm5RZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVkdGbmFXWjVLR1ZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUVsdWFYUWdVMlZzWldOME1pQjNhWFJvSUdac1lXZHpYSEpjYmlBZ0lDQmpiMjV6ZENCcGJtbDBVMlZzWldOME1rWnNZV2R6SUQwZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRVp2Y20xaGRDQnZjSFJwYjI1elhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IzQjBhVzl1Um05eWJXRjBJRDBnS0dsMFpXMHBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDQWhhWFJsYlM1cFpDQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWdExuUmxlSFE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpjR0Z1SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYzNCaGJpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdWdGNHeGhkR1VnUFNBbkp6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxJQ3M5SUNjOGFXMW5JSE55WXoxY0lpY2dLeUJwZEdWdExtVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXdDBMWE5sYkdWamRESXRZMjkxYm5SeWVTY3BJQ3NnSjF3aUlHTnNZWE56UFZ3aWNtOTFibVJsWkMxamFYSmpiR1VnYUMweU1IQjRJRzFsTFRKY0lpQmhiSFE5WENKcGJXRm5aVndpTHo0bk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdiR0YwWlNBclBTQnBkR1Z0TG5SbGVIUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0dGdUxtbHVibVZ5U0ZSTlRDQTlJSFJsYlhCc1lYUmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1FvYzNCaGJpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCSmJtbDBJRk5sYkdWamRESWdMUzB0SUcxdmNtVWdhVzVtYnpvZ2FIUjBjSE02THk5elpXeGxZM1F5TG05eVp5OWNjbHh1SUNBZ0lDQWdJQ0FrS0NkYlpHRjBZUzFyZEMxbFkyOXRiV1Z5WTJVdGMyVjBkR2x1WjNNdGRIbHdaVDFjSW5ObGJHVmpkREpmWm14aFozTmNJbDBuS1M1elpXeGxZM1F5S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJNklGd2lVMlZzWldOMElHRWdZMjkxYm5SeWVWd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdFVtVnpkV3gwYzBadmNsTmxZWEpqYURvZ1NXNW1hVzVwZEhrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJYQnNZWFJsVTJWc1pXTjBhVzl1T2lCdmNIUnBiMjVHYjNKdFlYUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxiWEJzWVhSbFVtVnpkV3gwT2lCdmNIUnBiMjVHYjNKdFlYUmNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJRZFdKc2FXTWdiV1YwYUc5a2MxeHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMFJtOXliWE1vS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1cGRGUmhaMmxtZVNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtbDBVMlZzWldOME1rWnNZV2R6S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibjBvS1R0Y2NseHVYSEpjYmk4dklFOXVJR1J2WTNWdFpXNTBJSEpsWVdSNVhISmNia3RVVlhScGJDNXZia1JQVFVOdmJuUmxiblJNYjJGa1pXUW9ablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnUzFSQmNIQkZZMjl0YldWeVkyVlRaWFIwYVc1bmN5NXBibWwwS0NrN1hISmNibjBwTzF4eVhHNGlYU3dpYm1GdFpYTWlPbHNpUzFSQmNIQkZZMjl0YldWeVkyVlRaWFIwYVc1bmN5SXNJbWx1YVhSR2IzSnRjeUlzSW1admNtMXpJaXdpWm05eVJXRmphQ0lzSW1admNtMUpaQ0lzSW1admNtMGlMQ0prYjJOMWJXVnVkQ0lzSW1kbGRFVnNaVzFsYm5SQ2VVbGtJaXdpY21WeGRXbHlaV1JHYVdWc1pITWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpWkdWMFpXTjBaV1JHYVdWc1pDSXNJblpoYkdsa1lYUnBiMjVHYVdWc1pITWlMQ0ptYVdWc1pITWlMQ0p3YkhWbmFXNXpJaXdpZEhKcFoyZGxjaUlzSWtadmNtMVdZV3hwWkdGMGFXOXVJaXdpVkhKcFoyZGxjaUlzSW1KdmIzUnpkSEpoY0NJc0lrSnZiM1J6ZEhKaGNEVWlMQ0p5YjNkVFpXeGxZM1J2Y2lJc0ltVnNaVWx1ZG1Gc2FXUkRiR0Z6Y3lJc0ltVnNaVlpoYkdsa1EyeGhjM01pTENKbGJDSXNJbWx1Y0hWMElpd2lZMnh2YzJWemRDSXNJbkYxWlhKNVUyVnNaV04wYjNJaUxDSjBaWGgwWVhKbFlTSXNJbk5sYkdWamRDSXNJbTVoYldVaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKMllXeHBaR0YwYjNKeklpd2libTkwUlcxd2RIa2lMQ0p0WlhOellXZGxJaXdpYVc1dVpYSlVaWGgwSWl3aWRtRnNhV1JoZEc5eUlpd2labTl5YlZaaGJHbGtZWFJwYjI0aUxDSnpkV0p0YVhSQ2RYUjBiMjRpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aVpTSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2lkbUZzYVdSaGRHVWlMQ0owYUdWdUlpd2ljM1JoZEhWeklpd2lZMjl1YzI5c1pTSXNJbXh2WnlJc0luTmxkRUYwZEhKcFluVjBaU0lzSW1ScGMyRmliR1ZrSWl3aWMyVjBWR2x0Wlc5MWRDSXNJbkpsYlc5MlpVRjBkSEpwWW5WMFpTSXNJbE4zWVd3aUxDSm1hWEpsSWl3aWRHVjRkQ0lzSW1samIyNGlMQ0ppZFhSMGIyNXpVM1I1YkdsdVp5SXNJbU52Ym1acGNtMUNkWFIwYjI1VVpYaDBJaXdpWTNWemRHOXRRMnhoYzNNaUxDSmpiMjVtYVhKdFFuVjBkRzl1SWl3aWFXNXBkRlJoWjJsbWVTSXNJbVZzWlcxbGJuUnpJaXdpWld4bGJXVnVkQ0lzSWxSaFoybG1lU0lzSW1sdWFYUlRaV3hsWTNReVJteGhaM01pTENKdmNIUnBiMjVHYjNKdFlYUWlMQ0pwZEdWdElpd2lhV1FpTENKemNHRnVJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJblJsYlhCc1lYUmxJaXdpYVc1dVpYSklWRTFNSWl3aUpDSXNJbk5sYkdWamRESWlMQ0p3YkdGalpXaHZiR1JsY2lJc0ltMXBibWx0ZFcxU1pYTjFiSFJ6Um05eVUyVmhjbU5vSWl3aVNXNW1hVzVwZEhraUxDSjBaVzF3YkdGMFpWTmxiR1ZqZEdsdmJpSXNJblJsYlhCc1lYUmxVbVZ6ZFd4MElpd2lhVzVwZENJc0lrdFVWWFJwYkNJc0ltOXVSRTlOUTI5dWRHVnVkRXh2WVdSbFpDSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvZWNvbW1lcmNlL3NldHRpbmdzL3NldHRpbmdzLmpzXFxuXCIpO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdC8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbC1zb3VyY2UtbWFwIGRldnRvb2wgaXMgdXNlZC5cbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1tcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL2Vjb21tZXJjZS9zZXR0aW5ncy9zZXR0aW5ncy5qc1wiXSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIH0pKClcbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFTLENBQUMsWUFBTTtFQUFFO0VBQ2xCO0VBQVUsWUFBWTs7RUFDdEI7RUFBVSxJQUFJQSxtQkFBbUIsR0FBSTtJQUVyQyxLQUFNLHVFQUF1RTtJQUM3RTtBQUNBO0FBQ0E7SUFDQTtJQUFPLFNBQUFDLDJEQUFBLEVBQU07TUFFYkMsSUFBSSxDQUFDLGt6cUJBQWt6cUIsQ0FBQzs7TUFFeHpxQjtJQUFNLENBQUM7O0lBRVA7RUFBVSxDQUFFO0VBQ1o7RUFDQTtFQUNBLFNBQVU7RUFDVixTQUFVO0VBQ1YsU0FBVTtFQUNWO0VBQVUsSUFBSUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDO0VBQVVILG1CQUFtQixDQUFDLHVFQUF1RSxDQUFDLENBQUMsQ0FBQztFQUN4RztFQUNBO0FBQVMsQ0FBQyxFQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9kZW1vMS9qcy9jdXN0b20vYXBwcy9lY29tbWVyY2Uvc2V0dGluZ3Mvc2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/ecommerce/settings/settings.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/ecommerce/settings/settings.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/ecommerce/settings/settings.js"]();
/******/ 	
/******/ })()
;