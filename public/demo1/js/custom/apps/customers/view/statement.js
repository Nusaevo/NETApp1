/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/customers/view/statement.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/customers/view/statement.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTCustomerViewStatements = function () {\n  // Private functions\n  // Init current year datatable\n  var initStatementYearCurrent = function initStatementYearCurrent() {\n    // Define table element\n    var id = '#kt_customer_view_statement_table_1';\n    var table = document.querySelector(id);\n\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[0].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 1st column in table\n      dateRow[0].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    var datatable = $(id).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 0 (download)\n      ]\n    });\n  };\n\n  // Init year 2020 datatable\n  var initStatementYear2020 = function initStatementYear2020() {\n    // Define table element\n    var id = '#kt_customer_view_statement_table_2';\n    var table = document.querySelector(id);\n\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[0].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 1st column in table\n      dateRow[0].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    var datatable = $(id).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 0 (download)\n      ]\n    });\n  };\n\n  // Init year 2019 datatable\n  var initStatementYear2019 = function initStatementYear2019() {\n    // Define table element\n    var id = '#kt_customer_view_statement_table_3';\n    var table = document.querySelector(id);\n\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[0].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 1st column in table\n      dateRow[0].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    var datatable = $(id).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 0 (download)\n      ]\n    });\n  };\n\n  // Init year 2018 datatable\n  var initStatementYear2018 = function initStatementYear2018() {\n    // Define table element\n    var id = '#kt_customer_view_statement_table_4';\n    var table = document.querySelector(id);\n\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[0].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 1st column in table\n      dateRow[0].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    var datatable = $(id).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 10,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 0 (download)\n      ]\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      initStatementYearCurrent();\n      initStatementYear2020();\n      initStatementYear2019();\n      initStatementYear2018();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTCustomerViewStatements.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/customers/view/statement.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/customers/view/statement.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/customers/view/statement.js ***!
  \***************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/apps/customers/view/statement.js\": (\n    /*!**************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/apps/customers/view/statement.js ***!\n      \\**************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAppsCustomersViewStatementJs() {\n      eval(\" // Class definition\\n\\nvar KTCustomerViewStatements = function () {\\n  // Private functions\\n  // Init current year datatable\\n  var initStatementYearCurrent = function initStatementYearCurrent() {\\n    // Define table element\\n    var id = '#kt_customer_view_statement_table_1';\\n    var table = document.querySelector(id); // Set date data order\\n\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[0].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 1st column in table\\n\\n      dateRow[0].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    var datatable = $(id).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 0 (download)\\n      ]\\n    });\\n  }; // Init year 2020 datatable\\n\\n\\n  var initStatementYear2020 = function initStatementYear2020() {\\n    // Define table element\\n    var id = '#kt_customer_view_statement_table_2';\\n    var table = document.querySelector(id); // Set date data order\\n\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[0].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 1st column in table\\n\\n      dateRow[0].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    var datatable = $(id).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 0 (download)\\n      ]\\n    });\\n  }; // Init year 2019 datatable\\n\\n\\n  var initStatementYear2019 = function initStatementYear2019() {\\n    // Define table element\\n    var id = '#kt_customer_view_statement_table_3';\\n    var table = document.querySelector(id); // Set date data order\\n\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[0].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 1st column in table\\n\\n      dateRow[0].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    var datatable = $(id).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 0 (download)\\n      ]\\n    });\\n  }; // Init year 2018 datatable\\n\\n\\n  var initStatementYear2018 = function initStatementYear2018() {\\n    // Define table element\\n    var id = '#kt_customer_view_statement_table_4';\\n    var table = document.querySelector(id); // Set date data order\\n\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[0].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 1st column in table\\n\\n      dateRow[0].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    var datatable = $(id).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 10,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 0 (download)\\n      ]\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      initStatementYearCurrent();\\n      initStatementYear2020();\\n      initStatementYear2019();\\n      initStatementYear2018();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCustomerViewStatements.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/customers/view/statement.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/customers/view/statement.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/customers/view/statement.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/customers/view/statement.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/customers/view/statement.js"]();
/******/ 	
/******/ })()
;