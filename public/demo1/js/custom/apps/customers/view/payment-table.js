/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/customers/view/payment-table.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/customers/view/payment-table.js ***!
  \******************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTCustomerViewPaymentTable = function () {\n  // Define shared variables\n  var datatable;\n  var table = document.querySelector('#kt_table_customers_payment');\n\n  // Private functions\n  var initCustomerView = function initCustomerView() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[3].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\n      dateRow[3].setAttribute('data-order', realDate);\n    });\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 5,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 5 (actions)\n      ]\n    });\n  };\n\n  // Delete customer\n  var deleteRows = function deleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-customer-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Select parent row\n        var parent = e.target.closest('tr');\n\n        // Get customer name\n        var invoiceNumber = parent.querySelectorAll('td')[0].innerText;\n\n        // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + invoiceNumber + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + invoiceNumber + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            }).then(function () {\n              // Detect checked checkboxes\n              toggleToolbars();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      if (!table) {\n        return;\n      }\n      initCustomerView();\n      deleteRows();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTCustomerViewPaymentTable.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/customers/view/payment-table.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/customers/view/payment-table.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/customers/view/payment-table.js ***!
  \*******************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/apps/customers/view/payment-table.js\": (\n    /*!******************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/apps/customers/view/payment-table.js ***!\n      \\******************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAppsCustomersViewPaymentTableJs() {\n      eval(\" // Class definition\\n\\nvar KTCustomerViewPaymentTable = function () {\\n  // Define shared variables\\n  var datatable;\\n  var table = document.querySelector('#kt_table_customers_payment'); // Private functions\\n\\n  var initCustomerView = function initCustomerView() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[3].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 4th column in table\\n\\n      dateRow[3].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 5,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 5 (actions)\\n      ]\\n    });\\n  }; // Delete customer\\n\\n\\n  var deleteRows = function deleteRows() {\\n    // Select all delete buttons\\n    var deleteButtons = table.querySelectorAll('[data-kt-customer-table-filter=\\\"delete_row\\\"]');\\n    deleteButtons.forEach(function (d) {\\n      // Delete button on click\\n      d.addEventListener('click', function (e) {\\n        e.preventDefault(); // Select parent row\\n\\n        var parent = e.target.closest('tr'); // Get customer name\\n\\n        var invoiceNumber = parent.querySelectorAll('td')[0].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n        Swal.fire({\\n          text: \\\"Are you sure you want to delete \\\" + invoiceNumber + \\\"?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete!\\\",\\n          cancelButtonText: \\\"No, cancel\\\",\\n          customClass: {\\n            confirmButton: \\\"btn fw-bold btn-danger\\\",\\n            cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            Swal.fire({\\n              text: \\\"You have deleted \\\" + invoiceNumber + \\\"!.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            }).then(function () {\\n              // Remove current row\\n              datatable.row($(parent)).remove().draw();\\n            }).then(function () {\\n              // Detect checked checkboxes\\n              toggleToolbars();\\n            });\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: customerName + \\\" was not deleted.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      if (!table) {\\n        return;\\n      }\\n\\n      initCustomerView();\\n      deleteRows();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCustomerViewPaymentTable.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/customers/view/payment-table.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/customers/view/payment-table.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/customers/view/payment-table.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/customers/view/payment-table.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/customers/view/payment-table.js"]();
/******/ 	
/******/ })()
;