/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/calendar/calendar.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/calendar/calendar.js ***!
  \*******************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTAppCalendar = function () {\n  // Shared variables\n  // Calendar variables\n  var calendar;\n  var data = {\n    id: '',\n    eventName: '',\n    eventDescription: '',\n    eventLocation: '',\n    startDate: '',\n    endDate: '',\n    allDay: false\n  };\n  var popover;\n  var popoverState = false; // Add event variables\n\n  var eventName;\n  var eventDescription;\n  var eventLocation;\n  var startDatepicker;\n  var startFlatpickr;\n  var endDatepicker;\n  var endFlatpickr;\n  var startTimepicker;\n  var startTimeFlatpickr;\n  var endTimepicker;\n  var endTimeFlatpickr;\n  var modal;\n  var modalTitle;\n  var form;\n  var validator;\n  var addButton;\n  var submitButton;\n  var cancelButton;\n  var closeButton; // View event variables\n\n  var viewEventName;\n  var viewAllDay;\n  var viewEventDescription;\n  var viewEventLocation;\n  var viewStartDate;\n  var viewEndDate;\n  var viewModal;\n  var viewEditButton;\n  var viewDeleteButton; // Private functions\n\n  var initCalendarApp = function initCalendarApp() {\n    // Define variables\n    var calendarEl = document.getElementById('kt_calendar_app');\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD'); // Init calendar --- more info: https://fullcalendar.io/docs/initialize-globals\n\n    calendar = new FullCalendar.Calendar(calendarEl, {\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialDate: TODAY,\n      navLinks: true,\n      // can click day/week names to navigate views\n      selectable: true,\n      selectMirror: true,\n      // Select dates action --- more info: https://fullcalendar.io/docs/select-callback\n      select: function select(arg) {\n        hidePopovers();\n        formatArgs(arg);\n        handleNewEvent();\n      },\n      // Click event --- more info: https://fullcalendar.io/docs/eventClick\n      eventClick: function eventClick(arg) {\n        hidePopovers();\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        });\n        handleViewEvent();\n      },\n      // MouseEnter event --- more info: https://fullcalendar.io/docs/eventMouseEnter\n      eventMouseEnter: function eventMouseEnter(arg) {\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        }); // Show popover preview\n\n        initPopovers(arg.el);\n      },\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      events: [{\n        id: uid(),\n        title: 'All Day Event',\n        start: YM + '-01',\n        end: YM + '-02',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\",\n        location: 'Federation Square'\n      }, {\n        id: uid(),\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14T14:30:00',\n        className: \"fc-event-success\",\n        location: 'Meeting Room 7.03'\n      }, {\n        id: uid(),\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\",\n        location: 'Seoul, Korea'\n      }, {\n        id: uid(),\n        title: 'ICT Expo 2021 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\",\n        location: 'Melbourne Exhibition Hall'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-13',\n        location: 'Squire\\'s Loft'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        end: YM + '-09T17:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\",\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00',\n        end: YM + '-16T17:00:00',\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\",\n        location: 'Conference Hall A'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore',\n        location: 'Meeting Room 11.06'\n      }, {\n        id: uid(),\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        end: TODAY + 'T14:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore',\n        location: 'Cafeteria'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        end: TODAY + 'T15:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing',\n        location: 'Meeting Room 11.10'\n      }, {\n        id: uid(),\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        end: TODAY + 'T21:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: TOMORROW + 'T18:00:00',\n        end: TOMORROW + 'T21:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing',\n        location: 'New York Steakhouse'\n      }, {\n        id: uid(),\n        title: 'Birthday Party',\n        start: TOMORROW + 'T12:00:00',\n        end: TOMORROW + 'T14:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Site visit',\n        start: YM + '-28',\n        end: YM + '-29',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore',\n        location: '271, Spring Street'\n      }],\n      // Reset popovers when changing calendar views --- more info: https://fullcalendar.io/docs/datesSet\n      datesSet: function datesSet() {\n        hidePopovers();\n      }\n    });\n    calendar.render();\n  }; // Initialize popovers --- more info: https://getbootstrap.com/docs/4.0/components/popovers/\n\n\n  var initPopovers = function initPopovers(element) {\n    hidePopovers(); // Generate popover content\n\n    var startDate = data.allDay ? moment(data.startDate).format('Do MMM, YYYY') : moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n    var endDate = data.allDay ? moment(data.endDate).format('Do MMM, YYYY') : moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    var popoverHtml = '<div class=\"fw-bolder mb-2\">' + data.eventName + '</div><div class=\"fs-7\"><span class=\"fw-bold\">Start:</span> ' + startDate + '</div><div class=\"fs-7 mb-4\"><span class=\"fw-bold\">End:</span> ' + endDate + '</div><div id=\"kt_calendar_event_view_button\" type=\"button\" class=\"btn btn-sm btn-light-primary\">View More</div>'; // Popover options\n\n    var options = {\n      container: 'body',\n      trigger: 'manual',\n      boundary: 'window',\n      placement: 'auto',\n      dismiss: true,\n      html: true,\n      title: 'Event Summary',\n      content: popoverHtml\n    }; // Initialize popover\n\n    popover = KTApp.initBootstrapPopover(element, options); // Show popover\n\n    popover.show(); // Update popover state\n\n    popoverState = true; // Open view event modal\n\n    handleViewButton();\n  }; // Hide active popovers\n\n\n  var hidePopovers = function hidePopovers() {\n    if (popoverState) {\n      popover.dispose();\n      popoverState = false;\n    }\n  }; // Init validator\n\n\n  var initValidator = function initValidator() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'calendar_event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'calendar_event_start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        },\n        'calendar_event_end_date': {\n          validators: {\n            notEmpty: {\n              message: 'End date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n  }; // Initialize datepickers --- more info: https://flatpickr.js.org/\n\n\n  var initDatepickers = function initDatepickers() {\n    startFlatpickr = flatpickr(startDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    endFlatpickr = flatpickr(endDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    startTimeFlatpickr = flatpickr(startTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n    endTimeFlatpickr = flatpickr(endTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n  }; // Handle add button\n\n\n  var handleAddButton = function handleAddButton() {\n    addButton.addEventListener('click', function (e) {\n      hidePopovers(); // Reset form data\n\n      data = {\n        id: '',\n        eventName: '',\n        eventDescription: '',\n        startDate: new Date(),\n        endDate: new Date(),\n        allDay: false\n      };\n      handleNewEvent();\n    });\n  }; // Handle add new event\n\n\n  var handleNewEvent = function handleNewEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Add a New Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle edit event\n\n\n  var handleEditEvent = function handleEditEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Edit an Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Remove old event\n\n                  calendar.getEventById(data.id).remove(); // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle view event\n\n\n  var handleViewEvent = function handleViewEvent() {\n    viewModal.show(); // Detect all day event\n\n    var eventNameMod;\n    var startDateMod;\n    var endDateMod; // Generate labels\n\n    if (data.allDay) {\n      eventNameMod = 'All Day';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY');\n    } else {\n      eventNameMod = '';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    } // Populate view data\n\n\n    viewEventName.innerText = data.eventName;\n    viewAllDay.innerText = eventNameMod;\n    viewEventDescription.innerText = data.eventDescription ? data.eventDescription : '--';\n    viewEventLocation.innerText = data.eventLocation ? data.eventLocation : '--';\n    viewStartDate.innerText = startDateMod;\n    viewEndDate.innerText = endDateMod;\n  }; // Handle delete event\n\n\n  var handleDeleteEvent = function handleDeleteEvent() {\n    viewDeleteButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to delete this event?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          calendar.getEventById(data.id).remove();\n          viewModal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your event was not deleted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle edit button\n\n\n  var handleEditButton = function handleEditButton() {\n    viewEditButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      viewModal.hide();\n      handleEditEvent();\n    });\n  }; // Handle cancel button\n\n\n  var handleCancelButton = function handleCancelButton() {\n    // Edit event modal cancel button\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle close button\n\n\n  var handleCloseButton = function handleCloseButton() {\n    // Edit event modal close button\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle view button\n\n\n  var handleViewButton = function handleViewButton() {\n    var viewButton = document.querySelector('#kt_calendar_event_view_button');\n    viewButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      hidePopovers();\n      handleViewEvent();\n    });\n  }; // Helper functions\n  // Reset form validator on modal close\n\n\n  var resetFormValidator = function resetFormValidator(element) {\n    // Target modal hidden event --- For more info: https://getbootstrap.com/docs/5.0/components/modal/#events\n    element.addEventListener('hidden.bs.modal', function (e) {\n      if (validator) {\n        // Reset form validator. For more info: https://formvalidation.io/guide/api/reset-form\n        validator.resetForm(true);\n      }\n    });\n  }; // Populate form \n\n\n  var populateForm = function populateForm() {\n    eventName.value = data.eventName ? data.eventName : '';\n    eventDescription.value = data.eventDescription ? data.eventDescription : '';\n    eventLocation.value = data.eventLocation ? data.eventLocation : '';\n    startFlatpickr.setDate(data.startDate, true, 'Y-m-d'); // Handle null end dates\n\n    var endDate = data.endDate ? data.endDate : moment(data.startDate).format();\n    endFlatpickr.setDate(endDate, true, 'Y-m-d');\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n\n    if (data.allDay) {\n      allDayToggle.checked = true;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.add('d-none');\n      });\n    } else {\n      startTimeFlatpickr.setDate(data.startDate, true, 'Y-m-d H:i');\n      endTimeFlatpickr.setDate(data.endDate, true, 'Y-m-d H:i');\n      endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n      allDayToggle.checked = false;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.remove('d-none');\n      });\n    }\n  }; // Format FullCalendar reponses\n\n\n  var formatArgs = function formatArgs(res) {\n    data.id = res.id;\n    data.eventName = res.title;\n    data.eventDescription = res.description;\n    data.eventLocation = res.location;\n    data.startDate = res.startStr;\n    data.endDate = res.endStr;\n    data.allDay = res.allDay;\n  }; // Generate unique IDs for events\n\n\n  var uid = function uid() {\n    return Date.now().toString() + Math.floor(Math.random() * 1000).toString();\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Define variables\n      // Add event modal\n      var element = document.getElementById('kt_modal_add_event');\n      form = element.querySelector('#kt_modal_add_event_form');\n      eventName = form.querySelector('[name=\"calendar_event_name\"]');\n      eventDescription = form.querySelector('[name=\"calendar_event_description\"]');\n      eventLocation = form.querySelector('[name=\"calendar_event_location\"]');\n      startDatepicker = form.querySelector('#kt_calendar_datepicker_start_date');\n      endDatepicker = form.querySelector('#kt_calendar_datepicker_end_date');\n      startTimepicker = form.querySelector('#kt_calendar_datepicker_start_time');\n      endTimepicker = form.querySelector('#kt_calendar_datepicker_end_time');\n      addButton = document.querySelector('[data-kt-calendar=\"add\"]');\n      submitButton = form.querySelector('#kt_modal_add_event_submit');\n      cancelButton = form.querySelector('#kt_modal_add_event_cancel');\n      closeButton = element.querySelector('#kt_modal_add_event_close');\n      modalTitle = form.querySelector('[data-kt-calendar=\"title\"]');\n      modal = new bootstrap.Modal(element); // View event modal\n\n      var viewElement = document.getElementById('kt_modal_view_event');\n      viewModal = new bootstrap.Modal(viewElement);\n      viewEventName = viewElement.querySelector('[data-kt-calendar=\"event_name\"]');\n      viewAllDay = viewElement.querySelector('[data-kt-calendar=\"all_day\"]');\n      viewEventDescription = viewElement.querySelector('[data-kt-calendar=\"event_description\"]');\n      viewEventLocation = viewElement.querySelector('[data-kt-calendar=\"event_location\"]');\n      viewStartDate = viewElement.querySelector('[data-kt-calendar=\"event_start_date\"]');\n      viewEndDate = viewElement.querySelector('[data-kt-calendar=\"event_end_date\"]');\n      viewEditButton = viewElement.querySelector('#kt_modal_view_event_edit');\n      viewDeleteButton = viewElement.querySelector('#kt_modal_view_event_delete');\n      initCalendarApp();\n      initValidator();\n      initDatepickers();\n      handleEditButton();\n      handleAddButton();\n      handleDeleteEvent();\n      handleCancelButton();\n      handleCloseButton();\n      resetFormValidator(element);\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppCalendar.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/calendar/calendar.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/calendar/calendar.js":
/*!********************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/calendar/calendar.js ***!
  \********************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/calendar/calendar.js\":\n    /*!*******************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/calendar/calendar.js ***!\r\n      \\*******************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsCalendarCalendarJs() {\n      eval(\" // Class definition\\n\\nvar KTAppCalendar = function () {\\n  // Shared variables\\n  // Calendar variables\\n  var calendar;\\n  var data = {\\n    id: '',\\n    eventName: '',\\n    eventDescription: '',\\n    eventLocation: '',\\n    startDate: '',\\n    endDate: '',\\n    allDay: false\\n  };\\n  var popover;\\n  var popoverState = false; // Add event variables\\n\\n  var eventName;\\n  var eventDescription;\\n  var eventLocation;\\n  var startDatepicker;\\n  var startFlatpickr;\\n  var endDatepicker;\\n  var endFlatpickr;\\n  var startTimepicker;\\n  var startTimeFlatpickr;\\n  var endTimepicker;\\n  var endTimeFlatpickr;\\n  var modal;\\n  var modalTitle;\\n  var form;\\n  var validator;\\n  var addButton;\\n  var submitButton;\\n  var cancelButton;\\n  var closeButton; // View event variables\\n\\n  var viewEventName;\\n  var viewAllDay;\\n  var viewEventDescription;\\n  var viewEventLocation;\\n  var viewStartDate;\\n  var viewEndDate;\\n  var viewModal;\\n  var viewEditButton;\\n  var viewDeleteButton; // Private functions\\n\\n  var initCalendarApp = function initCalendarApp() {\\n    // Define variables\\n    var calendarEl = document.getElementById('kt_calendar_app');\\n    var todayDate = moment().startOf('day');\\n    var YM = todayDate.format('YYYY-MM');\\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\\n    var TODAY = todayDate.format('YYYY-MM-DD');\\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD'); // Init calendar --- more info: https://fullcalendar.io/docs/initialize-globals\\n\\n    calendar = new FullCalendar.Calendar(calendarEl, {\\n      headerToolbar: {\\n        left: 'prev,next today',\\n        center: 'title',\\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\\n      },\\n      initialDate: TODAY,\\n      navLinks: true,\\n      // can click day/week names to navigate views\\n      selectable: true,\\n      selectMirror: true,\\n      // Select dates action --- more info: https://fullcalendar.io/docs/select-callback\\n      select: function select(arg) {\\n        hidePopovers();\\n        formatArgs(arg);\\n        handleNewEvent();\\n      },\\n      // Click event --- more info: https://fullcalendar.io/docs/eventClick\\n      eventClick: function eventClick(arg) {\\n        hidePopovers();\\n        formatArgs({\\n          id: arg.event.id,\\n          title: arg.event.title,\\n          description: arg.event.extendedProps.description,\\n          location: arg.event.extendedProps.location,\\n          startStr: arg.event.startStr,\\n          endStr: arg.event.endStr,\\n          allDay: arg.event.allDay\\n        });\\n        handleViewEvent();\\n      },\\n      // MouseEnter event --- more info: https://fullcalendar.io/docs/eventMouseEnter\\n      eventMouseEnter: function eventMouseEnter(arg) {\\n        formatArgs({\\n          id: arg.event.id,\\n          title: arg.event.title,\\n          description: arg.event.extendedProps.description,\\n          location: arg.event.extendedProps.location,\\n          startStr: arg.event.startStr,\\n          endStr: arg.event.endStr,\\n          allDay: arg.event.allDay\\n        }); // Show popover preview\\n\\n        initPopovers(arg.el);\\n      },\\n      editable: true,\\n      dayMaxEvents: true,\\n      // allow \\\"more\\\" link when too many events\\n      events: [{\\n        id: uid(),\\n        title: 'All Day Event',\\n        start: YM + '-01',\\n        end: YM + '-02',\\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\\n        className: \\\"fc-event-danger fc-event-solid-warning\\\",\\n        location: 'Federation Square'\\n      }, {\\n        id: uid(),\\n        title: 'Reporting',\\n        start: YM + '-14T13:30:00',\\n        description: 'Lorem ipsum dolor incid idunt ut labore',\\n        end: YM + '-14T14:30:00',\\n        className: \\\"fc-event-success\\\",\\n        location: 'Meeting Room 7.03'\\n      }, {\\n        id: uid(),\\n        title: 'Company Trip',\\n        start: YM + '-02',\\n        description: 'Lorem ipsum dolor sit tempor incid',\\n        end: YM + '-03',\\n        className: \\\"fc-event-primary\\\",\\n        location: 'Seoul, Korea'\\n      }, {\\n        id: uid(),\\n        title: 'ICT Expo 2021 - Product Release',\\n        start: YM + '-03',\\n        description: 'Lorem ipsum dolor sit tempor inci',\\n        end: YM + '-05',\\n        className: \\\"fc-event-light fc-event-solid-primary\\\",\\n        location: 'Melbourne Exhibition Hall'\\n      }, {\\n        id: uid(),\\n        title: 'Dinner',\\n        start: YM + '-12',\\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\\n        end: YM + '-13',\\n        location: 'Squire\\\\'s Loft'\\n      }, {\\n        id: uid(),\\n        title: 'Repeating Event',\\n        start: YM + '-09T16:00:00',\\n        end: YM + '-09T17:00:00',\\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\\n        className: \\\"fc-event-danger\\\",\\n        location: 'General Area'\\n      }, {\\n        id: uid(),\\n        title: 'Repeating Event',\\n        description: 'Lorem ipsum dolor sit amet, labore',\\n        start: YM + '-16T16:00:00',\\n        end: YM + '-16T17:00:00',\\n        location: 'General Area'\\n      }, {\\n        id: uid(),\\n        title: 'Conference',\\n        start: YESTERDAY,\\n        end: TOMORROW,\\n        description: 'Lorem ipsum dolor eius mod tempor labore',\\n        className: \\\"fc-event-primary\\\",\\n        location: 'Conference Hall A'\\n      }, {\\n        id: uid(),\\n        title: 'Meeting',\\n        start: TODAY + 'T10:30:00',\\n        end: TODAY + 'T12:30:00',\\n        description: 'Lorem ipsum dolor eiu idunt ut labore',\\n        location: 'Meeting Room 11.06'\\n      }, {\\n        id: uid(),\\n        title: 'Lunch',\\n        start: TODAY + 'T12:00:00',\\n        end: TODAY + 'T14:00:00',\\n        className: \\\"fc-event-info\\\",\\n        description: 'Lorem ipsum dolor sit amet, ut labore',\\n        location: 'Cafeteria'\\n      }, {\\n        id: uid(),\\n        title: 'Meeting',\\n        start: TODAY + 'T14:30:00',\\n        end: TODAY + 'T15:30:00',\\n        className: \\\"fc-event-warning\\\",\\n        description: 'Lorem ipsum conse ctetur adipi scing',\\n        location: 'Meeting Room 11.10'\\n      }, {\\n        id: uid(),\\n        title: 'Happy Hour',\\n        start: TODAY + 'T17:30:00',\\n        end: TODAY + 'T21:30:00',\\n        className: \\\"fc-event-info\\\",\\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\\n        location: 'The English Pub'\\n      }, {\\n        id: uid(),\\n        title: 'Dinner',\\n        start: TOMORROW + 'T18:00:00',\\n        end: TOMORROW + 'T21:00:00',\\n        className: \\\"fc-event-solid-danger fc-event-light\\\",\\n        description: 'Lorem ipsum dolor sit ctetur adipi scing',\\n        location: 'New York Steakhouse'\\n      }, {\\n        id: uid(),\\n        title: 'Birthday Party',\\n        start: TOMORROW + 'T12:00:00',\\n        end: TOMORROW + 'T14:00:00',\\n        className: \\\"fc-event-primary\\\",\\n        description: 'Lorem ipsum dolor sit amet, scing',\\n        location: 'The English Pub'\\n      }, {\\n        id: uid(),\\n        title: 'Site visit',\\n        start: YM + '-28',\\n        end: YM + '-29',\\n        className: \\\"fc-event-solid-info fc-event-light\\\",\\n        description: 'Lorem ipsum dolor sit amet, labore',\\n        location: '271, Spring Street'\\n      }],\\n      // Reset popovers when changing calendar views --- more info: https://fullcalendar.io/docs/datesSet\\n      datesSet: function datesSet() {\\n        hidePopovers();\\n      }\\n    });\\n    calendar.render();\\n  }; // Initialize popovers --- more info: https://getbootstrap.com/docs/4.0/components/popovers/\\n\\n\\n  var initPopovers = function initPopovers(element) {\\n    hidePopovers(); // Generate popover content\\n\\n    var startDate = data.allDay ? moment(data.startDate).format('Do MMM, YYYY') : moment(data.startDate).format('Do MMM, YYYY - h:mm a');\\n    var endDate = data.allDay ? moment(data.endDate).format('Do MMM, YYYY') : moment(data.endDate).format('Do MMM, YYYY - h:mm a');\\n    var popoverHtml = '<div class=\\\"fw-bolder mb-2\\\">' + data.eventName + '</div><div class=\\\"fs-7\\\"><span class=\\\"fw-bold\\\">Start:</span> ' + startDate + '</div><div class=\\\"fs-7 mb-4\\\"><span class=\\\"fw-bold\\\">End:</span> ' + endDate + '</div><div id=\\\"kt_calendar_event_view_button\\\" type=\\\"button\\\" class=\\\"btn btn-sm btn-light-primary\\\">View More</div>'; // Popover options\\n\\n    var options = {\\n      container: 'body',\\n      trigger: 'manual',\\n      boundary: 'window',\\n      placement: 'auto',\\n      dismiss: true,\\n      html: true,\\n      title: 'Event Summary',\\n      content: popoverHtml\\n    }; // Initialize popover\\n\\n    popover = KTApp.initBootstrapPopover(element, options); // Show popover\\n\\n    popover.show(); // Update popover state\\n\\n    popoverState = true; // Open view event modal\\n\\n    handleViewButton();\\n  }; // Hide active popovers\\n\\n\\n  var hidePopovers = function hidePopovers() {\\n    if (popoverState) {\\n      popover.dispose();\\n      popoverState = false;\\n    }\\n  }; // Init validator\\n\\n\\n  var initValidator = function initValidator() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'calendar_event_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Event name is required'\\n            }\\n          }\\n        },\\n        'calendar_event_start_date': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Start date is required'\\n            }\\n          }\\n        },\\n        'calendar_event_end_date': {\\n          validators: {\\n            notEmpty: {\\n              message: 'End date is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    });\\n  }; // Initialize datepickers --- more info: https://flatpickr.js.org/\\n\\n\\n  var initDatepickers = function initDatepickers() {\\n    startFlatpickr = flatpickr(startDatepicker, {\\n      enableTime: false,\\n      dateFormat: \\\"Y-m-d\\\"\\n    });\\n    endFlatpickr = flatpickr(endDatepicker, {\\n      enableTime: false,\\n      dateFormat: \\\"Y-m-d\\\"\\n    });\\n    startTimeFlatpickr = flatpickr(startTimepicker, {\\n      enableTime: true,\\n      noCalendar: true,\\n      dateFormat: \\\"H:i\\\"\\n    });\\n    endTimeFlatpickr = flatpickr(endTimepicker, {\\n      enableTime: true,\\n      noCalendar: true,\\n      dateFormat: \\\"H:i\\\"\\n    });\\n  }; // Handle add button\\n\\n\\n  var handleAddButton = function handleAddButton() {\\n    addButton.addEventListener('click', function (e) {\\n      hidePopovers(); // Reset form data\\n\\n      data = {\\n        id: '',\\n        eventName: '',\\n        eventDescription: '',\\n        startDate: new Date(),\\n        endDate: new Date(),\\n        allDay: false\\n      };\\n      handleNewEvent();\\n    });\\n  }; // Handle add new event\\n\\n\\n  var handleNewEvent = function handleNewEvent() {\\n    // Update modal title\\n    modalTitle.innerText = \\\"Add a New Event\\\";\\n    modal.show(); // Select datepicker wrapper elements\\n\\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\\\"datepicker\\\"]'); // Handle all day toggle\\n\\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\\n    allDayToggle.addEventListener('click', function (e) {\\n      if (e.target.checked) {\\n        datepickerWrappers.forEach(function (dw) {\\n          dw.classList.add('d-none');\\n        });\\n      } else {\\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\\n        datepickerWrappers.forEach(function (dw) {\\n          dw.classList.remove('d-none');\\n        });\\n      }\\n    });\\n    populateForm(data); // Handle submit form\\n\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\\n\\n            submitButton.disabled = true; // Simulate form submission\\n\\n            setTimeout(function () {\\n              // Simulate form submission\\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"New event added to calendar!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide(); // Enable submit button after loading\\n\\n                  submitButton.disabled = false; // Detect if is all day event\\n\\n                  var allDayEvent = false;\\n\\n                  if (allDayToggle.checked) {\\n                    allDayEvent = true;\\n                  }\\n\\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\\n                    allDayEvent = true;\\n                  } // Merge date & time\\n\\n\\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\\n\\n                  if (!allDayEvent) {\\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\\n                    var endDate = startDate;\\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\\n                    startDateTime = startDate + 'T' + startTime;\\n                    endDateTime = endDate + 'T' + endTime;\\n                  } // Add new event to calendar\\n\\n\\n                  calendar.addEvent({\\n                    id: uid(),\\n                    title: eventName.value,\\n                    description: eventDescription.value,\\n                    location: eventLocation.value,\\n                    start: startDateTime,\\n                    end: endDateTime,\\n                    allDay: allDayEvent\\n                  });\\n                  calendar.render(); // Reset form for demo purposes only\\n\\n                  form.reset();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show popup warning \\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Handle edit event\\n\\n\\n  var handleEditEvent = function handleEditEvent() {\\n    // Update modal title\\n    modalTitle.innerText = \\\"Edit an Event\\\";\\n    modal.show(); // Select datepicker wrapper elements\\n\\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\\\"datepicker\\\"]'); // Handle all day toggle\\n\\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\\n    allDayToggle.addEventListener('click', function (e) {\\n      if (e.target.checked) {\\n        datepickerWrappers.forEach(function (dw) {\\n          dw.classList.add('d-none');\\n        });\\n      } else {\\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\\n        datepickerWrappers.forEach(function (dw) {\\n          dw.classList.remove('d-none');\\n        });\\n      }\\n    });\\n    populateForm(data); // Handle submit form\\n\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\\n\\n            submitButton.disabled = true; // Simulate form submission\\n\\n            setTimeout(function () {\\n              // Simulate form submission\\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"New event added to calendar!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide(); // Enable submit button after loading\\n\\n                  submitButton.disabled = false; // Remove old event\\n\\n                  calendar.getEventById(data.id).remove(); // Detect if is all day event\\n\\n                  var allDayEvent = false;\\n\\n                  if (allDayToggle.checked) {\\n                    allDayEvent = true;\\n                  }\\n\\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\\n                    allDayEvent = true;\\n                  } // Merge date & time\\n\\n\\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\\n\\n                  if (!allDayEvent) {\\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\\n                    var endDate = startDate;\\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\\n                    startDateTime = startDate + 'T' + startTime;\\n                    endDateTime = endDate + 'T' + endTime;\\n                  } // Add new event to calendar\\n\\n\\n                  calendar.addEvent({\\n                    id: uid(),\\n                    title: eventName.value,\\n                    description: eventDescription.value,\\n                    location: eventLocation.value,\\n                    start: startDateTime,\\n                    end: endDateTime,\\n                    allDay: allDayEvent\\n                  });\\n                  calendar.render(); // Reset form for demo purposes only\\n\\n                  form.reset();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show popup warning \\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Handle view event\\n\\n\\n  var handleViewEvent = function handleViewEvent() {\\n    viewModal.show(); // Detect all day event\\n\\n    var eventNameMod;\\n    var startDateMod;\\n    var endDateMod; // Generate labels\\n\\n    if (data.allDay) {\\n      eventNameMod = 'All Day';\\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY');\\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY');\\n    } else {\\n      eventNameMod = '';\\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY - h:mm a');\\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY - h:mm a');\\n    } // Populate view data\\n\\n\\n    viewEventName.innerText = data.eventName;\\n    viewAllDay.innerText = eventNameMod;\\n    viewEventDescription.innerText = data.eventDescription ? data.eventDescription : '--';\\n    viewEventLocation.innerText = data.eventLocation ? data.eventLocation : '--';\\n    viewStartDate.innerText = startDateMod;\\n    viewEndDate.innerText = endDateMod;\\n  }; // Handle delete event\\n\\n\\n  var handleDeleteEvent = function handleDeleteEvent() {\\n    viewDeleteButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to delete this event?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          calendar.getEventById(data.id).remove();\\n          viewModal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your event was not deleted!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Handle edit button\\n\\n\\n  var handleEditButton = function handleEditButton() {\\n    viewEditButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      viewModal.hide();\\n      handleEditEvent();\\n    });\\n  }; // Handle cancel button\\n\\n\\n  var handleCancelButton = function handleCancelButton() {\\n    // Edit event modal cancel button\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Handle close button\\n\\n\\n  var handleCloseButton = function handleCloseButton() {\\n    // Edit event modal close button\\n    closeButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Handle view button\\n\\n\\n  var handleViewButton = function handleViewButton() {\\n    var viewButton = document.querySelector('#kt_calendar_event_view_button');\\n    viewButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      hidePopovers();\\n      handleViewEvent();\\n    });\\n  }; // Helper functions\\n  // Reset form validator on modal close\\n\\n\\n  var resetFormValidator = function resetFormValidator(element) {\\n    // Target modal hidden event --- For more info: https://getbootstrap.com/docs/5.0/components/modal/#events\\n    element.addEventListener('hidden.bs.modal', function (e) {\\n      if (validator) {\\n        // Reset form validator. For more info: https://formvalidation.io/guide/api/reset-form\\n        validator.resetForm(true);\\n      }\\n    });\\n  }; // Populate form \\n\\n\\n  var populateForm = function populateForm() {\\n    eventName.value = data.eventName ? data.eventName : '';\\n    eventDescription.value = data.eventDescription ? data.eventDescription : '';\\n    eventLocation.value = data.eventLocation ? data.eventLocation : '';\\n    startFlatpickr.setDate(data.startDate, true, 'Y-m-d'); // Handle null end dates\\n\\n    var endDate = data.endDate ? data.endDate : moment(data.startDate).format();\\n    endFlatpickr.setDate(endDate, true, 'Y-m-d');\\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\\\"datepicker\\\"]');\\n\\n    if (data.allDay) {\\n      allDayToggle.checked = true;\\n      datepickerWrappers.forEach(function (dw) {\\n        dw.classList.add('d-none');\\n      });\\n    } else {\\n      startTimeFlatpickr.setDate(data.startDate, true, 'Y-m-d H:i');\\n      endTimeFlatpickr.setDate(data.endDate, true, 'Y-m-d H:i');\\n      endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\\n      allDayToggle.checked = false;\\n      datepickerWrappers.forEach(function (dw) {\\n        dw.classList.remove('d-none');\\n      });\\n    }\\n  }; // Format FullCalendar reponses\\n\\n\\n  var formatArgs = function formatArgs(res) {\\n    data.id = res.id;\\n    data.eventName = res.title;\\n    data.eventDescription = res.description;\\n    data.eventLocation = res.location;\\n    data.startDate = res.startStr;\\n    data.endDate = res.endStr;\\n    data.allDay = res.allDay;\\n  }; // Generate unique IDs for events\\n\\n\\n  var uid = function uid() {\\n    return Date.now().toString() + Math.floor(Math.random() * 1000).toString();\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Define variables\\n      // Add event modal\\n      var element = document.getElementById('kt_modal_add_event');\\n      form = element.querySelector('#kt_modal_add_event_form');\\n      eventName = form.querySelector('[name=\\\"calendar_event_name\\\"]');\\n      eventDescription = form.querySelector('[name=\\\"calendar_event_description\\\"]');\\n      eventLocation = form.querySelector('[name=\\\"calendar_event_location\\\"]');\\n      startDatepicker = form.querySelector('#kt_calendar_datepicker_start_date');\\n      endDatepicker = form.querySelector('#kt_calendar_datepicker_end_date');\\n      startTimepicker = form.querySelector('#kt_calendar_datepicker_start_time');\\n      endTimepicker = form.querySelector('#kt_calendar_datepicker_end_time');\\n      addButton = document.querySelector('[data-kt-calendar=\\\"add\\\"]');\\n      submitButton = form.querySelector('#kt_modal_add_event_submit');\\n      cancelButton = form.querySelector('#kt_modal_add_event_cancel');\\n      closeButton = element.querySelector('#kt_modal_add_event_close');\\n      modalTitle = form.querySelector('[data-kt-calendar=\\\"title\\\"]');\\n      modal = new bootstrap.Modal(element); // View event modal\\n\\n      var viewElement = document.getElementById('kt_modal_view_event');\\n      viewModal = new bootstrap.Modal(viewElement);\\n      viewEventName = viewElement.querySelector('[data-kt-calendar=\\\"event_name\\\"]');\\n      viewAllDay = viewElement.querySelector('[data-kt-calendar=\\\"all_day\\\"]');\\n      viewEventDescription = viewElement.querySelector('[data-kt-calendar=\\\"event_description\\\"]');\\n      viewEventLocation = viewElement.querySelector('[data-kt-calendar=\\\"event_location\\\"]');\\n      viewStartDate = viewElement.querySelector('[data-kt-calendar=\\\"event_start_date\\\"]');\\n      viewEndDate = viewElement.querySelector('[data-kt-calendar=\\\"event_end_date\\\"]');\\n      viewEditButton = viewElement.querySelector('#kt_modal_view_event_edit');\\n      viewDeleteButton = viewElement.querySelector('#kt_modal_view_event_delete');\\n      initCalendarApp();\\n      initValidator();\\n      initDatepickers();\\n      handleEditButton();\\n      handleAddButton();\\n      handleDeleteEvent();\\n      handleCancelButton();\\n      handleCloseButton();\\n      resetFormValidator(element);\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAppCalendar.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvY2FsZW5kYXIvY2FsZW5kYXIuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsYUFBYSxHQUFHLFlBQVk7QUFDNUI7QUFDQTtBQUNBLE1BQUlDLFFBQUo7QUFDQSxNQUFJQyxJQUFJLEdBQUc7QUFDUEMsSUFBQUEsRUFBRSxFQUFFLEVBREc7QUFFUEMsSUFBQUEsU0FBUyxFQUFFLEVBRko7QUFHUEMsSUFBQUEsZ0JBQWdCLEVBQUUsRUFIWDtBQUlQQyxJQUFBQSxhQUFhLEVBQUUsRUFKUjtBQUtQQyxJQUFBQSxTQUFTLEVBQUUsRUFMSjtBQU1QQyxJQUFBQSxPQUFPLEVBQUUsRUFORjtBQU9QQyxJQUFBQSxNQUFNLEVBQUU7QUFQRCxHQUFYO0FBU0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLFlBQVksR0FBRyxLQUFuQixDQWQ0QixDQWdCNUI7O0FBQ0EsTUFBSVAsU0FBSjtBQUNBLE1BQUlDLGdCQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlNLGVBQUo7QUFDQSxNQUFJQyxjQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxlQUFKO0FBQ0EsTUFBSUMsa0JBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSUMsZ0JBQUo7QUFDQSxNQUFJQyxLQUFKO0FBQ0EsTUFBSUMsVUFBSjtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxZQUFKO0FBQ0EsTUFBSUMsV0FBSixDQW5DNEIsQ0FxQzVCOztBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsb0JBQUo7QUFDQSxNQUFJQyxpQkFBSjtBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJQyxXQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLGNBQUo7QUFDQSxNQUFJQyxnQkFBSixD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QUFBLGdCQUFnQixHQUFHNEosV0FBVyxDQUFDOUQsYUFBWixDQUEwQiw2QkFBMUIsQ0FBbkI7QUFFQTdGLE1BQUFBLGVBQWU7QUFDZmtFLE1BQUFBLGFBQWE7QUFDYmMsTUFBQUEsZUFBZTtBQUNmNkQsTUFBQUEsZ0JBQWdCO0FBQ2hCeEQsTUFBQUEsZUFBZTtBQUNmcUQsTUFBQUEsaUJBQWlCO0FBQ2pCSSxNQUFBQSxrQkFBa0I7QUFDbEJDLE1BQUFBLGlCQUFpQjtBQUNqQkUsTUFBQUEsa0JBQWtCLENBQUM5RixPQUFELENBQWxCO0FBQ0g7QUExQ0UsR0FBUDtBQTRDSCxDQXIzQm1CLEVBQXBCLEMsQ0F1M0JBOzs7QUFDQXlHLE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEIsWUFBWTtBQUNsQ2xNLEVBQUFBLGFBQWEsQ0FBQzhMLElBQWQ7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL2NhbGVuZGFyL2NhbGVuZGFyLmpzPzQ0ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVEFwcENhbGVuZGFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hhcmVkIHZhcmlhYmxlc1xyXG4gICAgLy8gQ2FsZW5kYXIgdmFyaWFibGVzXHJcbiAgICB2YXIgY2FsZW5kYXI7XHJcbiAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgZXZlbnROYW1lOiAnJyxcclxuICAgICAgICBldmVudERlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICBldmVudExvY2F0aW9uOiAnJyxcclxuICAgICAgICBzdGFydERhdGU6ICcnLFxyXG4gICAgICAgIGVuZERhdGU6ICcnLFxyXG4gICAgICAgIGFsbERheTogZmFsc2VcclxuICAgIH07XHJcbiAgICB2YXIgcG9wb3ZlcjtcclxuICAgIHZhciBwb3BvdmVyU3RhdGUgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgdmFyaWFibGVzXHJcbiAgICB2YXIgZXZlbnROYW1lO1xyXG4gICAgdmFyIGV2ZW50RGVzY3JpcHRpb247XHJcbiAgICB2YXIgZXZlbnRMb2NhdGlvbjtcclxuICAgIHZhciBzdGFydERhdGVwaWNrZXI7XHJcbiAgICB2YXIgc3RhcnRGbGF0cGlja3I7XHJcbiAgICB2YXIgZW5kRGF0ZXBpY2tlcjtcclxuICAgIHZhciBlbmRGbGF0cGlja3I7XHJcbiAgICB2YXIgc3RhcnRUaW1lcGlja2VyO1xyXG4gICAgdmFyIHN0YXJ0VGltZUZsYXRwaWNrcjtcclxuICAgIHZhciBlbmRUaW1lcGlja2VyXHJcbiAgICB2YXIgZW5kVGltZUZsYXRwaWNrcjtcclxuICAgIHZhciBtb2RhbDtcclxuICAgIHZhciBtb2RhbFRpdGxlO1xyXG4gICAgdmFyIGZvcm07XHJcbiAgICB2YXIgdmFsaWRhdG9yO1xyXG4gICAgdmFyIGFkZEJ1dHRvbjtcclxuICAgIHZhciBzdWJtaXRCdXR0b247XHJcbiAgICB2YXIgY2FuY2VsQnV0dG9uO1xyXG4gICAgdmFyIGNsb3NlQnV0dG9uO1xyXG5cclxuICAgIC8vIFZpZXcgZXZlbnQgdmFyaWFibGVzXHJcbiAgICB2YXIgdmlld0V2ZW50TmFtZTtcclxuICAgIHZhciB2aWV3QWxsRGF5O1xyXG4gICAgdmFyIHZpZXdFdmVudERlc2NyaXB0aW9uO1xyXG4gICAgdmFyIHZpZXdFdmVudExvY2F0aW9uO1xyXG4gICAgdmFyIHZpZXdTdGFydERhdGU7XHJcbiAgICB2YXIgdmlld0VuZERhdGU7XHJcbiAgICB2YXIgdmlld01vZGFsO1xyXG4gICAgdmFyIHZpZXdFZGl0QnV0dG9uO1xyXG4gICAgdmFyIHZpZXdEZWxldGVCdXR0b247XHJcblxyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgaW5pdENhbGVuZGFyQXBwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERlZmluZSB2YXJpYWJsZXNcclxuICAgICAgICB2YXIgY2FsZW5kYXJFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9jYWxlbmRhcl9hcHAnKTtcclxuICAgICAgICB2YXIgdG9kYXlEYXRlID0gbW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XHJcbiAgICAgICAgdmFyIFlNID0gdG9kYXlEYXRlLmZvcm1hdCgnWVlZWS1NTScpO1xyXG4gICAgICAgIHZhciBZRVNURVJEQVkgPSB0b2RheURhdGUuY2xvbmUoKS5zdWJ0cmFjdCgxLCAnZGF5JykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcbiAgICAgICAgdmFyIFRPREFZID0gdG9kYXlEYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG4gICAgICAgIHZhciBUT01PUlJPVyA9IHRvZGF5RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcblxyXG4gICAgICAgIC8vIEluaXQgY2FsZW5kYXIgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9pbml0aWFsaXplLWdsb2JhbHNcclxuICAgICAgICBjYWxlbmRhciA9IG5ldyBGdWxsQ2FsZW5kYXIuQ2FsZW5kYXIoY2FsZW5kYXJFbCwge1xyXG4gICAgICAgICAgICBoZWFkZXJUb29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAncHJldixuZXh0IHRvZGF5JyxcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogJ3RpdGxlJyxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiAnZGF5R3JpZE1vbnRoLHRpbWVHcmlkV2Vlayx0aW1lR3JpZERheSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdGlhbERhdGU6IFRPREFZLFxyXG4gICAgICAgICAgICBuYXZMaW5rczogdHJ1ZSwgLy8gY2FuIGNsaWNrIGRheS93ZWVrIG5hbWVzIHRvIG5hdmlnYXRlIHZpZXdzXHJcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNlbGVjdE1pcnJvcjogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIC8vIFNlbGVjdCBkYXRlcyBhY3Rpb24gLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9zZWxlY3QtY2FsbGJhY2tcclxuICAgICAgICAgICAgc2VsZWN0OiBmdW5jdGlvbiAoYXJnKSB7XHJcbiAgICAgICAgICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcclxuICAgICAgICAgICAgICAgIGZvcm1hdEFyZ3MoYXJnKTtcclxuICAgICAgICAgICAgICAgIGhhbmRsZU5ld0V2ZW50KCk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvLyBDbGljayBldmVudCAtLS0gbW9yZSBpbmZvOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9kb2NzL2V2ZW50Q2xpY2tcclxuICAgICAgICAgICAgZXZlbnRDbGljazogZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgaGlkZVBvcG92ZXJzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9ybWF0QXJncyh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGFyZy5ldmVudC5pZCxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYXJnLmV2ZW50LnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhcmcuZXZlbnQuZXh0ZW5kZWRQcm9wcy5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogYXJnLmV2ZW50LmV4dGVuZGVkUHJvcHMubG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRTdHI6IGFyZy5ldmVudC5zdGFydFN0cixcclxuICAgICAgICAgICAgICAgICAgICBlbmRTdHI6IGFyZy5ldmVudC5lbmRTdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiBhcmcuZXZlbnQuYWxsRGF5XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGhhbmRsZVZpZXdFdmVudCgpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gTW91c2VFbnRlciBldmVudCAtLS0gbW9yZSBpbmZvOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9kb2NzL2V2ZW50TW91c2VFbnRlclxyXG4gICAgICAgICAgICBldmVudE1vdXNlRW50ZXI6IGZ1bmN0aW9uIChhcmcpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdEFyZ3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhcmcuZXZlbnQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGFyZy5ldmVudC50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXJnLmV2ZW50LmV4dGVuZGVkUHJvcHMuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGFyZy5ldmVudC5leHRlbmRlZFByb3BzLmxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0U3RyOiBhcmcuZXZlbnQuc3RhcnRTdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kU3RyOiBhcmcuZXZlbnQuZW5kU3RyLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbERheTogYXJnLmV2ZW50LmFsbERheVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBwb3BvdmVyIHByZXZpZXdcclxuICAgICAgICAgICAgICAgIGluaXRQb3BvdmVycyhhcmcuZWwpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGRheU1heEV2ZW50czogdHJ1ZSwgLy8gYWxsb3cgXCJtb3JlXCIgbGluayB3aGVuIHRvbyBtYW55IGV2ZW50c1xyXG4gICAgICAgICAgICBldmVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdBbGwgRGF5IEV2ZW50JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTAxJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wMicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUb3RvIGxvcmVtIGlwc3VtIGRvbG9yIHNpdCBpbmNpZCBpZHVudCB1dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LWRhbmdlciBmYy1ldmVudC1zb2xpZC13YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdGZWRlcmF0aW9uIFNxdWFyZSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVwb3J0aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTE0VDEzOjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIGluY2lkIGlkdW50IHV0IGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMTRUMTQ6MzA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1zdWNjZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdNZWV0aW5nIFJvb20gNy4wMydcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ29tcGFueSBUcmlwJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTAyJyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCB0ZW1wb3IgaW5jaWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTAzJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnU2VvdWwsIEtvcmVhJ1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSUNUIEV4cG8gMjAyMSAtIFByb2R1Y3QgUmVsZWFzZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0wMycsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgdGVtcG9yIGluY2knLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTA1JyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtbGlnaHQgZmMtZXZlbnQtc29saWQtcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnTWVsYm91cm5lIEV4aGliaXRpb24gSGFsbCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRGlubmVyJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTEyJyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZSBjdGV0dXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTEzJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1NxdWlyZVxcJ3MgTG9mdCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVwZWF0aW5nIEV2ZW50JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTA5VDE2OjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wOVQxNzowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgbmNpZGlkdW50IHV0IGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LWRhbmdlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnR2VuZXJhbCBBcmVhJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdSZXBlYXRpbmcgRXZlbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0xNlQxNjowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMTZUMTc6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnR2VuZXJhbCBBcmVhJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDb25mZXJlbmNlJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWUVTVEVSREFZLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9NT1JST1csXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBlaXVzIG1vZCB0ZW1wb3IgbGFib3JlJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnQ29uZmVyZW5jZSBIYWxsIEEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01lZXRpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBUT0RBWSArICdUMTA6MzA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9EQVkgKyAnVDEyOjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIGVpdSBpZHVudCB1dCBsYWJvcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnTWVldGluZyBSb29tIDExLjA2J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdMdW5jaCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPREFZICsgJ1QxMjowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT0RBWSArICdUMTQ6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1pbmZvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgdXQgbGFib3JlJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ0NhZmV0ZXJpYSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWVldGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPREFZICsgJ1QxNDozMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT0RBWSArICdUMTU6MzA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC13YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBjb25zZSBjdGV0dXIgYWRpcGkgc2NpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnTWVldGluZyBSb29tIDExLjEwJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdIYXBweSBIb3VyJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9EQVkgKyAnVDE3OjMwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPREFZICsgJ1QyMTozMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LWluZm9cIixcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZSBjdGV0dXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnVGhlIEVuZ2xpc2ggUHViJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEaW5uZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBUT01PUlJPVyArICdUMTg6MDA6MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9NT1JST1cgKyAnVDIxOjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtc29saWQtZGFuZ2VyIGZjLWV2ZW50LWxpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgY3RldHVyIGFkaXBpIHNjaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ05ldyBZb3JrIFN0ZWFraG91c2UnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0JpcnRoZGF5IFBhcnR5JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9NT1JST1cgKyAnVDEyOjAwOjAwJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPTU9SUk9XICsgJ1QxNDowMDowMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBzY2luZycsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdUaGUgRW5nbGlzaCBQdWInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1NpdGUgdmlzaXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMjgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTI5JyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtc29saWQtaW5mbyBmYy1ldmVudC1saWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGxhYm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICcyNzEsIFNwcmluZyBTdHJlZXQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcblxyXG4gICAgICAgICAgICAvLyBSZXNldCBwb3BvdmVycyB3aGVuIGNoYW5naW5nIGNhbGVuZGFyIHZpZXdzIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL2RvY3MvZGF0ZXNTZXRcclxuICAgICAgICAgICAgZGF0ZXNTZXQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjYWxlbmRhci5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHBvcG92ZXJzIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMC9jb21wb25lbnRzL3BvcG92ZXJzL1xyXG4gICAgY29uc3QgaW5pdFBvcG92ZXJzID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgcG9wb3ZlciBjb250ZW50XHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gZGF0YS5hbGxEYXkgPyBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZJykgOiBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZIC0gaDptbSBhJyk7XHJcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IGRhdGEuYWxsRGF5ID8gbW9tZW50KGRhdGEuZW5kRGF0ZSkuZm9ybWF0KCdEbyBNTU0sIFlZWVknKSA6IG1vbWVudChkYXRhLmVuZERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZIC0gaDptbSBhJyk7XHJcbiAgICAgICAgY29uc3QgcG9wb3Zlckh0bWwgPSAnPGRpdiBjbGFzcz1cImZ3LWJvbGRlciBtYi0yXCI+JyArIGRhdGEuZXZlbnROYW1lICsgJzwvZGl2PjxkaXYgY2xhc3M9XCJmcy03XCI+PHNwYW4gY2xhc3M9XCJmdy1ib2xkXCI+U3RhcnQ6PC9zcGFuPiAnICsgc3RhcnREYXRlICsgJzwvZGl2PjxkaXYgY2xhc3M9XCJmcy03IG1iLTRcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5FbmQ6PC9zcGFuPiAnICsgZW5kRGF0ZSArICc8L2Rpdj48ZGl2IGlkPVwia3RfY2FsZW5kYXJfZXZlbnRfdmlld19idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saWdodC1wcmltYXJ5XCI+VmlldyBNb3JlPC9kaXY+JztcclxuXHJcbiAgICAgICAgLy8gUG9wb3ZlciBvcHRpb25zXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2JvZHknLFxyXG4gICAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcclxuICAgICAgICAgICAgYm91bmRhcnk6ICd3aW5kb3cnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgZGlzbWlzczogdHJ1ZSxcclxuICAgICAgICAgICAgaHRtbDogdHJ1ZSxcclxuICAgICAgICAgICAgdGl0bGU6ICdFdmVudCBTdW1tYXJ5JyxcclxuICAgICAgICAgICAgY29udGVudDogcG9wb3Zlckh0bWwsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIHBvcG92ZXJcclxuICAgICAgICBwb3BvdmVyID0gS1RBcHAuaW5pdEJvb3RzdHJhcFBvcG92ZXIoZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIFNob3cgcG9wb3ZlclxyXG4gICAgICAgIHBvcG92ZXIuc2hvdygpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgcG9wb3ZlciBzdGF0ZVxyXG4gICAgICAgIHBvcG92ZXJTdGF0ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIE9wZW4gdmlldyBldmVudCBtb2RhbFxyXG4gICAgICAgIGhhbmRsZVZpZXdCdXR0b24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIaWRlIGFjdGl2ZSBwb3BvdmVyc1xyXG4gICAgY29uc3QgaGlkZVBvcG92ZXJzID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChwb3BvdmVyU3RhdGUpIHtcclxuICAgICAgICAgICAgcG9wb3Zlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHBvcG92ZXJTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0IHZhbGlkYXRvclxyXG4gICAgY29uc3QgaW5pdFZhbGlkYXRvciA9ICgpID0+IHtcclxuICAgICAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xyXG4gICAgICAgIHZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG4gICAgICAgICAgICBmb3JtLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY2FsZW5kYXJfZXZlbnRfbmFtZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXZlbnQgbmFtZSBpcyByZXF1aXJlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NhbGVuZGFyX2V2ZW50X3N0YXJ0X2RhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N0YXJ0IGRhdGUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdjYWxlbmRhcl9ldmVudF9lbmRfZGF0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRW5kIGRhdGUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0aWFsaXplIGRhdGVwaWNrZXJzIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZmxhdHBpY2tyLmpzLm9yZy9cclxuICAgIGNvbnN0IGluaXREYXRlcGlja2VycyA9ICgpID0+IHtcclxuICAgICAgICBzdGFydEZsYXRwaWNrciA9IGZsYXRwaWNrcihzdGFydERhdGVwaWNrZXIsIHtcclxuICAgICAgICAgICAgZW5hYmxlVGltZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZW5kRmxhdHBpY2tyID0gZmxhdHBpY2tyKGVuZERhdGVwaWNrZXIsIHtcclxuICAgICAgICAgICAgZW5hYmxlVGltZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3RhcnRUaW1lRmxhdHBpY2tyID0gZmxhdHBpY2tyKHN0YXJ0VGltZXBpY2tlciwge1xyXG4gICAgICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxyXG4gICAgICAgICAgICBub0NhbGVuZGFyOiB0cnVlLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcIkg6aVwiLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBlbmRUaW1lRmxhdHBpY2tyID0gZmxhdHBpY2tyKGVuZFRpbWVwaWNrZXIsIHtcclxuICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcclxuICAgICAgICAgICAgbm9DYWxlbmRhcjogdHJ1ZSxcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJIOmlcIixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgYWRkIGJ1dHRvblxyXG4gICAgY29uc3QgaGFuZGxlQWRkQnV0dG9uID0gKCkgPT4ge1xyXG4gICAgICAgIGFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gZGF0YVxyXG4gICAgICAgICAgICBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIGV2ZW50RGVzY3JpcHRpb246ICcnLFxyXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgZW5kRGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIGFsbERheTogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaGFuZGxlTmV3RXZlbnQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgYWRkIG5ldyBldmVudFxyXG4gICAgY29uc3QgaGFuZGxlTmV3RXZlbnQgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gVXBkYXRlIG1vZGFsIHRpdGxlXHJcbiAgICAgICAgbW9kYWxUaXRsZS5pbm5lclRleHQgPSBcIkFkZCBhIE5ldyBFdmVudFwiO1xyXG5cclxuICAgICAgICBtb2RhbC5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIFNlbGVjdCBkYXRlcGlja2VyIHdyYXBwZXIgZWxlbWVudHNcclxuICAgICAgICBjb25zdCBkYXRlcGlja2VyV3JhcHBlcnMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZGF0ZXBpY2tlclwiXScpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgYWxsIGRheSB0b2dnbGVcclxuICAgICAgICBjb25zdCBhbGxEYXlUb2dnbGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX2FsbGRheScpO1xyXG4gICAgICAgIGFsbERheVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwb3B1bGF0ZUZvcm0oZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzdWJtaXQgZm9ybVxyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBidXR0b24gYWN0aW9uXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIHN1Ym1pdFxyXG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgc3VibWl0IGJ1dHRvbiB3aGlsc3QgbG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgY29uZmlybWF0aW9uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5ldyBldmVudCBhZGRlZCB0byBjYWxlbmRhciFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmFibGUgc3VibWl0IGJ1dHRvbiBhZnRlciBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGlmIGlzIGFsbCBkYXkgZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFsbERheUV2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxEYXlUb2dnbGUuY2hlY2tlZCkgeyBhbGxEYXlFdmVudCA9IHRydWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkgeyBhbGxEYXlFdmVudCA9IHRydWU7IH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlIGRhdGUgJiB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydERhdGVUaW1lID0gbW9tZW50KHN0YXJ0RmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kRGF0ZVRpbWUgPSBtb21lbnQoZW5kRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbZW5kRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV0pLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbERheUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmREYXRlID0gc3RhcnREYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gbW9tZW50KHN0YXJ0VGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRUaW1lID0gbW9tZW50KGVuZFRpbWVGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCdISDptbTpzcycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZVRpbWUgPSBzdGFydERhdGUgKyAnVCcgKyBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlVGltZSA9IGVuZERhdGUgKyAnVCcgKyBlbmRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbmV3IGV2ZW50IHRvIGNhbGVuZGFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBldmVudE5hbWUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXZlbnREZXNjcmlwdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBldmVudExvY2F0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0RGF0ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZERhdGVUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiBhbGxEYXlFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIucmVuZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBmb3JtIGZvciBkZW1vIHB1cnBvc2VzIG9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9ybS5zdWJtaXQoKTsgLy8gU3VibWl0IGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBwb3B1cCB3YXJuaW5nIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTb3JyeSwgbG9va3MgbGlrZSB0aGVyZSBhcmUgc29tZSBlcnJvcnMgZGV0ZWN0ZWQsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGVkaXQgZXZlbnRcclxuICAgIGNvbnN0IGhhbmRsZUVkaXRFdmVudCA9ICgpID0+IHtcclxuICAgICAgICAvLyBVcGRhdGUgbW9kYWwgdGl0bGVcclxuICAgICAgICBtb2RhbFRpdGxlLmlubmVyVGV4dCA9IFwiRWRpdCBhbiBFdmVudFwiO1xyXG5cclxuICAgICAgICBtb2RhbC5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIFNlbGVjdCBkYXRlcGlja2VyIHdyYXBwZXIgZWxlbWVudHNcclxuICAgICAgICBjb25zdCBkYXRlcGlja2VyV3JhcHBlcnMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZGF0ZXBpY2tlclwiXScpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgYWxsIGRheSB0b2dnbGVcclxuICAgICAgICBjb25zdCBhbGxEYXlUb2dnbGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX2FsbGRheScpO1xyXG4gICAgICAgIGFsbERheVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwb3B1bGF0ZUZvcm0oZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBzdWJtaXQgZm9ybVxyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBidXR0b24gYWN0aW9uXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIHN1Ym1pdFxyXG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgc3VibWl0IGJ1dHRvbiB3aGlsc3QgbG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgY29uZmlybWF0aW9uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5ldyBldmVudCBhZGRlZCB0byBjYWxlbmRhciFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmFibGUgc3VibWl0IGJ1dHRvbiBhZnRlciBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG9sZCBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5nZXRFdmVudEJ5SWQoZGF0YS5pZCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlY3QgaWYgaXMgYWxsIGRheSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxsRGF5RXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheVRvZ2dsZS5jaGVja2VkKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgZGF0ZSAmIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZVRpbWUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmREYXRlVGltZSA9IG1vbWVudChlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1tlbmRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXSkuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsRGF5RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG1vbWVudChzdGFydEZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZERhdGUgPSBzdGFydERhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgnSEg6bW06c3MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kVGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZSA9IHN0YXJ0RGF0ZSArICdUJyArIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGVUaW1lID0gZW5kRGF0ZSArICdUJyArIGVuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgZXZlbnQgdG8gY2FsZW5kYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuYWRkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGV2ZW50TmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBldmVudERlc2NyaXB0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50TG9jYXRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnREYXRlVGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheUV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gZm9yIGRlbW8gcHVycG9zZXMgb25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JtLnN1Ym1pdCgpOyAvLyBTdWJtaXQgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHBvcHVwIHdhcm5pbmcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgdmlldyBldmVudFxyXG4gICAgY29uc3QgaGFuZGxlVmlld0V2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgIHZpZXdNb2RhbC5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIERldGVjdCBhbGwgZGF5IGV2ZW50XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZU1vZDtcclxuICAgICAgICB2YXIgc3RhcnREYXRlTW9kO1xyXG4gICAgICAgIHZhciBlbmREYXRlTW9kO1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBsYWJlbHNcclxuICAgICAgICBpZiAoZGF0YS5hbGxEYXkpIHtcclxuICAgICAgICAgICAgZXZlbnROYW1lTW9kID0gJ0FsbCBEYXknO1xyXG4gICAgICAgICAgICBzdGFydERhdGVNb2QgPSBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZJyk7XHJcbiAgICAgICAgICAgIGVuZERhdGVNb2QgPSBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZU1vZCA9ICcnO1xyXG4gICAgICAgICAgICBzdGFydERhdGVNb2QgPSBtb21lbnQoZGF0YS5zdGFydERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZIC0gaDptbSBhJyk7XHJcbiAgICAgICAgICAgIGVuZERhdGVNb2QgPSBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUG9wdWxhdGUgdmlldyBkYXRhXHJcbiAgICAgICAgdmlld0V2ZW50TmFtZS5pbm5lclRleHQgPSBkYXRhLmV2ZW50TmFtZTtcclxuICAgICAgICB2aWV3QWxsRGF5LmlubmVyVGV4dCA9IGV2ZW50TmFtZU1vZDtcclxuICAgICAgICB2aWV3RXZlbnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBkYXRhLmV2ZW50RGVzY3JpcHRpb24gPyBkYXRhLmV2ZW50RGVzY3JpcHRpb24gOiAnLS0nO1xyXG4gICAgICAgIHZpZXdFdmVudExvY2F0aW9uLmlubmVyVGV4dCA9IGRhdGEuZXZlbnRMb2NhdGlvbiA/IGRhdGEuZXZlbnRMb2NhdGlvbiA6ICctLSc7XHJcbiAgICAgICAgdmlld1N0YXJ0RGF0ZS5pbm5lclRleHQgPSBzdGFydERhdGVNb2Q7XHJcbiAgICAgICAgdmlld0VuZERhdGUuaW5uZXJUZXh0ID0gZW5kRGF0ZU1vZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZGVsZXRlIGV2ZW50XHJcbiAgICBjb25zdCBoYW5kbGVEZWxldGVFdmVudCA9ICgpID0+IHtcclxuICAgICAgICB2aWV3RGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBkZWxldGUgdGhpcyBldmVudD9cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgZGVsZXRlIGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgcmV0dXJuXCIsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZ2V0RXZlbnRCeUlkKGRhdGEuaWQpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2aWV3TW9kYWwuaGlkZSgpOyAvLyBIaWRlIG1vZGFsXHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3VyIGV2ZW50IHdhcyBub3QgZGVsZXRlZCEuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZWRpdCBidXR0b25cclxuICAgIGNvbnN0IGhhbmRsZUVkaXRCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgdmlld0VkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgdmlld01vZGFsLmhpZGUoKTtcclxuICAgICAgICAgICAgaGFuZGxlRWRpdEV2ZW50KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGNhbmNlbCBidXR0b25cclxuICAgIGNvbnN0IGhhbmRsZUNhbmNlbEJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgICAvLyBFZGl0IGV2ZW50IG1vZGFsIGNhbmNlbCBidXR0b25cclxuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gY2FuY2VsP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBjYW5jZWwgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7IC8vIFJlc2V0IGZvcm1cdFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFx0XHRcdFx0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBmb3JtIGhhcyBub3QgYmVlbiBjYW5jZWxsZWQhLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIGNsb3NlIGJ1dHRvblxyXG4gICAgY29uc3QgaGFuZGxlQ2xvc2VCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gRWRpdCBldmVudCBtb2RhbCBjbG9zZSBidXR0b25cclxuICAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBjYW5jZWw/XCIsXHJcbiAgICAgICAgICAgICAgICBpY29uOiBcIndhcm5pbmdcIixcclxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGNhbmNlbCBpdCFcIixcclxuICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiTm8sIHJldHVyblwiLFxyXG4gICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvbjogXCJidG4gYnRuLWFjdGl2ZS1saWdodFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm0ucmVzZXQoKTsgLy8gUmVzZXQgZm9ybVx0XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuaGlkZSgpOyAvLyBIaWRlIG1vZGFsXHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3VyIGZvcm0gaGFzIG5vdCBiZWVuIGNhbmNlbGxlZCEuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgdmlldyBidXR0b25cclxuICAgIGNvbnN0IGhhbmRsZVZpZXdCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgdmlld0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9ldmVudF92aWV3X2J1dHRvbicpO1xyXG4gICAgICAgIHZpZXdCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaGlkZVBvcG92ZXJzKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZVZpZXdFdmVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnNcclxuXHJcbiAgICAvLyBSZXNldCBmb3JtIHZhbGlkYXRvciBvbiBtb2RhbCBjbG9zZVxyXG4gICAgY29uc3QgcmVzZXRGb3JtVmFsaWRhdG9yID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAvLyBUYXJnZXQgbW9kYWwgaGlkZGVuIGV2ZW50IC0tLSBGb3IgbW9yZSBpbmZvOiBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy81LjAvY29tcG9uZW50cy9tb2RhbC8jZXZlbnRzXHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdoaWRkZW4uYnMubW9kYWwnLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgZm9ybSB2YWxpZGF0b3IuIEZvciBtb3JlIGluZm86IGh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vZ3VpZGUvYXBpL3Jlc2V0LWZvcm1cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvci5yZXNldEZvcm0odHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb3B1bGF0ZSBmb3JtIFxyXG4gICAgY29uc3QgcG9wdWxhdGVGb3JtID0gKCkgPT4ge1xyXG4gICAgICAgIGV2ZW50TmFtZS52YWx1ZSA9IGRhdGEuZXZlbnROYW1lID8gZGF0YS5ldmVudE5hbWUgOiAnJztcclxuICAgICAgICBldmVudERlc2NyaXB0aW9uLnZhbHVlID0gZGF0YS5ldmVudERlc2NyaXB0aW9uID8gZGF0YS5ldmVudERlc2NyaXB0aW9uIDogJyc7XHJcbiAgICAgICAgZXZlbnRMb2NhdGlvbi52YWx1ZSA9IGRhdGEuZXZlbnRMb2NhdGlvbiA/IGRhdGEuZXZlbnRMb2NhdGlvbiA6ICcnO1xyXG4gICAgICAgIHN0YXJ0RmxhdHBpY2tyLnNldERhdGUoZGF0YS5zdGFydERhdGUsIHRydWUsICdZLW0tZCcpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgbnVsbCBlbmQgZGF0ZXNcclxuICAgICAgICBjb25zdCBlbmREYXRlID0gZGF0YS5lbmREYXRlID8gZGF0YS5lbmREYXRlIDogbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoKTtcclxuICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShlbmREYXRlLCB0cnVlLCAnWS1tLWQnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWxsRGF5VG9nZ2xlID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9hbGxkYXknKTtcclxuICAgICAgICBjb25zdCBkYXRlcGlja2VyV3JhcHBlcnMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZGF0ZXBpY2tlclwiXScpO1xyXG4gICAgICAgIGlmIChkYXRhLmFsbERheSkge1xyXG4gICAgICAgICAgICBhbGxEYXlUb2dnbGUuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGRhdGVwaWNrZXJXcmFwcGVycy5mb3JFYWNoKGR3ID0+IHtcclxuICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydFRpbWVGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kIEg6aScpO1xyXG4gICAgICAgICAgICBlbmRUaW1lRmxhdHBpY2tyLnNldERhdGUoZGF0YS5lbmREYXRlLCB0cnVlLCAnWS1tLWQgSDppJyk7XHJcbiAgICAgICAgICAgIGVuZEZsYXRwaWNrci5zZXREYXRlKGRhdGEuc3RhcnREYXRlLCB0cnVlLCAnWS1tLWQnKTtcclxuICAgICAgICAgICAgYWxsRGF5VG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGb3JtYXQgRnVsbENhbGVuZGFyIHJlcG9uc2VzXHJcbiAgICBjb25zdCBmb3JtYXRBcmdzID0gKHJlcykgPT4ge1xyXG4gICAgICAgIGRhdGEuaWQgPSByZXMuaWQ7XHJcbiAgICAgICAgZGF0YS5ldmVudE5hbWUgPSByZXMudGl0bGU7XHJcbiAgICAgICAgZGF0YS5ldmVudERlc2NyaXB0aW9uID0gcmVzLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIGRhdGEuZXZlbnRMb2NhdGlvbiA9IHJlcy5sb2NhdGlvbjtcclxuICAgICAgICBkYXRhLnN0YXJ0RGF0ZSA9IHJlcy5zdGFydFN0cjtcclxuICAgICAgICBkYXRhLmVuZERhdGUgPSByZXMuZW5kU3RyO1xyXG4gICAgICAgIGRhdGEuYWxsRGF5ID0gcmVzLmFsbERheTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmF0ZSB1bmlxdWUgSURzIGZvciBldmVudHNcclxuICAgIGNvbnN0IHVpZCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKS50b1N0cmluZygpICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIFB1YmxpYyBGdW5jdGlvbnNcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIERlZmluZSB2YXJpYWJsZXNcclxuICAgICAgICAgICAgLy8gQWRkIGV2ZW50IG1vZGFsXHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfbW9kYWxfYWRkX2V2ZW50Jyk7XHJcbiAgICAgICAgICAgIGZvcm0gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9hZGRfZXZlbnRfZm9ybScpO1xyXG4gICAgICAgICAgICBldmVudE5hbWUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiY2FsZW5kYXJfZXZlbnRfbmFtZVwiXScpO1xyXG4gICAgICAgICAgICBldmVudERlc2NyaXB0aW9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhbGVuZGFyX2V2ZW50X2Rlc2NyaXB0aW9uXCJdJyk7XHJcbiAgICAgICAgICAgIGV2ZW50TG9jYXRpb24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiY2FsZW5kYXJfZXZlbnRfbG9jYXRpb25cIl0nKTtcclxuICAgICAgICAgICAgc3RhcnREYXRlcGlja2VyID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9zdGFydF9kYXRlJyk7XHJcbiAgICAgICAgICAgIGVuZERhdGVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX2VuZF9kYXRlJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0VGltZXBpY2tlciA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfc3RhcnRfdGltZScpO1xyXG4gICAgICAgICAgICBlbmRUaW1lcGlja2VyID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9lbmRfdGltZScpO1xyXG4gICAgICAgICAgICBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImFkZFwiXScpO1xyXG4gICAgICAgICAgICBzdWJtaXRCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9hZGRfZXZlbnRfc3VibWl0Jyk7XHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX2FkZF9ldmVudF9jYW5jZWwnKTtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9hZGRfZXZlbnRfY2xvc2UnKTtcclxuICAgICAgICAgICAgbW9kYWxUaXRsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJ0aXRsZVwiXScpO1xyXG4gICAgICAgICAgICBtb2RhbCA9IG5ldyBib290c3RyYXAuTW9kYWwoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAvLyBWaWV3IGV2ZW50IG1vZGFsXHJcbiAgICAgICAgICAgIGNvbnN0IHZpZXdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X21vZGFsX3ZpZXdfZXZlbnQnKTtcclxuICAgICAgICAgICAgdmlld01vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbCh2aWV3RWxlbWVudCk7XHJcbiAgICAgICAgICAgIHZpZXdFdmVudE5hbWUgPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X25hbWVcIl0nKTtcclxuICAgICAgICAgICAgdmlld0FsbERheSA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiYWxsX2RheVwiXScpO1xyXG4gICAgICAgICAgICB2aWV3RXZlbnREZXNjcmlwdGlvbiA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZXZlbnRfZGVzY3JpcHRpb25cIl0nKTtcclxuICAgICAgICAgICAgdmlld0V2ZW50TG9jYXRpb24gPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X2xvY2F0aW9uXCJdJyk7XHJcbiAgICAgICAgICAgIHZpZXdTdGFydERhdGUgPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X3N0YXJ0X2RhdGVcIl0nKTtcclxuICAgICAgICAgICAgdmlld0VuZERhdGUgPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X2VuZF9kYXRlXCJdJyk7XHJcbiAgICAgICAgICAgIHZpZXdFZGl0QnV0dG9uID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX3ZpZXdfZXZlbnRfZWRpdCcpO1xyXG4gICAgICAgICAgICB2aWV3RGVsZXRlQnV0dG9uID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX3ZpZXdfZXZlbnRfZGVsZXRlJyk7XHJcblxyXG4gICAgICAgICAgICBpbml0Q2FsZW5kYXJBcHAoKTtcclxuICAgICAgICAgICAgaW5pdFZhbGlkYXRvcigpO1xyXG4gICAgICAgICAgICBpbml0RGF0ZXBpY2tlcnMoKTtcclxuICAgICAgICAgICAgaGFuZGxlRWRpdEJ1dHRvbigpO1xyXG4gICAgICAgICAgICBoYW5kbGVBZGRCdXR0b24oKTtcclxuICAgICAgICAgICAgaGFuZGxlRGVsZXRlRXZlbnQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2FuY2VsQnV0dG9uKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZUNsb3NlQnV0dG9uKCk7XHJcbiAgICAgICAgICAgIHJlc2V0Rm9ybVZhbGlkYXRvcihlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtUQXBwQ2FsZW5kYXIuaW5pdCgpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIktUQXBwQ2FsZW5kYXIiLCJjYWxlbmRhciIsImRhdGEiLCJpZCIsImV2ZW50TmFtZSIsImV2ZW50RGVzY3JpcHRpb24iLCJldmVudExvY2F0aW9uIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImFsbERheSIsInBvcG92ZXIiLCJwb3BvdmVyU3RhdGUiLCJzdGFydERhdGVwaWNrZXIiLCJzdGFydEZsYXRwaWNrciIsImVuZERhdGVwaWNrZXIiLCJlbmRGbGF0cGlja3IiLCJzdGFydFRpbWVwaWNrZXIiLCJzdGFydFRpbWVGbGF0cGlja3IiLCJlbmRUaW1lcGlja2VyIiwiZW5kVGltZUZsYXRwaWNrciIsIm1vZGFsIiwibW9kYWxUaXRsZSIsImZvcm0iLCJ2YWxpZGF0b3IiLCJhZGRCdXR0b24iLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJjbG9zZUJ1dHRvbiIsInZpZXdFdmVudE5hbWUiLCJ2aWV3QWxsRGF5Iiwidmlld0V2ZW50RGVzY3JpcHRpb24iLCJ2aWV3RXZlbnRMb2NhdGlvbiIsInZpZXdTdGFydERhdGUiLCJ2aWV3RW5kRGF0ZSIsInZpZXdNb2RhbCIsInZpZXdFZGl0QnV0dG9uIiwidmlld0RlbGV0ZUJ1dHRvbiIsImluaXRDYWxlbmRhckFwcCIsImNhbGVuZGFyRWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9kYXlEYXRlIiwibW9tZW50Iiwic3RhcnRPZiIsIllNIiwiZm9ybWF0IiwiWUVTVEVSREFZIiwiY2xvbmUiLCJzdWJ0cmFjdCIsIlRPREFZIiwiVE9NT1JST1ciLCJhZGQiLCJGdWxsQ2FsZW5kYXIiLCJDYWxlbmRhciIsImhlYWRlclRvb2xiYXIiLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJpbml0aWFsRGF0ZSIsIm5hdkxpbmtzIiwic2VsZWN0YWJsZSIsInNlbGVjdE1pcnJvciIsInNlbGVjdCIsImFyZyIsImhpZGVQb3BvdmVycyIsImZvcm1hdEFyZ3MiLCJoYW5kbGVOZXdFdmVudCIsImV2ZW50Q2xpY2siLCJldmVudCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJleHRlbmRlZFByb3BzIiwibG9jYXRpb24iLCJzdGFydFN0ciIsImVuZFN0ciIsImhhbmRsZVZpZXdFdmVudCIsImV2ZW50TW91c2VFbnRlciIsImluaXRQb3BvdmVycyIsImVsIiwiZWRpdGFibGUiLCJkYXlNYXhFdmVudHMiLCJldmVudHMiLCJ1aWQiLCJzdGFydCIsImVuZCIsImNsYXNzTmFtZSIsImRhdGVzU2V0IiwicmVuZGVyIiwiZWxlbWVudCIsInBvcG92ZXJIdG1sIiwib3B0aW9ucyIsImNvbnRhaW5lciIsInRyaWdnZXIiLCJib3VuZGFyeSIsInBsYWNlbWVudCIsImRpc21pc3MiLCJodG1sIiwiY29udGVudCIsIktUQXBwIiwiaW5pdEJvb3RzdHJhcFBvcG92ZXIiLCJzaG93IiwiaGFuZGxlVmlld0J1dHRvbiIsImRpc3Bvc2UiLCJpbml0VmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwbHVnaW5zIiwiVHJpZ2dlciIsImJvb3RzdHJhcCIsIkJvb3RzdHJhcDUiLCJyb3dTZWxlY3RvciIsImVsZUludmFsaWRDbGFzcyIsImVsZVZhbGlkQ2xhc3MiLCJpbml0RGF0ZXBpY2tlcnMiLCJmbGF0cGlja3IiLCJlbmFibGVUaW1lIiwiZGF0ZUZvcm1hdCIsIm5vQ2FsZW5kYXIiLCJoYW5kbGVBZGRCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIkRhdGUiLCJpbm5lclRleHQiLCJkYXRlcGlja2VyV3JhcHBlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWxsRGF5VG9nZ2xlIiwicXVlcnlTZWxlY3RvciIsInRhcmdldCIsImNoZWNrZWQiLCJmb3JFYWNoIiwiZHciLCJjbGFzc0xpc3QiLCJzZXREYXRlIiwicmVtb3ZlIiwicG9wdWxhdGVGb3JtIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwic2V0QXR0cmlidXRlIiwiZGlzYWJsZWQiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQXR0cmlidXRlIiwiU3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJyZXN1bHQiLCJpc0NvbmZpcm1lZCIsImhpZGUiLCJhbGxEYXlFdmVudCIsInNlbGVjdGVkRGF0ZXMiLCJsZW5ndGgiLCJzdGFydERhdGVUaW1lIiwiZW5kRGF0ZVRpbWUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiYWRkRXZlbnQiLCJ2YWx1ZSIsInJlc2V0IiwiaGFuZGxlRWRpdEV2ZW50IiwiZ2V0RXZlbnRCeUlkIiwiZXZlbnROYW1lTW9kIiwic3RhcnREYXRlTW9kIiwiZW5kRGF0ZU1vZCIsImhhbmRsZURlbGV0ZUV2ZW50Iiwic2hvd0NhbmNlbEJ1dHRvbiIsImNhbmNlbEJ1dHRvblRleHQiLCJoYW5kbGVFZGl0QnV0dG9uIiwiaGFuZGxlQ2FuY2VsQnV0dG9uIiwiaGFuZGxlQ2xvc2VCdXR0b24iLCJ2aWV3QnV0dG9uIiwicmVzZXRGb3JtVmFsaWRhdG9yIiwicmVzZXRGb3JtIiwicmVzIiwibm93IiwidG9TdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpbml0IiwiTW9kYWwiLCJ2aWV3RWxlbWVudCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/calendar/calendar.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/calendar/calendar.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/calendar/calendar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/calendar/calendar.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/calendar/calendar.js"]();
/******/ 	
/******/ })()
;