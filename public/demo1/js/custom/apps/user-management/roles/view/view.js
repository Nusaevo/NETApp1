/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/user-management/roles/view/view.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/user-management/roles/view/view.js ***!
  \*********************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTUsersViewRole = function () {\n  // Shared variables\n  var datatable;\n  var table; // Init add schedule modal\n\n  var initViewRole = function initViewRole() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[3].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\n\n      dateRow[3].setAttribute('data-order', realDate);\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"pageLength\": 5,\n      \"lengthChange\": false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      }, // Disable ordering on column 0 (checkbox)\n      {\n        orderable: false,\n        targets: 4\n      } // Disable ordering on column 4 (actions)\n      ]\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-roles-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Delete user\n\n\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-roles-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get customer name\n\n        var userName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + userName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + userName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]'); // Select elements\n\n    var deleteSelected = document.querySelector('[data-kt-view-roles-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected customers?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected customers!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          }).then(function () {\n            toggleToolbars(); // Detect checked checkboxes\n\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected customers was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Define variables\n    var toolbarBase = document.querySelector('[data-kt-view-roles-table-toolbar=\"base\"]');\n    var toolbarSelected = document.querySelector('[data-kt-view-roles-table-toolbar=\"selected\"]');\n    var selectedCount = document.querySelector('[data-kt-view-roles-table-select=\"selected_count\"]'); // Select refreshed checkbox DOM elements \n\n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      table = document.querySelector('#kt_roles_view_table');\n\n      if (!table) {\n        return;\n      }\n\n      initViewRole();\n      handleSearchDatatable();\n      handleDeleteRows();\n      initToggleToolbar();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersViewRole.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/roles/view/view.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/user-management/roles/view/view.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/user-management/roles/view/view.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/user-management/roles/view/view.js\":\n    /*!*********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/user-management/roles/view/view.js ***!\r\n      \\*********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsUserManagementRolesViewViewJs() {\n      eval(\" // Class definition\\n\\nvar KTUsersViewRole = function () {\\n  // Shared variables\\n  var datatable;\\n  var table; // Init add schedule modal\\n\\n  var initViewRole = function initViewRole() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var realDate = moment(dateRow[3].innerHTML, \\\"DD MMM YYYY, LT\\\").format(); // select date from 5th column in table\\n\\n      dateRow[3].setAttribute('data-order', realDate);\\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n    datatable = $(table).DataTable({\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"pageLength\\\": 5,\\n      \\\"lengthChange\\\": false,\\n      'columnDefs': [{\\n        orderable: false,\\n        targets: 0\\n      }, // Disable ordering on column 0 (checkbox)\\n      {\\n        orderable: false,\\n        targets: 4\\n      } // Disable ordering on column 4 (actions)\\n      ]\\n    });\\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n\\n  var handleSearchDatatable = function handleSearchDatatable() {\\n    var filterSearch = document.querySelector('[data-kt-roles-table-filter=\\\"search\\\"]');\\n    filterSearch.addEventListener('keyup', function (e) {\\n      datatable.search(e.target.value).draw();\\n    });\\n  }; // Delete user\\n\\n\\n  var handleDeleteRows = function handleDeleteRows() {\\n    // Select all delete buttons\\n    var deleteButtons = table.querySelectorAll('[data-kt-roles-table-filter=\\\"delete_row\\\"]');\\n    deleteButtons.forEach(function (d) {\\n      // Delete button on click\\n      d.addEventListener('click', function (e) {\\n        e.preventDefault(); // Select parent row\\n\\n        var parent = e.target.closest('tr'); // Get customer name\\n\\n        var userName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n        Swal.fire({\\n          text: \\\"Are you sure you want to delete \\\" + userName + \\\"?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete!\\\",\\n          cancelButtonText: \\\"No, cancel\\\",\\n          customClass: {\\n            confirmButton: \\\"btn fw-bold btn-danger\\\",\\n            cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            Swal.fire({\\n              text: \\\"You have deleted \\\" + userName + \\\"!.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            }).then(function () {\\n              // Remove current row\\n              datatable.row($(parent)).remove().draw();\\n            });\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: customerName + \\\" was not deleted.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }; // Init toggle toolbar\\n\\n\\n  var initToggleToolbar = function initToggleToolbar() {\\n    // Toggle selected action toolbar\\n    // Select all checkboxes\\n    var checkboxes = table.querySelectorAll('[type=\\\"checkbox\\\"]'); // Select elements\\n\\n    var deleteSelected = document.querySelector('[data-kt-view-roles-table-select=\\\"delete_selected\\\"]'); // Toggle delete selected toolbar\\n\\n    checkboxes.forEach(function (c) {\\n      // Checkbox on click event\\n      c.addEventListener('click', function () {\\n        setTimeout(function () {\\n          toggleToolbars();\\n        }, 50);\\n      });\\n    }); // Deleted selected rows\\n\\n    deleteSelected.addEventListener('click', function () {\\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n      Swal.fire({\\n        text: \\\"Are you sure you want to delete selected customers?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete!\\\",\\n        cancelButtonText: \\\"No, cancel\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\",\\n          cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          Swal.fire({\\n            text: \\\"You have deleted all selected customers!.\\\",\\n            icon: \\\"success\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          }).then(function () {\\n            // Remove all selected customers\\n            checkboxes.forEach(function (c) {\\n              if (c.checked) {\\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\\n              }\\n            }); // Remove header checked box\\n\\n            var headerCheckbox = table.querySelectorAll('[type=\\\"checkbox\\\"]')[0];\\n            headerCheckbox.checked = false;\\n          }).then(function () {\\n            toggleToolbars(); // Detect checked checkboxes\\n\\n            initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\\n          });\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Selected customers was not deleted.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Toggle toolbars\\n\\n\\n  var toggleToolbars = function toggleToolbars() {\\n    // Define variables\\n    var toolbarBase = document.querySelector('[data-kt-view-roles-table-toolbar=\\\"base\\\"]');\\n    var toolbarSelected = document.querySelector('[data-kt-view-roles-table-toolbar=\\\"selected\\\"]');\\n    var selectedCount = document.querySelector('[data-kt-view-roles-table-select=\\\"selected_count\\\"]'); // Select refreshed checkbox DOM elements \\n\\n    var allCheckboxes = table.querySelectorAll('tbody [type=\\\"checkbox\\\"]'); // Detect checkboxes state & count\\n\\n    var checkedState = false;\\n    var count = 0; // Count checked boxes\\n\\n    allCheckboxes.forEach(function (c) {\\n      if (c.checked) {\\n        checkedState = true;\\n        count++;\\n      }\\n    }); // Toggle toolbars\\n\\n    if (checkedState) {\\n      selectedCount.innerHTML = count;\\n      toolbarBase.classList.add('d-none');\\n      toolbarSelected.classList.remove('d-none');\\n    } else {\\n      toolbarBase.classList.remove('d-none');\\n      toolbarSelected.classList.add('d-none');\\n    }\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      table = document.querySelector('#kt_roles_view_table');\\n\\n      if (!table) {\\n        return;\\n      }\\n\\n      initViewRole();\\n      handleSearchDatatable();\\n      handleDeleteRows();\\n      initToggleToolbar();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTUsersViewRole.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/roles/view/view.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/user-management/roles/view/view.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/user-management/roles/view/view.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/user-management/roles/view/view.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/user-management/roles/view/view.js"]();
/******/ 	
/******/ })()
;