/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js ***!
  \****************************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTUsersUpdatePermissions = function () {\n  // Shared variables\n  var element = document.getElementById('kt_modal_update_role');\n  var form = element.querySelector('#kt_modal_update_role_form');\n  var modal = new bootstrap.Modal(element);\n\n  // Init add schedule modal\n  var initUpdatePermissions = function initUpdatePermissions() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'role_name': {\n          validators: {\n            notEmpty: {\n              message: 'Role name is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n\n    // Close button handler\n    var closeButton = element.querySelector('[data-kt-roles-modal-action=\"close\"]');\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to close?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, close it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          modal.hide(); // Hide modal\t\t\t\t\n        }\n      });\n    });\n\n    // Cancel button handler\n    var cancelButton = element.querySelector('[data-kt-roles-modal-action=\"cancel\"]');\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n\n    // Submit button handler\n    var submitButton = element.querySelector('[data-kt-roles-modal-action=\"submit\"]');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable button to avoid multiple click \n            submitButton.disabled = true;\n\n            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Enable button\n              submitButton.disabled = false;\n\n              // Show popup confirmation \n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  // Select all handler\n  var handleSelectAll = function handleSelectAll() {\n    // Define variables\n    var selectAll = form.querySelector('#kt_roles_select_all');\n    var allCheckboxes = form.querySelectorAll('[type=\"checkbox\"]');\n\n    // Handle check state\n    selectAll.addEventListener('change', function (e) {\n      // Apply check state to all checkboxes\n      allCheckboxes.forEach(function (c) {\n        c.checked = e.target.checked;\n      });\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      initUpdatePermissions();\n      handleSelectAll();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersUpdatePermissions.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/user-management/roles/list/update-role.js":
/*!*****************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/user-management/roles/list/update-role.js ***!
  \*****************************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js\": (\n    /*!****************************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js ***!\n      \\****************************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAppsUserManagementRolesListUpdateRoleJs() {\n      eval(\" // Class definition\\n\\nvar KTUsersUpdatePermissions = function () {\\n  // Shared variables\\n  var element = document.getElementById('kt_modal_update_role');\\n  var form = element.querySelector('#kt_modal_update_role_form');\\n  var modal = new bootstrap.Modal(element); // Init add schedule modal\\n\\n  var initUpdatePermissions = function initUpdatePermissions() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    var validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'role_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Role name is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Close button handler\\n\\n    var closeButton = element.querySelector('[data-kt-roles-modal-action=\\\"close\\\"]');\\n    closeButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to close?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, close it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        }\\n      });\\n    }); // Cancel button handler\\n\\n    var cancelButton = element.querySelector('[data-kt-roles-modal-action=\\\"cancel\\\"]');\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    }); // Submit button handler\\n\\n    var submitButton = element.querySelector('[data-kt-roles-modal-action=\\\"submit\\\"]');\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            setTimeout(function () {\\n              // Remove loading indication\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false; // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Select all handler\\n\\n\\n  var handleSelectAll = function handleSelectAll() {\\n    // Define variables\\n    var selectAll = form.querySelector('#kt_roles_select_all');\\n    var allCheckboxes = form.querySelectorAll('[type=\\\"checkbox\\\"]'); // Handle check state\\n\\n    selectAll.addEventListener('change', function (e) {\\n      // Apply check state to all checkboxes\\n      allCheckboxes.forEach(function (c) {\\n        c.checked = e.target.checked;\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      initUpdatePermissions();\\n      handleSelectAll();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTUsersUpdatePermissions.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVzb3VyY2VzQXNzZXRzQ29yZUpzQ3VzdG9tQXBwc1VzZXJNYW5hZ2VtZW50Um9sZXNMaXN0VXBkYXRlUm9sZUpzIiwiZXZhbCIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9kZW1vMS9qcy9jdXN0b20vYXBwcy91c2VyLW1hbmFnZW1lbnQvcm9sZXMvbGlzdC91cGRhdGUtcm9sZS5qcz85Y2U2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBBVFRFTlRJT046IEFuIFwiZXZhbC1zb3VyY2UtbWFwXCIgZGV2dG9vbCBoYXMgYmVlbiB1c2VkLlxuICogVGhpcyBkZXZ0b29sIGlzIG5laXRoZXIgbWFkZSBmb3IgcHJvZHVjdGlvbiBub3IgZm9yIHJlYWRhYmxlIG91dHB1dCBmaWxlcy5cbiAqIEl0IHVzZXMgXCJldmFsKClcIiBjYWxscyB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzb3VyY2UgZmlsZSB3aXRoIGF0dGFjaGVkIFNvdXJjZU1hcHMgaW4gdGhlIGJyb3dzZXIgZGV2dG9vbHMuXG4gKiBJZiB5b3UgYXJlIHRyeWluZyB0byByZWFkIHRoZSBvdXRwdXQgZmlsZSwgc2VsZWN0IGEgZGlmZmVyZW50IGRldnRvb2wgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLylcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cbiAqIElmIHlvdSBhcmUgbG9va2luZyBmb3IgcHJvZHVjdGlvbi1yZWFkeSBvdXRwdXQgZmlsZXMsIHNlZSBtb2RlOiBcInByb2R1Y3Rpb25cIiAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL21vZGUvKS5cbiAqL1xuLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL3VzZXItbWFuYWdlbWVudC9yb2xlcy9saXN0L3VwZGF0ZS1yb2xlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9hcHBzL3VzZXItbWFuYWdlbWVudC9yb2xlcy9saXN0L3VwZGF0ZS1yb2xlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKCgpID0+IHtcblxuZXZhbChcIiAvLyBDbGFzcyBkZWZpbml0aW9uXFxuXFxudmFyIEtUVXNlcnNVcGRhdGVQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcXG4gIC8vIFNoYXJlZCB2YXJpYWJsZXNcXG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X21vZGFsX3VwZGF0ZV9yb2xlJyk7XFxuICB2YXIgZm9ybSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX3VwZGF0ZV9yb2xlX2Zvcm0nKTtcXG4gIHZhciBtb2RhbCA9IG5ldyBib290c3RyYXAuTW9kYWwoZWxlbWVudCk7IC8vIEluaXQgYWRkIHNjaGVkdWxlIG1vZGFsXFxuXFxuICB2YXIgaW5pdFVwZGF0ZVBlcm1pc3Npb25zID0gZnVuY3Rpb24gaW5pdFVwZGF0ZVBlcm1pc3Npb25zKCkge1xcbiAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xcbiAgICB2YXIgdmFsaWRhdG9yID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oZm9ybSwge1xcbiAgICAgIGZpZWxkczoge1xcbiAgICAgICAgJ3JvbGVfbmFtZSc6IHtcXG4gICAgICAgICAgdmFsaWRhdG9yczoge1xcbiAgICAgICAgICAgIG5vdEVtcHR5OiB7XFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnUm9sZSBuYW1lIGlzIHJlcXVpcmVkJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH0sXFxuICAgICAgcGx1Z2luczoge1xcbiAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxcbiAgICAgICAgYm9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcXG4gICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcXG4gICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcXG4gICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcXG4gICAgICAgIH0pXFxuICAgICAgfVxcbiAgICB9KTsgLy8gQ2xvc2UgYnV0dG9uIGhhbmRsZXJcXG5cXG4gICAgdmFyIGNsb3NlQnV0dG9uID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1yb2xlcy1tb2RhbC1hY3Rpb249XFxcImNsb3NlXFxcIl0nKTtcXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcXG4gICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgdGV4dDogXFxcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBjbG9zZT9cXFwiLFxcbiAgICAgICAgaWNvbjogXFxcIndhcm5pbmdcXFwiLFxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcXG4gICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcXFwiWWVzLCBjbG9zZSBpdCFcXFwiLFxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXFxcIk5vLCByZXR1cm5cXFwiLFxcbiAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgY29uZmlybUJ1dHRvbjogXFxcImJ0biBidG4tcHJpbWFyeVxcXCIsXFxuICAgICAgICAgIGNhbmNlbEJ1dHRvbjogXFxcImJ0biBidG4tYWN0aXZlLWxpZ2h0XFxcIlxcbiAgICAgICAgfVxcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xcbiAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xcbiAgICAgICAgICBtb2RhbC5oaWRlKCk7IC8vIEhpZGUgbW9kYWxcXHRcXHRcXHRcXHRcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfSk7IC8vIENhbmNlbCBidXR0b24gaGFuZGxlclxcblxcbiAgICB2YXIgY2FuY2VsQnV0dG9uID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1yb2xlcy1tb2RhbC1hY3Rpb249XFxcImNhbmNlbFxcXCJdJyk7XFxuICAgIGNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgIFN3YWwuZmlyZSh7XFxuICAgICAgICB0ZXh0OiBcXFwiQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGNhbmNlbD9cXFwiLFxcbiAgICAgICAgaWNvbjogXFxcIndhcm5pbmdcXFwiLFxcbiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcXG4gICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcXFwiWWVzLCBjYW5jZWwgaXQhXFxcIixcXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFxcXCJObywgcmV0dXJuXFxcIixcXG4gICAgICAgIGN1c3RvbUNsYXNzOiB7XFxuICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gYnRuLXByaW1hcnlcXFwiLFxcbiAgICAgICAgICBjYW5jZWxCdXR0b246IFxcXCJidG4gYnRuLWFjdGl2ZS1saWdodFxcXCJcXG4gICAgICAgIH1cXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcXG4gICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcXG4gICAgICAgICAgZm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtXFx0XFxuXFxuICAgICAgICAgIG1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFxcdFxcdFxcdFxcdFxcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcXG4gICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICB0ZXh0OiBcXFwiWW91ciBmb3JtIGhhcyBub3QgYmVlbiBjYW5jZWxsZWQhLlxcXCIsXFxuICAgICAgICAgICAgaWNvbjogXFxcImVycm9yXFxcIixcXG4gICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPaywgZ290IGl0IVxcXCIsXFxuICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gYnRuLXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfSk7IC8vIFN1Ym1pdCBidXR0b24gaGFuZGxlclxcblxcbiAgICB2YXIgc3VibWl0QnV0dG9uID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1yb2xlcy1tb2RhbC1hY3Rpb249XFxcInN1Ym1pdFxcXCJdJyk7XFxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIHN1Ym1pdFxcblxcbiAgICAgIGlmICh2YWxpZGF0b3IpIHtcXG4gICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xcbiAgICAgICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xcblxcbiAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcXG4gICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEta3QtaW5kaWNhdG9yJywgJ29uJyk7IC8vIERpc2FibGUgYnV0dG9uIHRvIGF2b2lkIG11bHRpcGxlIGNsaWNrIFxcblxcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7IC8vIFNpbXVsYXRlIGZvcm0gc3VibWlzc2lvbi4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXFxuXFxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAvLyBSZW1vdmUgbG9hZGluZyBpbmRpY2F0aW9uXFxuICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpOyAvLyBFbmFibGUgYnV0dG9uXFxuXFxuICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTsgLy8gU2hvdyBwb3B1cCBjb25maXJtYXRpb24gXFxuXFxuICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xcbiAgICAgICAgICAgICAgICB0ZXh0OiBcXFwiRm9ybSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc3VibWl0dGVkIVxcXCIsXFxuICAgICAgICAgICAgICAgIGljb246IFxcXCJzdWNjZXNzXFxcIixcXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXFxcIk9rLCBnb3QgaXQhXFxcIixcXG4gICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xcbiAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgfSk7IC8vZm9ybS5zdWJtaXQoKTsgLy8gU3VibWl0IGZvcm1cXG4gICAgICAgICAgICB9LCAyMDAwKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAvLyBTaG93IHBvcHVwIHdhcm5pbmcuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246IGh0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvL1xcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XFxuICAgICAgICAgICAgICB0ZXh0OiBcXFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlxcXCIsXFxuICAgICAgICAgICAgICBpY29uOiBcXFwiZXJyb3JcXFwiLFxcbiAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPaywgZ290IGl0IVxcXCIsXFxuICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgIH0pO1xcbiAgfTsgLy8gU2VsZWN0IGFsbCBoYW5kbGVyXFxuXFxuXFxuICB2YXIgaGFuZGxlU2VsZWN0QWxsID0gZnVuY3Rpb24gaGFuZGxlU2VsZWN0QWxsKCkge1xcbiAgICAvLyBEZWZpbmUgdmFyaWFibGVzXFxuICAgIHZhciBzZWxlY3RBbGwgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9yb2xlc19zZWxlY3RfYWxsJyk7XFxuICAgIHZhciBhbGxDaGVja2JveGVzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cXFwiY2hlY2tib3hcXFwiXScpOyAvLyBIYW5kbGUgY2hlY2sgc3RhdGVcXG5cXG4gICAgc2VsZWN0QWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgLy8gQXBwbHkgY2hlY2sgc3RhdGUgdG8gYWxsIGNoZWNrYm94ZXNcXG4gICAgICBhbGxDaGVja2JveGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcXG4gICAgICAgIGMuY2hlY2tlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7XFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHJldHVybiB7XFxuICAgIC8vIFB1YmxpYyBmdW5jdGlvbnNcXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcXG4gICAgICBpbml0VXBkYXRlUGVybWlzc2lvbnMoKTtcXG4gICAgICBoYW5kbGVTZWxlY3RBbGwoKTtcXG4gICAgfVxcbiAgfTtcXG59KCk7IC8vIE9uIGRvY3VtZW50IHJlYWR5XFxuXFxuXFxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XFxuICBLVFVzZXJzVXBkYXRlUGVybWlzc2lvbnMuaW5pdCgpO1xcbn0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXlaWE52ZFhKalpYTXZZWE56WlhSekwyTnZjbVV2YW5NdlkzVnpkRzl0TDJGd2NITXZkWE5sY2kxdFlXNWhaMlZ0Wlc1MEwzSnZiR1Z6TDJ4cGMzUXZkWEJrWVhSbExYSnZiR1V1YW5NdWFuTWlMQ0p0WVhCd2FXNW5jeUk2SWtOQlJVRTdPMEZCUTBFc1NVRkJTVUVzZDBKQlFYZENMRWRCUVVjc1dVRkJXVHRCUVVOMlF6dEJRVU5CTEUxQlFVMURMRTlCUVU4c1IwRkJSME1zVVVGQlVTeERRVUZEUXl4alFVRlVMRU5CUVhkQ0xITkNRVUY0UWl4RFFVRm9RanRCUVVOQkxFMUJRVTFETEVsQlFVa3NSMEZCUjBnc1QwRkJUeXhEUVVGRFNTeGhRVUZTTEVOQlFYTkNMRFJDUVVGMFFpeERRVUZpTzBGQlEwRXNUVUZCVFVNc1MwRkJTeXhIUVVGSExFbEJRVWxETEZOQlFWTXNRMEZCUTBNc1MwRkJaQ3hEUVVGdlFsQXNUMEZCY0VJc1EwRkJaQ3hEUVVwMVF5eERRVTEyUXpzN1FVRkRRU3hOUVVGSlVTeHhRa0ZCY1VJc1IwRkJSeXhUUVVGNFFrRXNjVUpCUVhkQ0xFZEJRVTA3UVVGRk9VSTdRVUZEUVN4UlFVRkpReXhUUVVGVExFZEJRVWRETEdOQlFXTXNRMEZCUTBNc1kwRkJaaXhEUVVOYVVpeEpRVVJaTEVWQlJWbzdRVUZEU1ZNc1RVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlEwb3NjVUpCUVdFN1FVRkRWRU1zVlVGQlFVRXNWVUZCVlN4RlFVRkZPMEZCUTFKRExGbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVTk9ReXhqUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFU0R0QlFVUkdPMEZCUkVnN1FVRkVWQ3hQUVVSYU8wRkJWMGxETEUxQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVOTVF5eFJRVUZCUVN4UFFVRlBMRVZCUVVVc1NVRkJTVkFzWTBGQll5eERRVUZEVFN4UFFVRm1MRU5CUVhWQ1JTeFBRVUV6UWl4RlFVUktPMEZCUlV4YUxGRkJRVUZCTEZOQlFWTXNSVUZCUlN4SlFVRkpTU3hqUVVGakxFTkJRVU5OTEU5QlFXWXNRMEZCZFVKSExGVkJRVE5DTEVOQlFYTkRPMEZCUXpkRFF5eFZRVUZCUVN4WFFVRlhMRVZCUVVVc1UwRkVaME03UVVGRk4wTkRMRlZCUVVGQkxHVkJRV1VzUlVGQlJTeEZRVVkwUWp0QlFVYzNRME1zVlVGQlFVRXNZVUZCWVN4RlFVRkZPMEZCU0RoQ0xGTkJRWFJETzBGQlJrNDdRVUZZWWl4TFFVWlpMRU5CUVdoQ0xFTkJTRGhDTEVOQk1rSTVRanM3UVVGRFFTeFJRVUZOUXl4WFFVRlhMRWRCUVVkMlFpeFBRVUZQTEVOQlFVTkpMR0ZCUVZJc1EwRkJjMElzYzBOQlFYUkNMRU5CUVhCQ08wRkJRMEZ0UWl4SlFVRkJRU3hYUVVGWExFTkJRVU5ETEdkQ1FVRmFMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRlZCUVVGRExFTkJRVU1zUlVGQlNUdEJRVU4yUTBFc1RVRkJRVUVzUTBGQlF5eERRVUZEUXl4alFVRkdPMEZCUlVGRExFMUJRVUZCTEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hEUVVGVk8wRkJRMDVETEZGQlFVRkJMRWxCUVVrc1JVRkJSU3gxUTBGRVFUdEJRVVZPUXl4UlFVRkJRU3hKUVVGSkxFVkJRVVVzVTBGR1FUdEJRVWRPUXl4UlFVRkJRU3huUWtGQlowSXNSVUZCUlN4SlFVaGFPMEZCU1U1RExGRkJRVUZCTEdOQlFXTXNSVUZCUlN4TFFVcFdPMEZCUzA1RExGRkJRVUZCTEdsQ1FVRnBRaXhGUVVGRkxHZENRVXhpTzBGQlRVNURMRkZCUVVGQkxHZENRVUZuUWl4RlFVRkZMRmxCVGxvN1FVRlBUa01zVVVGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFSRExGVkJRVUZCTEdGQlFXRXNSVUZCUlN4cFFrRkVUanRCUVVWVVF5eFZRVUZCUVN4WlFVRlpMRVZCUVVVN1FVRkdURHRCUVZCUUxFOUJRVllzUlVGWFIwTXNTVUZZU0N4RFFWZFJMRlZCUVZWRExFMUJRVllzUlVGQmEwSTdRVUZEZEVJc1dVRkJTVUVzVFVGQlRTeERRVUZEUXl4TFFVRllMRVZCUVd0Q08wRkJRMlJ1UXl4VlFVRkJRU3hMUVVGTExFTkJRVU52UXl4SlFVRk9MRWRCUkdNc1EwRkRRVHRCUVVOcVFqdEJRVU5LTEU5QlprUTdRVUZuUWtnc1MwRnVRa1FzUlVFM1FqaENMRU5CYTBRNVFqczdRVUZEUVN4UlFVRk5TaXhaUVVGWkxFZEJRVWR5UXl4UFFVRlBMRU5CUVVOSkxHRkJRVklzUTBGQmMwSXNkVU5CUVhSQ0xFTkJRWEpDTzBGQlEwRnBReXhKUVVGQlFTeFpRVUZaTEVOQlFVTmlMR2RDUVVGaUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExGVkJRVUZETEVOQlFVTXNSVUZCU1R0QlFVTjRRMEVzVFVGQlFVRXNRMEZCUXl4RFFVRkRReXhqUVVGR08wRkJSVUZETEUxQlFVRkJMRWxCUVVrc1EwRkJRME1zU1VGQlRDeERRVUZWTzBGQlEwNURMRkZCUVVGQkxFbEJRVWtzUlVGQlJTeDNRMEZFUVR0QlFVVk9ReXhSUVVGQlFTeEpRVUZKTEVWQlFVVXNVMEZHUVR0QlFVZE9ReXhSUVVGQlFTeG5Ra0ZCWjBJc1JVRkJSU3hKUVVoYU8wRkJTVTVETEZGQlFVRkJMR05CUVdNc1JVRkJSU3hMUVVwV08wRkJTMDVETEZGQlFVRkJMR2xDUVVGcFFpeEZRVUZGTEdsQ1FVeGlPMEZCVFU1RExGRkJRVUZCTEdkQ1FVRm5RaXhGUVVGRkxGbEJUbG83UVVGUFRrTXNVVUZCUVVFc1YwRkJWeXhGUVVGRk8wRkJRMVJETEZWQlFVRkJMR0ZCUVdFc1JVRkJSU3hwUWtGRVRqdEJRVVZVUXl4VlFVRkJRU3haUVVGWkxFVkJRVVU3UVVGR1REdEJRVkJRTEU5QlFWWXNSVUZYUjBNc1NVRllTQ3hEUVZkUkxGVkJRVlZETEUxQlFWWXNSVUZCYTBJN1FVRkRkRUlzV1VGQlNVRXNUVUZCVFN4RFFVRkRReXhMUVVGWUxFVkJRV3RDTzBGQlEyUnlReXhWUVVGQlFTeEpRVUZKTEVOQlFVTjFReXhMUVVGTUxFZEJSR01zUTBGRFFUczdRVUZEWkhKRExGVkJRVUZCTEV0QlFVc3NRMEZCUTI5RExFbEJRVTRzUjBGR1l5eERRVVZCTzBGQlEycENMRk5CU0VRc1RVRkhUeXhKUVVGSlJpeE5RVUZOTEVOQlFVTkpMRTlCUVZBc1MwRkJiVUlzVVVGQmRrSXNSVUZCYVVNN1FVRkRjRU5vUWl4VlFVRkJRU3hKUVVGSkxFTkJRVU5ETEVsQlFVd3NRMEZCVlR0QlFVTk9ReXhaUVVGQlFTeEpRVUZKTEVWQlFVVXNiME5CUkVFN1FVRkZUa01zV1VGQlFVRXNTVUZCU1N4RlFVRkZMRTlCUmtFN1FVRkhUa1VzV1VGQlFVRXNZMEZCWXl4RlFVRkZMRXRCU0ZZN1FVRkpUa01zV1VGQlFVRXNhVUpCUVdsQ0xFVkJRVVVzWVVGS1lqdEJRVXRPUlN4WlFVRkJRU3hYUVVGWExFVkJRVVU3UVVGRFZFTXNZMEZCUVVFc1lVRkJZU3hGUVVGRk8wRkJSRTQ3UVVGTVVDeFhRVUZXTzBGQlUwZzdRVUZEU2l4UFFURkNSRHRCUVRKQ1NDeExRVGxDUkN4RlFYQkVPRUlzUTBGdlJqbENPenRCUVVOQkxGRkJRVTFSTEZsQlFWa3NSMEZCUnpWRExFOUJRVThzUTBGQlEwa3NZVUZCVWl4RFFVRnpRaXgxUTBGQmRFSXNRMEZCY2tJN1FVRkRRWGRETEVsQlFVRkJMRmxCUVZrc1EwRkJRM0JDTEdkQ1FVRmlMRU5CUVRoQ0xFOUJRVGxDTEVWQlFYVkRMRlZCUVZWRExFTkJRVllzUlVGQllUdEJRVU5vUkR0QlFVTkJRU3hOUVVGQlFTeERRVUZETEVOQlFVTkRMR05CUVVZc1IwRkdaMFFzUTBGSmFFUTdPMEZCUTBFc1ZVRkJTV3BDTEZOQlFVb3NSVUZCWlR0QlFVTllRU3hSUVVGQlFTeFRRVUZUTEVOQlFVTnZReXhSUVVGV0xFZEJRWEZDVUN4SlFVRnlRaXhEUVVFd1FpeFZRVUZWVVN4TlFVRldMRVZCUVd0Q08wRkJRM2hEUXl4VlFVRkJRU3hQUVVGUExFTkJRVU5ETEVkQlFWSXNRMEZCV1N4WlFVRmFPenRCUVVWQkxHTkJRVWxHTEUxQlFVMHNTVUZCU1N4UFFVRmtMRVZCUVhWQ08wRkJRMjVDTzBGQlEwRkdMRmxCUVVGQkxGbEJRVmtzUTBGQlEwc3NXVUZCWWl4RFFVRXdRaXh0UWtGQk1VSXNSVUZCSzBNc1NVRkJMME1zUlVGR2JVSXNRMEZKYmtJN08wRkJRMEZNTEZsQlFVRkJMRmxCUVZrc1EwRkJRMDBzVVVGQllpeEhRVUYzUWl4SlFVRjRRaXhEUVV4dFFpeERRVTl1UWpzN1FVRkRRVU1zV1VGQlFVRXNWVUZCVlN4RFFVRkRMRmxCUVZrN1FVRkRia0k3UVVGRFFWQXNZMEZCUVVFc1dVRkJXU3hEUVVGRFVTeGxRVUZpTEVOQlFUWkNMRzFDUVVFM1FpeEZRVVp0UWl4RFFVbHVRanM3UVVGRFFWSXNZMEZCUVVFc1dVRkJXU3hEUVVGRFRTeFJRVUZpTEVkQlFYZENMRXRCUVhoQ0xFTkJURzFDTEVOQlQyNUNPenRCUVVOQmRrSXNZMEZCUVVFc1NVRkJTU3hEUVVGRFF5eEpRVUZNTEVOQlFWVTdRVUZEVGtNc1owSkJRVUZCTEVsQlFVa3NSVUZCUlN4MVEwRkVRVHRCUVVWT1F5eG5Ra0ZCUVVFc1NVRkJTU3hGUVVGRkxGTkJSa0U3UVVGSFRrVXNaMEpCUVVGQkxHTkJRV01zUlVGQlJTeExRVWhXTzBGQlNVNURMR2RDUVVGQlFTeHBRa0ZCYVVJc1JVRkJSU3hoUVVwaU8wRkJTMDVGTEdkQ1FVRkJRU3hYUVVGWExFVkJRVVU3UVVGRFZFTXNhMEpCUVVGQkxHRkJRV0VzUlVGQlJUdEJRVVJPTzBGQlRGQXNaVUZCVml4RlFWRkhSU3hKUVZKSUxFTkJVVkVzVlVGQlZVTXNUVUZCVml4RlFVRnJRanRCUVVOMFFpeHZRa0ZCU1VFc1RVRkJUU3hEUVVGRFl5eFhRVUZZTEVWQlFYZENPMEZCUTNCQ2FFUXNhMEpCUVVGQkxFdEJRVXNzUTBGQlEyOURMRWxCUVU0N1FVRkRTRHRCUVVOS0xHVkJXa1FzUlVGU2JVSXNRMEZ6UW01Q08wRkJRMGdzWVVGMlFsTXNSVUYxUWxBc1NVRjJRazhzUTBGQlZqdEJRWGRDU0N4WFFXaERSQ3hOUVdkRFR6dEJRVU5JTzBGQlEwRmtMRmxCUVVGQkxFbEJRVWtzUTBGQlEwTXNTVUZCVEN4RFFVRlZPMEZCUTA1RExHTkJRVUZCTEVsQlFVa3NSVUZCUlN4eFJVRkVRVHRCUVVWT1F5eGpRVUZCUVN4SlFVRkpMRVZCUVVVc1QwRkdRVHRCUVVkT1JTeGpRVUZCUVN4alFVRmpMRVZCUVVVc1MwRklWanRCUVVsT1F5eGpRVUZCUVN4cFFrRkJhVUlzUlVGQlJTeGhRVXBpTzBGQlMwNUZMR05CUVVGQkxGZEJRVmNzUlVGQlJUdEJRVU5VUXl4blFrRkJRVUVzWVVGQllTeEZRVUZGTzBGQlJFNDdRVUZNVUN4aFFVRldPMEZCVTBnN1FVRkRTaXhUUVM5RFJEdEJRV2RFU0R0QlFVTktMRXRCZGtSRU8wRkJkMFJJTEVkQk9VbEVMRU5CVUhWRExFTkJkVXAyUXpzN08wRkJRMEVzVFVGQlRXdENMR1ZCUVdVc1IwRkJSeXhUUVVGc1FrRXNaVUZCYTBJc1IwRkJUVHRCUVVNeFFqdEJRVU5CTEZGQlFVMURMRk5CUVZNc1IwRkJSM0JFTEVsQlFVa3NRMEZCUTBNc1lVRkJUQ3hEUVVGdFFpeHpRa0ZCYmtJc1EwRkJiRUk3UVVGRFFTeFJRVUZOYjBRc1lVRkJZU3hIUVVGSGNrUXNTVUZCU1N4RFFVRkRjMFFzWjBKQlFVd3NRMEZCYzBJc2JVSkJRWFJDTEVOQlFYUkNMRU5CU0RCQ0xFTkJTekZDT3p0QlFVTkJSaXhKUVVGQlFTeFRRVUZUTEVOQlFVTXZRaXhuUWtGQlZpeERRVUV5UWl4UlFVRXpRaXhGUVVGeFF5eFZRVUZCUXl4RFFVRkRMRVZCUVVrN1FVRkZkRU03UVVGRFFTdENMRTFCUVVGQkxHRkJRV0VzUTBGQlEwVXNUMEZCWkN4RFFVRnpRaXhWUVVGQlF5eERRVUZETEVWQlFVazdRVUZEZGtKQkxGRkJRVUZCTEVOQlFVTXNRMEZCUTBNc1QwRkJSaXhIUVVGWmJrTXNRMEZCUXl4RFFVRkRiME1zVFVGQlJpeERRVUZUUkN4UFFVRnlRanRCUVVOSUxFOUJSa1E3UVVGSFNDeExRVTVFTzBGQlQwZ3NSMEZpUkRzN1FVRmxRU3hUUVVGUE8wRkJRMGc3UVVGRFFVVXNTVUZCUVVFc1NVRkJTU3hGUVVGRkxHZENRVUZaTzBGQlEyUjBSQ3hOUVVGQlFTeHhRa0ZCY1VJN1FVRkRja0k0UXl4TlFVRkJRU3hsUVVGbE8wRkJRMnhDTzBGQlRFVXNSMEZCVUR0QlFVOUlMRU5CT1VzNFFpeEZRVUV2UWl4RExFTkJaMHhCT3pzN1FVRkRRVk1zVFVGQlRTeERRVUZEUXl4clFrRkJVQ3hEUVVFd1FpeFpRVUZaTzBGQlEyeERha1VzUlVGQlFVRXNkMEpCUVhkQ0xFTkJRVU1yUkN4SlFVRjZRanRCUVVOSUxFTkJSa1FpTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl5WlhOdmRYSmpaWE12WVhOelpYUnpMMk52Y21VdmFuTXZZM1Z6ZEc5dEwyRndjSE12ZFhObGNpMXRZVzVoWjJWdFpXNTBMM0p2YkdWekwyeHBjM1F2ZFhCa1lYUmxMWEp2YkdVdWFuTS9OMlJtT0NKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2NseHVYSEpjYmk4dklFTnNZWE56SUdSbFptbHVhWFJwYjI1Y2NseHVkbUZ5SUV0VVZYTmxjbk5WY0dSaGRHVlFaWEp0YVhOemFXOXVjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDOHZJRk5vWVhKbFpDQjJZWEpwWVdKc1pYTmNjbHh1SUNBZ0lHTnZibk4wSUdWc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYTNSZmJXOWtZV3hmZFhCa1lYUmxYM0p2YkdVbktUdGNjbHh1SUNBZ0lHTnZibk4wSUdadmNtMGdQU0JsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5TnJkRjl0YjJSaGJGOTFjR1JoZEdWZmNtOXNaVjltYjNKdEp5azdYSEpjYmlBZ0lDQmpiMjV6ZENCdGIyUmhiQ0E5SUc1bGR5QmliMjkwYzNSeVlYQXVUVzlrWVd3b1pXeGxiV1Z1ZENrN1hISmNibHh5WEc0Z0lDQWdMeThnU1c1cGRDQmhaR1FnYzJOb1pXUjFiR1VnYlc5a1lXeGNjbHh1SUNBZ0lIWmhjaUJwYm1sMFZYQmtZWFJsVUdWeWJXbHpjMmx2Ym5NZ1BTQW9LU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFbHVhWFFnWm05eWJTQjJZV3hwWkdGMGFXOXVJSEoxYkdWekxpQkdiM0lnYlc5eVpTQnBibVp2SUdOb1pXTnJJSFJvWlNCR2IzSnRWbUZzYVdSaGRHbHZiaUJ3YkhWbmFXNG5jeUJ2Wm1acFkybGhiQ0JrYjJOMWJXVnVkR0YwYVc5dU9taDBkSEJ6T2k4dlptOXliWFpoYkdsa1lYUnBiMjR1YVc4dlhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGJHbGtZWFJ2Y2lBOUlFWnZjbTFXWVd4cFpHRjBhVzl1TG1admNtMVdZV3hwWkdGMGFXOXVLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaSE02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuY205c1pWOXVZVzFsSnpvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3hwWkdGMGIzSnpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM1JGYlhCMGVUb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2RTYjJ4bElHNWhiV1VnYVhNZ2NtVnhkV2x5WldRblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JIVm5hVzV6T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKcFoyZGxjam9nYm1WM0lFWnZjbTFXWVd4cFpHRjBhVzl1TG5Cc2RXZHBibk11VkhKcFoyZGxjaWdwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2YjNSemRISmhjRG9nYm1WM0lFWnZjbTFXWVd4cFpHRjBhVzl1TG5Cc2RXZHBibk11UW05dmRITjBjbUZ3TlNoN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkMU5sYkdWamRHOXlPaUFuTG1aMkxYSnZkeWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pVbHVkbUZzYVdSRGJHRnpjem9nSnljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVlpoYkdsa1EyeGhjM002SUNjblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVOc2IzTmxJR0oxZEhSdmJpQm9ZVzVrYkdWeVhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyeHZjMlZDZFhSMGIyNGdQU0JsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0oxdGtZWFJoTFd0MExYSnZiR1Z6TFcxdlpHRnNMV0ZqZEdsdmJqMWNJbU5zYjNObFhDSmRKeWs3WEhKY2JpQWdJQ0FnSUNBZ1kyeHZjMlZDZFhSMGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQmxJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1UzZGhiQzVtYVhKbEtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklGd2lRWEpsSUhsdmRTQnpkWEpsSUhsdmRTQjNiM1ZzWkNCc2FXdGxJSFJ2SUdOc2IzTmxQMXdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiam9nWENKM1lYSnVhVzVuWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzkzUTJGdVkyVnNRblYwZEc5dU9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1YzFOMGVXeHBibWM2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJsUmxlSFE2SUZ3aVdXVnpMQ0JqYkc5elpTQnBkQ0ZjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhibU5sYkVKMWRIUnZibFJsZUhRNklGd2lUbThzSUhKbGRIVnlibHdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0UTJ4aGMzTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVhKdFFuVjBkRzl1T2lCY0ltSjBiaUJpZEc0dGNISnBiV0Z5ZVZ3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJtTmxiRUoxZEhSdmJqb2dYQ0ppZEc0Z1luUnVMV0ZqZEdsMlpTMXNhV2RvZEZ3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tISmxjM1ZzZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQzUyWVd4MVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZaR0ZzTG1ocFpHVW9LVHNnTHk4Z1NHbGtaU0J0YjJSaGJGeDBYSFJjZEZ4MFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkRZVzVqWld3Z1luVjBkRzl1SUdoaGJtUnNaWEpjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqWVc1alpXeENkWFIwYjI0Z1BTQmxiR1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSjF0a1lYUmhMV3QwTFhKdmJHVnpMVzF2WkdGc0xXRmpkR2x2YmoxY0ltTmhibU5sYkZ3aVhTY3BPMXh5WEc0Z0lDQWdJQ0FnSUdOaGJtTmxiRUoxZEhSdmJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCVGQyRnNMbVpwY21Vb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1hDSkJjbVVnZVc5MUlITjFjbVVnZVc5MUlIZHZkV3hrSUd4cGEyVWdkRzhnWTJGdVkyVnNQMXdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiam9nWENKM1lYSnVhVzVuWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzkzUTJGdVkyVnNRblYwZEc5dU9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1YzFOMGVXeHBibWM2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJsUmxlSFE2SUZ3aVdXVnpMQ0JqWVc1alpXd2dhWFFoWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZVzVqWld4Q2RYUjBiMjVVWlhoME9pQmNJazV2TENCeVpYUjFjbTVjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjM1J2YlVOc1lYTnpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1seWJVSjFkSFJ2YmpvZ1hDSmlkRzRnWW5SdUxYQnlhVzFoY25sY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXNWpaV3hDZFhSMGIyNDZJRndpWW5SdUlHSjBiaTFoWTNScGRtVXRiR2xuYUhSY0lseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaHlaWE4xYkhRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFF1ZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0TG5KbGMyVjBLQ2s3SUM4dklGSmxjMlYwSUdadmNtMWNkRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZaR0ZzTG1ocFpHVW9LVHNnTHk4Z1NHbGtaU0J0YjJSaGJGeDBYSFJjZEZ4MFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzNWc2RDNWthWE50YVhOeklEMDlQU0FuWTJGdVkyVnNKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk4zWVd3dVptbHlaU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJRndpV1c5MWNpQm1iM0p0SUdoaGN5QnViM1FnWW1WbGJpQmpZVzVqWld4c1pXUWhMbHdpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVPaUJjSW1WeWNtOXlYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMWRIUnZibk5UZEhsc2FXNW5PaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1seWJVSjFkSFJ2YmxSbGVIUTZJRndpVDJzc0lHZHZkQ0JwZENGY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFEyeGhjM002SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acGNtMUNkWFIwYjI0NklGd2lZblJ1SUdKMGJpMXdjbWx0WVhKNVhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZOMVltMXBkQ0JpZFhSMGIyNGdhR0Z1Wkd4bGNseHlYRzRnSUNBZ0lDQWdJR052Ym5OMElITjFZbTFwZEVKMWRIUnZiaUE5SUdWc1pXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25XMlJoZEdFdGEzUXRjbTlzWlhNdGJXOWtZV3d0WVdOMGFXOXVQVndpYzNWaWJXbDBYQ0pkSnlrN1hISmNiaUFnSUNBZ0lDQWdjM1ZpYldsMFFuVjBkRzl1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVSEpsZG1WdWRDQmtaV1poZFd4MElHSjFkSFJ2YmlCaFkzUnBiMjVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZtRnNhV1JoZEdVZ1ptOXliU0JpWldadmNtVWdjM1ZpYldsMFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3hwWkdGMGIzSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJHbGtZWFJ2Y2k1MllXeHBaR0YwWlNncExuUm9aVzRvWm5WdVkzUnBiMjRnS0hOMFlYUjFjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkMllXeHBaR0YwWldRaEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHRjBkWE1nUFQwZ0oxWmhiR2xrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYUc5M0lHeHZZV1JwYm1jZ2FXNWthV05oZEdsdmJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV0p0YVhSQ2RYUjBiMjR1YzJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFd0MExXbHVaR2xqWVhSdmNpY3NJQ2R2YmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JHbHpZV0pzWlNCaWRYUjBiMjRnZEc4Z1lYWnZhV1FnYlhWc2RHbHdiR1VnWTJ4cFkyc2dYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWW0xcGRFSjFkSFJ2Ymk1a2FYTmhZbXhsWkNBOUlIUnlkV1U3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYVcxMWJHRjBaU0JtYjNKdElITjFZbTFwYzNOcGIyNHVJRVp2Y2lCdGIzSmxJR2x1Wm04Z1kyaGxZMnNnZEdobElIQnNkV2RwYmlkeklHOW1abWxqYVdGc0lHUnZZM1Z0Wlc1MFlYUnBiMjQ2SUdoMGRIQnpPaTh2YzNkbFpYUmhiR1Z5ZERJdVoybDBhSFZpTG1sdkwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGJXOTJaU0JzYjJGa2FXNW5JR2x1WkdsallYUnBiMjVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFZbTFwZEVKMWRIUnZiaTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGEzUXRhVzVrYVdOaGRHOXlKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JXNWhZbXhsSUdKMWRIUnZibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmliV2wwUW5WMGRHOXVMbVJwYzJGaWJHVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJodmR5QndiM0IxY0NCamIyNW1hWEp0WVhScGIyNGdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVGQyRnNMbVpwY21Vb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUZ3aVJtOXliU0JvWVhNZ1ltVmxiaUJ6ZFdOalpYTnpablZzYkhrZ2MzVmliV2wwZEdWa0lWd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklGd2ljM1ZqWTJWemMxd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJuTlRkSGxzYVc1bk9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hWEp0UW5WMGRHOXVWR1Y0ZERvZ1hDSlBheXdnWjI5MElHbDBJVndpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVU5zWVhOek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBjbTFDZFhSMGIyNDZJRndpWW5SdUlHSjBiaTF3Y21sdFlYSjVYQ0pjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaHlaWE4xYkhRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBMbWx6UTI5dVptbHliV1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2WkdGc0xtaHBaR1VvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyWnZjbTB1YzNWaWJXbDBLQ2s3SUM4dklGTjFZbTFwZENCbWIzSnRYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSURJd01EQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYjNjZ2NHOXdkWEFnZDJGeWJtbHVaeTRnUm05eUlHMXZjbVVnYVc1bWJ5QmphR1ZqYXlCMGFHVWdjR3gxWjJsdUozTWdiMlptYVdOcFlXd2daRzlqZFcxbGJuUmhkR2x2YmpvZ2FIUjBjSE02THk5emQyVmxkR0ZzWlhKME1pNW5hWFJvZFdJdWFXOHZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk4zWVd3dVptbHlaU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCY0lsTnZjbko1TENCc2IyOXJjeUJzYVd0bElIUm9aWEpsSUdGeVpTQnpiMjFsSUdWeWNtOXljeUJrWlhSbFkzUmxaQ3dnY0d4bFlYTmxJSFJ5ZVNCaFoyRnBiaTVjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklGd2laWEp5YjNKY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMWRIUnZibk5UZEhsc2FXNW5PaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBjbTFDZFhSMGIyNVVaWGgwT2lCY0lrOXJMQ0JuYjNRZ2FYUWhYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxRGJHRnpjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBjbTFDZFhSMGIyNDZJRndpWW5SdUlHSjBiaTF3Y21sdFlYSjVYQ0pjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdkx5QlRaV3hsWTNRZ1lXeHNJR2hoYm1Sc1pYSmNjbHh1SUNBZ0lHTnZibk4wSUdoaGJtUnNaVk5sYkdWamRFRnNiQ0E5SUNncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QkVaV1pwYm1VZ2RtRnlhV0ZpYkdWelhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyVnNaV04wUVd4c0lEMGdabTl5YlM1eGRXVnllVk5sYkdWamRHOXlLQ2NqYTNSZmNtOXNaWE5mYzJWc1pXTjBYMkZzYkNjcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHRnNiRU5vWldOclltOTRaWE1nUFNCbWIzSnRMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMXQwZVhCbFBWd2lZMmhsWTJ0aWIzaGNJbDBuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NHRnVaR3hsSUdOb1pXTnJJSE4wWVhSbFhISmNiaUFnSUNBZ0lDQWdjMlZzWldOMFFXeHNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5vWVc1blpTY3NJR1VnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUVhCd2JIa2dZMmhsWTJzZ2MzUmhkR1VnZEc4Z1lXeHNJR05vWldOclltOTRaWE5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZV3hzUTJobFkydGliM2hsY3k1bWIzSkZZV05vS0dNZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXk1amFHVmphMlZrSUQwZ1pTNTBZWEpuWlhRdVkyaGxZMnRsWkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJRZFdKc2FXTWdablZ1WTNScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnYVc1cGREb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMFZYQmtZWFJsVUdWeWJXbHpjMmx2Ym5Nb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVTJWc1pXTjBRV3hzS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dWZTZ3BPMXh5WEc1Y2NseHVMeThnVDI0Z1pHOWpkVzFsYm5RZ2NtVmhaSGxjY2x4dVMxUlZkR2xzTG05dVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNobWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQkxWRlZ6WlhKelZYQmtZWFJsVUdWeWJXbHpjMmx2Ym5NdWFXNXBkQ2dwTzF4eVhHNTlLVHNpWFN3aWJtRnRaWE1pT2xzaVMxUlZjMlZ5YzFWd1pHRjBaVkJsY20xcGMzTnBiMjV6SWl3aVpXeGxiV1Z1ZENJc0ltUnZZM1Z0Wlc1MElpd2laMlYwUld4bGJXVnVkRUo1U1dRaUxDSm1iM0p0SWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW0xdlpHRnNJaXdpWW05dmRITjBjbUZ3SWl3aVRXOWtZV3dpTENKcGJtbDBWWEJrWVhSbFVHVnliV2x6YzJsdmJuTWlMQ0oyWVd4cFpHRjBiM0lpTENKR2IzSnRWbUZzYVdSaGRHbHZiaUlzSW1admNtMVdZV3hwWkdGMGFXOXVJaXdpWm1sbGJHUnpJaXdpZG1Gc2FXUmhkRzl5Y3lJc0ltNXZkRVZ0Y0hSNUlpd2liV1Z6YzJGblpTSXNJbkJzZFdkcGJuTWlMQ0owY21sbloyVnlJaXdpVkhKcFoyZGxjaUlzSWtKdmIzUnpkSEpoY0RVaUxDSnliM2RUWld4bFkzUnZjaUlzSW1Wc1pVbHVkbUZzYVdSRGJHRnpjeUlzSW1Wc1pWWmhiR2xrUTJ4aGMzTWlMQ0pqYkc5elpVSjFkSFJ2YmlJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmxJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0pUZDJGc0lpd2labWx5WlNJc0luUmxlSFFpTENKcFkyOXVJaXdpYzJodmQwTmhibU5sYkVKMWRIUnZiaUlzSW1KMWRIUnZibk5UZEhsc2FXNW5JaXdpWTI5dVptbHliVUoxZEhSdmJsUmxlSFFpTENKallXNWpaV3hDZFhSMGIyNVVaWGgwSWl3aVkzVnpkRzl0UTJ4aGMzTWlMQ0pqYjI1bWFYSnRRblYwZEc5dUlpd2lZMkZ1WTJWc1FuVjBkRzl1SWl3aWRHaGxiaUlzSW5KbGMzVnNkQ0lzSW5aaGJIVmxJaXdpYUdsa1pTSXNJbkpsYzJWMElpd2laR2x6YldsemN5SXNJbk4xWW0xcGRFSjFkSFJ2YmlJc0luWmhiR2xrWVhSbElpd2ljM1JoZEhWeklpd2lZMjl1YzI5c1pTSXNJbXh2WnlJc0luTmxkRUYwZEhKcFluVjBaU0lzSW1ScGMyRmliR1ZrSWl3aWMyVjBWR2x0Wlc5MWRDSXNJbkpsYlc5MlpVRjBkSEpwWW5WMFpTSXNJbWx6UTI5dVptbHliV1ZrSWl3aWFHRnVaR3hsVTJWc1pXTjBRV3hzSWl3aWMyVnNaV04wUVd4c0lpd2lZV3hzUTJobFkydGliM2hsY3lJc0luRjFaWEo1VTJWc1pXTjBiM0pCYkd3aUxDSm1iM0pGWVdOb0lpd2lZeUlzSW1Ob1pXTnJaV1FpTENKMFlYSm5aWFFpTENKcGJtbDBJaXdpUzFSVmRHbHNJaXdpYjI1RVQwMURiMjUwWlc1MFRHOWhaR1ZrSWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy91c2VyLW1hbmFnZW1lbnQvcm9sZXMvbGlzdC91cGRhdGUtcm9sZS5qc1xcblwiKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBzdGFydHVwXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBjYW4ndCBiZSBpbmxpbmVkIGJlY2F1c2UgdGhlIGV2YWwtc291cmNlLW1hcCBkZXZ0b29sIGlzIHVzZWQuXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vKioqKioqLyBcdF9fd2VicGFja19tb2R1bGVzX19bXCIuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vYXBwcy91c2VyLW1hbmFnZW1lbnQvcm9sZXMvbGlzdC91cGRhdGUtcm9sZS5qc1wiXSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIH0pKClcbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFTLENBQUMsWUFBTTtFQUFFO0VBQ2xCO0VBQVUsWUFBWTs7RUFDdEI7RUFBVSxJQUFJQSxtQkFBbUIsR0FBSTtJQUVyQyxLQUFNLGtGQUFrRjtJQUN4RjtBQUNBO0FBQ0E7SUFDQTtJQUFPLFNBQUFDLG1FQUFBLEVBQU07TUFFYkMsSUFBSSxDQUFDLG94c0JBQW94c0IsQ0FBQzs7TUFFMXhzQjtJQUFNLENBQUM7O0lBRVA7RUFBVSxDQUFFO0VBQ1o7RUFDQTtFQUNBLFNBQVU7RUFDVixTQUFVO0VBQ1YsU0FBVTtFQUNWO0VBQVUsSUFBSUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDO0VBQVVILG1CQUFtQixDQUFDLGtGQUFrRixDQUFDLENBQUMsQ0FBQztFQUNuSDtFQUNBO0FBQVMsQ0FBQyxFQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9kZW1vMS9qcy9jdXN0b20vYXBwcy91c2VyLW1hbmFnZW1lbnQvcm9sZXMvbGlzdC91cGRhdGUtcm9sZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/user-management/roles/list/update-role.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/user-management/roles/list/update-role.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/user-management/roles/list/update-role.js"]();
/******/ 	
/******/ })()
;