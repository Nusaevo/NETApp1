/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js ***!
  \*************************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTUsersAddTask = function () {\n  // Shared variables\n  var element = document.getElementById('kt_modal_add_task');\n  var form = element.querySelector('#kt_modal_add_task_form');\n  var modal = new bootstrap.Modal(element); // Init add task modal\n\n  var initAddTask = function initAddTask() {\n    // Init flatpickr -- for more info: https://flatpickr.js.org/\n    $(\"#kt_modal_add_task_datepicker\").flatpickr({\n      dateFormat: \"Y-m-d\"\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'task_duedate': {\n          validators: {\n            notEmpty: {\n              message: 'Task due date is required'\n            }\n          }\n        },\n        'task_name': {\n          validators: {\n            notEmpty: {\n              message: 'Task name is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Close button handler\n\n    var closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // Cancel button handler\n\n    var cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // Submit button handler\n\n    var submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Init update task status\n\n\n  var initUpdateTaskStatus = function initUpdateTaskStatus() {\n    var allTaskMenus = document.querySelectorAll('[data-kt-menu-id=\"kt-users-tasks\"]');\n    allTaskMenus.forEach(function (el) {\n      var resetButton = el.querySelector('[data-kt-users-update-task-status=\"reset\"]');\n      var submitButton = el.querySelector('[data-kt-users-update-task-status=\"submit\"]');\n      var taskForm = el.querySelector('[data-kt-menu-id=\"kt-users-tasks-form\"]'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n      var validator = FormValidation.formValidation(taskForm, {\n        fields: {\n          'task_status': {\n            validators: {\n              notEmpty: {\n                message: 'Task due date is required'\n              }\n            }\n          }\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      }); // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\n\n      $(taskForm.querySelector('[name=\"task_status\"]')).on('change', function () {\n        // Revalidate the field when an option is chosen\n        validator.revalidateField('task_status');\n      }); // Reset action handler\n\n      resetButton.addEventListener('click', function (e) {\n        e.preventDefault();\n        Swal.fire({\n          text: \"Are you sure you would like to reset?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, reset it!\",\n          cancelButtonText: \"No, return\",\n          customClass: {\n            confirmButton: \"btn btn-primary\",\n            cancelButton: \"btn btn-active-light\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            taskForm.reset(); // Reset form\t\t\n\n            el.hide();\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: \"Your form was not reset!.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }); // Submit action handler\n\n      submitButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Validate form before submit\n\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n\n            if (status == 'Valid') {\n              // Show loading indication\n              submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n              submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n              setTimeout(function () {\n                // Remove loading indication\n                submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n                submitButton.disabled = false; // Show popup confirmation \n\n                Swal.fire({\n                  text: \"Form has been successfully submitted!\",\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                }).then(function (result) {\n                  if (result.isConfirmed) {\n                    el.hide();\n                  }\n                }); //taskForm.submit(); // Submit form\n              }, 2000);\n            } else {\n              // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n              Swal.fire({\n                text: \"Sorry, looks like there are some errors detected, please try again.\",\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function () {//el.show();\n              });\n            }\n          });\n        }\n      });\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      initAddTask();\n      initUpdateTaskStatus();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersAddTask.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/user-management/users/view/add-task.js":
/*!**************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/user-management/users/view/add-task.js ***!
  \**************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js\":\n    /*!*************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js ***!\r\n      \\*************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsUserManagementUsersViewAddTaskJs() {\n      eval(\" // Class definition\\n\\nvar KTUsersAddTask = function () {\\n  // Shared variables\\n  var element = document.getElementById('kt_modal_add_task');\\n  var form = element.querySelector('#kt_modal_add_task_form');\\n  var modal = new bootstrap.Modal(element); // Init add task modal\\n\\n  var initAddTask = function initAddTask() {\\n    // Init flatpickr -- for more info: https://flatpickr.js.org/\\n    $(\\\"#kt_modal_add_task_datepicker\\\").flatpickr({\\n      dateFormat: \\\"Y-m-d\\\"\\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n    var validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'task_duedate': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Task due date is required'\\n            }\\n          }\\n        },\\n        'task_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Task name is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Close button handler\\n\\n    var closeButton = element.querySelector('[data-kt-users-modal-action=\\\"close\\\"]');\\n    closeButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    }); // Cancel button handler\\n\\n    var cancelButton = element.querySelector('[data-kt-users-modal-action=\\\"cancel\\\"]');\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    }); // Submit button handler\\n\\n    var submitButton = element.querySelector('[data-kt-users-modal-action=\\\"submit\\\"]');\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            setTimeout(function () {\\n              // Remove loading indication\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false; // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Init update task status\\n\\n\\n  var initUpdateTaskStatus = function initUpdateTaskStatus() {\\n    var allTaskMenus = document.querySelectorAll('[data-kt-menu-id=\\\"kt-users-tasks\\\"]');\\n    allTaskMenus.forEach(function (el) {\\n      var resetButton = el.querySelector('[data-kt-users-update-task-status=\\\"reset\\\"]');\\n      var submitButton = el.querySelector('[data-kt-users-update-task-status=\\\"submit\\\"]');\\n      var taskForm = el.querySelector('[data-kt-menu-id=\\\"kt-users-tasks-form\\\"]'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n      var validator = FormValidation.formValidation(taskForm, {\\n        fields: {\\n          'task_status': {\\n            validators: {\\n              notEmpty: {\\n                message: 'Task due date is required'\\n              }\\n            }\\n          }\\n        },\\n        plugins: {\\n          trigger: new FormValidation.plugins.Trigger(),\\n          bootstrap: new FormValidation.plugins.Bootstrap5({\\n            rowSelector: '.fv-row',\\n            eleInvalidClass: '',\\n            eleValidClass: ''\\n          })\\n        }\\n      }); // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\\n\\n      $(taskForm.querySelector('[name=\\\"task_status\\\"]')).on('change', function () {\\n        // Revalidate the field when an option is chosen\\n        validator.revalidateField('task_status');\\n      }); // Reset action handler\\n\\n      resetButton.addEventListener('click', function (e) {\\n        e.preventDefault();\\n        Swal.fire({\\n          text: \\\"Are you sure you would like to reset?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, reset it!\\\",\\n          cancelButtonText: \\\"No, return\\\",\\n          customClass: {\\n            confirmButton: \\\"btn btn-primary\\\",\\n            cancelButton: \\\"btn btn-active-light\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            taskForm.reset(); // Reset form\\t\\t\\n\\n            el.hide();\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: \\\"Your form was not reset!.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }); // Submit action handler\\n\\n      submitButton.addEventListener('click', function (e) {\\n        e.preventDefault(); // Validate form before submit\\n\\n        if (validator) {\\n          validator.validate().then(function (status) {\\n            console.log('validated!');\\n\\n            if (status == 'Valid') {\\n              // Show loading indication\\n              submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n              submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n              setTimeout(function () {\\n                // Remove loading indication\\n                submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n                submitButton.disabled = false; // Show popup confirmation \\n\\n                Swal.fire({\\n                  text: \\\"Form has been successfully submitted!\\\",\\n                  icon: \\\"success\\\",\\n                  buttonsStyling: false,\\n                  confirmButtonText: \\\"Ok, got it!\\\",\\n                  customClass: {\\n                    confirmButton: \\\"btn btn-primary\\\"\\n                  }\\n                }).then(function (result) {\\n                  if (result.isConfirmed) {\\n                    el.hide();\\n                  }\\n                }); //taskForm.submit(); // Submit form\\n              }, 2000);\\n            } else {\\n              // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n              Swal.fire({\\n                text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function () {//el.show();\\n              });\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      initAddTask();\\n      initUpdateTaskStatus();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTUsersAddTask.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/user-management/users/view/add-task.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/user-management/users/view/add-task.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/user-management/users/view/add-task.js"]();
/******/ 	
/******/ })()
;