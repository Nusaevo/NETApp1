/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/inbox/reply.js":
/*!*************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/inbox/reply.js ***!
  \*************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTAppInboxReply = function () {\n  // Private functions\n  var handlePreviewText = function handlePreviewText() {\n    // Get all messages\n    var accordions = document.querySelectorAll('[data-kt-inbox-message=\"message_wrapper\"]');\n    accordions.forEach(function (accordion) {\n      // Set variables\n      var header = accordion.querySelector('[data-kt-inbox-message=\"header\"]');\n      var previewText = accordion.querySelector('[data-kt-inbox-message=\"preview\"]');\n      var details = accordion.querySelector('[data-kt-inbox-message=\"details\"]');\n      var message = accordion.querySelector('[data-kt-inbox-message=\"message\"]'); // Init bootstrap collapse -- more info: https://getbootstrap.com/docs/5.1/components/collapse/#via-javascript\n\n      var collapse = new bootstrap.Collapse(message, {\n        toggle: false\n      }); // Handle header click action\n\n      header.addEventListener('click', function (e) {\n        // Return if KTMenu or buttons are clicked\n        if (e.target.closest('[data-kt-menu-trigger=\"click\"]') || e.target.closest('.btn')) {\n          return;\n        } else {\n          previewText.classList.toggle('d-none');\n          details.classList.toggle('d-none');\n          collapse.toggle();\n        }\n      });\n    });\n  }; // Init reply form\n\n\n  var initForm = function initForm() {\n    // Set variables\n    var form = document.querySelector('#kt_inbox_reply_form');\n    var allTagify = form.querySelectorAll('[data-kt-inbox-form=\"tagify\"]'); // Handle CC and BCC\n\n    handleCCandBCC(form); // Handle submit form\n\n    handleSubmit(form); // Init tagify\n\n    allTagify.forEach(function (tagify) {\n      initTagify(tagify);\n    }); // Init quill editor\n\n    initQuill(form); // Init dropzone\n\n    initDropzone(form);\n  }; // Handle CC and BCC toggle\n\n\n  var handleCCandBCC = function handleCCandBCC(el) {\n    // Get elements\n    var ccElement = el.querySelector('[data-kt-inbox-form=\"cc\"]');\n    var ccButton = el.querySelector('[data-kt-inbox-form=\"cc_button\"]');\n    var ccClose = el.querySelector('[data-kt-inbox-form=\"cc_close\"]');\n    var bccElement = el.querySelector('[data-kt-inbox-form=\"bcc\"]');\n    var bccButton = el.querySelector('[data-kt-inbox-form=\"bcc_button\"]');\n    var bccClose = el.querySelector('[data-kt-inbox-form=\"bcc_close\"]'); // Handle CC button click\n\n    ccButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      ccElement.classList.remove('d-none');\n      ccElement.classList.add('d-flex');\n    }); // Handle CC close button click\n\n    ccClose.addEventListener('click', function (e) {\n      e.preventDefault();\n      ccElement.classList.add('d-none');\n      ccElement.classList.remove('d-flex');\n    }); // Handle BCC button click\n\n    bccButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      bccElement.classList.remove('d-none');\n      bccElement.classList.add('d-flex');\n    }); // Handle CC close button click\n\n    bccClose.addEventListener('click', function (e) {\n      e.preventDefault();\n      bccElement.classList.add('d-none');\n      bccElement.classList.remove('d-flex');\n    });\n  }; // Handle submit form\n\n\n  var handleSubmit = function handleSubmit(el) {\n    var submitButton = el.querySelector('[data-kt-inbox-form=\"send\"]'); // Handle button click event\n\n    submitButton.addEventListener(\"click\", function () {\n      // Activate indicator\n      submitButton.setAttribute(\"data-kt-indicator\", \"on\"); // Disable indicator after 3 seconds\n\n      setTimeout(function () {\n        submitButton.removeAttribute(\"data-kt-indicator\");\n      }, 3000);\n    });\n  }; // Init tagify \n\n\n  var initTagify = function initTagify(el) {\n    var inputElm = el;\n    var usersList = [{\n      value: 1,\n      name: 'Emma Smith',\n      avatar: 'avatars/300-6.jpg',\n      email: 'e.smith@kpmg.com.au'\n    }, {\n      value: 2,\n      name: 'Max Smith',\n      avatar: 'avatars/300-1.jpg',\n      email: 'max@kt.com'\n    }, {\n      value: 3,\n      name: 'Sean Bean',\n      avatar: 'avatars/300-5.jpg',\n      email: 'sean@dellito.com'\n    }, {\n      value: 4,\n      name: 'Brian Cox',\n      avatar: 'avatars/300-25.jpg',\n      email: 'brian@exchange.com'\n    }, {\n      value: 5,\n      name: 'Francis Mitcham',\n      avatar: 'avatars/300-9.jpg',\n      email: 'f.mitcham@kpmg.com.au'\n    }, {\n      value: 6,\n      name: 'Dan Wilson',\n      avatar: 'avatars/300-23.jpg',\n      email: 'dam@consilting.com'\n    }, {\n      value: 7,\n      name: 'Ana Crown',\n      avatar: 'avatars/300-12.jpg',\n      email: 'ana.cf@limtel.com'\n    }, {\n      value: 8,\n      name: 'John Miller',\n      avatar: 'avatars/300-13.jpg',\n      email: 'miller@mapple.com'\n    }];\n\n    function tagTemplate(tagData) {\n      return \"\\n                <tag title=\\\"\".concat(tagData.title || tagData.email, \"\\\"\\n                        contenteditable='false'\\n                        spellcheck='false'\\n                        tabIndex=\\\"-1\\\"\\n                        class=\\\"\").concat(this.settings.classNames.tag, \" \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"\\\"\\n                        \").concat(this.getAttributes(tagData), \">\\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <div class='tagify__tag__avatar-wrap ps-0'>\\n                            <img onerror=\\\"this.style.visibility='hidden'\\\" class=\\\"rounded-circle w-25px me-2\\\" src=\\\"\").concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                        </div>\\n                        <span class='tagify__tag-text'>\").concat(tagData.name, \"</span>\\n                    </div>\\n                </tag>\\n            \");\n    }\n\n    function suggestionItemTemplate(tagData) {\n      return \"\\n                <div \".concat(this.getAttributes(tagData), \"\\n                    class='tagify__dropdown__item d-flex align-items-center \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'\\n                    tabindex=\\\"0\\\"\\n                    role=\\\"option\\\">\\n\\n                    \").concat(tagData.avatar ? \"\\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\\n                                <img onerror=\\\"this.style.visibility='hidden'\\\"  class=\\\"rounded-circle w-50px me-2\\\" src=\\\"\".concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                            </div>\") : '', \"\\n\\n                    <div class=\\\"d-flex flex-column\\\">\\n                        <strong>\").concat(tagData.name, \"</strong>\\n                        <span>\").concat(tagData.email, \"</span>\\n                    </div>\\n                </div>\\n            \");\n    } // initialize Tagify on the above input node reference\n\n\n    var tagify = new Tagify(inputElm, {\n      tagTextProp: 'name',\n      // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\n      enforceWhitelist: true,\n      skipInvalid: true,\n      // do not remporarily add invalid tags\n      dropdown: {\n        closeOnSelect: false,\n        enabled: 0,\n        classname: 'users-list',\n        searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\n\n      },\n      templates: {\n        tag: tagTemplate,\n        dropdownItem: suggestionItemTemplate\n      },\n      whitelist: usersList\n    });\n    tagify.on('dropdown:show dropdown:updated', onDropdownShow);\n    tagify.on('dropdown:select', onSelectSuggestion);\n    var addAllSuggestionsElm;\n\n    function onDropdownShow(e) {\n      var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\n\n      if (tagify.suggestedListItems.length > 1) {\n        addAllSuggestionsElm = getAddAllSuggestionsElm(); // insert \"addAllSuggestionsElm\" as the first element in the suggestions list\n\n        dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild);\n      }\n    }\n\n    function onSelectSuggestion(e) {\n      if (e.detail.elm == addAllSuggestionsElm) tagify.dropdown.selectAll.call(tagify);\n    } // create a \"add all\" custom suggestion element every time the dropdown changes\n\n\n    function getAddAllSuggestionsElm() {\n      // suggestions items should be based on \"dropdownItem\" template\n      return tagify.parseTemplate('dropdownItem', [{\n        \"class\": \"addAll\",\n        name: \"Add all\",\n        email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\n          return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1;\n        }, 0) + \" Members\"\n      }]);\n    }\n  }; // Init quill editor \n\n\n  var initQuill = function initQuill(el) {\n    var quill = new Quill('#kt_inbox_form_editor', {\n      modules: {\n        toolbar: [[{\n          header: [1, 2, false]\n        }], ['bold', 'italic', 'underline'], ['image', 'code-block']]\n      },\n      placeholder: 'Type your text here...',\n      theme: 'snow' // or 'bubble'\n\n    }); // Customize editor\n\n    var toolbar = el.querySelector('.ql-toolbar');\n\n    if (toolbar) {\n      var _toolbar$classList;\n\n      var classes = ['px-5', 'border-top-0', 'border-start-0', 'border-end-0'];\n\n      (_toolbar$classList = toolbar.classList).add.apply(_toolbar$classList, classes);\n    }\n  }; // Init dropzone\n\n\n  var initDropzone = function initDropzone(el) {\n    // set the dropzone container id\n    var id = '[data-kt-inbox-form=\"dropzone\"]';\n    var dropzone = el.querySelector(id);\n    var uploadButton = el.querySelector('[data-kt-inbox-form=\"dropzone_upload\"]'); // set the preview element template\n\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://preview.keenthemes.com/api/dropzone/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      maxFilesize: 1,\n      // Max filesize in MB\n      previewTemplate: previewTemplate,\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: uploadButton // Define the element that should be used as click trigger to select files.\n\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n    }); // Update the total progress bar\n\n    myDropzone.on(\"totaluploadprogress\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.width = progress + \"%\";\n      });\n    });\n    myDropzone.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.opacity = \"1\";\n      });\n    }); // Hide the total progress bar when nothing\"s uploading anymore\n\n    myDropzone.on(\"complete\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n        });\n      }, 300);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      handlePreviewText();\n      initForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppInboxReply.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/inbox/reply.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/inbox/reply.js":
/*!**************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/inbox/reply.js ***!
  \**************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/inbox/reply.js\":\n    /*!*************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/inbox/reply.js ***!\r\n      \\*************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsInboxReplyJs() {\n      eval(\" // Class definition\\n\\nvar KTAppInboxReply = function () {\\n  // Private functions\\n  var handlePreviewText = function handlePreviewText() {\\n    // Get all messages\\n    var accordions = document.querySelectorAll('[data-kt-inbox-message=\\\"message_wrapper\\\"]');\\n    accordions.forEach(function (accordion) {\\n      // Set variables\\n      var header = accordion.querySelector('[data-kt-inbox-message=\\\"header\\\"]');\\n      var previewText = accordion.querySelector('[data-kt-inbox-message=\\\"preview\\\"]');\\n      var details = accordion.querySelector('[data-kt-inbox-message=\\\"details\\\"]');\\n      var message = accordion.querySelector('[data-kt-inbox-message=\\\"message\\\"]'); // Init bootstrap collapse -- more info: https://getbootstrap.com/docs/5.1/components/collapse/#via-javascript\\n\\n      var collapse = new bootstrap.Collapse(message, {\\n        toggle: false\\n      }); // Handle header click action\\n\\n      header.addEventListener('click', function (e) {\\n        // Return if KTMenu or buttons are clicked\\n        if (e.target.closest('[data-kt-menu-trigger=\\\"click\\\"]') || e.target.closest('.btn')) {\\n          return;\\n        } else {\\n          previewText.classList.toggle('d-none');\\n          details.classList.toggle('d-none');\\n          collapse.toggle();\\n        }\\n      });\\n    });\\n  }; // Init reply form\\n\\n\\n  var initForm = function initForm() {\\n    // Set variables\\n    var form = document.querySelector('#kt_inbox_reply_form');\\n    var allTagify = form.querySelectorAll('[data-kt-inbox-form=\\\"tagify\\\"]'); // Handle CC and BCC\\n\\n    handleCCandBCC(form); // Handle submit form\\n\\n    handleSubmit(form); // Init tagify\\n\\n    allTagify.forEach(function (tagify) {\\n      initTagify(tagify);\\n    }); // Init quill editor\\n\\n    initQuill(form); // Init dropzone\\n\\n    initDropzone(form);\\n  }; // Handle CC and BCC toggle\\n\\n\\n  var handleCCandBCC = function handleCCandBCC(el) {\\n    // Get elements\\n    var ccElement = el.querySelector('[data-kt-inbox-form=\\\"cc\\\"]');\\n    var ccButton = el.querySelector('[data-kt-inbox-form=\\\"cc_button\\\"]');\\n    var ccClose = el.querySelector('[data-kt-inbox-form=\\\"cc_close\\\"]');\\n    var bccElement = el.querySelector('[data-kt-inbox-form=\\\"bcc\\\"]');\\n    var bccButton = el.querySelector('[data-kt-inbox-form=\\\"bcc_button\\\"]');\\n    var bccClose = el.querySelector('[data-kt-inbox-form=\\\"bcc_close\\\"]'); // Handle CC button click\\n\\n    ccButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      ccElement.classList.remove('d-none');\\n      ccElement.classList.add('d-flex');\\n    }); // Handle CC close button click\\n\\n    ccClose.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      ccElement.classList.add('d-none');\\n      ccElement.classList.remove('d-flex');\\n    }); // Handle BCC button click\\n\\n    bccButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      bccElement.classList.remove('d-none');\\n      bccElement.classList.add('d-flex');\\n    }); // Handle CC close button click\\n\\n    bccClose.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      bccElement.classList.add('d-none');\\n      bccElement.classList.remove('d-flex');\\n    });\\n  }; // Handle submit form\\n\\n\\n  var handleSubmit = function handleSubmit(el) {\\n    var submitButton = el.querySelector('[data-kt-inbox-form=\\\"send\\\"]'); // Handle button click event\\n\\n    submitButton.addEventListener(\\\"click\\\", function () {\\n      // Activate indicator\\n      submitButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Disable indicator after 3 seconds\\n\\n      setTimeout(function () {\\n        submitButton.removeAttribute(\\\"data-kt-indicator\\\");\\n      }, 3000);\\n    });\\n  }; // Init tagify \\n\\n\\n  var initTagify = function initTagify(el) {\\n    var inputElm = el;\\n    var usersList = [{\\n      value: 1,\\n      name: 'Emma Smith',\\n      avatar: 'avatars/300-6.jpg',\\n      email: 'e.smith@kpmg.com.au'\\n    }, {\\n      value: 2,\\n      name: 'Max Smith',\\n      avatar: 'avatars/300-1.jpg',\\n      email: 'max@kt.com'\\n    }, {\\n      value: 3,\\n      name: 'Sean Bean',\\n      avatar: 'avatars/300-5.jpg',\\n      email: 'sean@dellito.com'\\n    }, {\\n      value: 4,\\n      name: 'Brian Cox',\\n      avatar: 'avatars/300-25.jpg',\\n      email: 'brian@exchange.com'\\n    }, {\\n      value: 5,\\n      name: 'Francis Mitcham',\\n      avatar: 'avatars/300-9.jpg',\\n      email: 'f.mitcham@kpmg.com.au'\\n    }, {\\n      value: 6,\\n      name: 'Dan Wilson',\\n      avatar: 'avatars/300-23.jpg',\\n      email: 'dam@consilting.com'\\n    }, {\\n      value: 7,\\n      name: 'Ana Crown',\\n      avatar: 'avatars/300-12.jpg',\\n      email: 'ana.cf@limtel.com'\\n    }, {\\n      value: 8,\\n      name: 'John Miller',\\n      avatar: 'avatars/300-13.jpg',\\n      email: 'miller@mapple.com'\\n    }];\\n\\n    function tagTemplate(tagData) {\\n      return \\\"\\\\n                <tag title=\\\\\\\"\\\".concat(tagData.title || tagData.email, \\\"\\\\\\\"\\\\n                        contenteditable='false'\\\\n                        spellcheck='false'\\\\n                        tabIndex=\\\\\\\"-1\\\\\\\"\\\\n                        class=\\\\\\\"\\\").concat(this.settings.classNames.tag, \\\" \\\").concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"\\\\\\\"\\\\n                        \\\").concat(this.getAttributes(tagData), \\\">\\\\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\\\n                    <div class=\\\\\\\"d-flex align-items-center\\\\\\\">\\\\n                        <div class='tagify__tag__avatar-wrap ps-0'>\\\\n                            <img onerror=\\\\\\\"this.style.visibility='hidden'\\\\\\\" class=\\\\\\\"rounded-circle w-25px me-2\\\\\\\" src=\\\\\\\"\\\").concat(hostUrl, \\\"media/\\\").concat(tagData.avatar, \\\"\\\\\\\">\\\\n                        </div>\\\\n                        <span class='tagify__tag-text'>\\\").concat(tagData.name, \\\"</span>\\\\n                    </div>\\\\n                </tag>\\\\n            \\\");\\n    }\\n\\n    function suggestionItemTemplate(tagData) {\\n      return \\\"\\\\n                <div \\\".concat(this.getAttributes(tagData), \\\"\\\\n                    class='tagify__dropdown__item d-flex align-items-center \\\").concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"'\\\\n                    tabindex=\\\\\\\"0\\\\\\\"\\\\n                    role=\\\\\\\"option\\\\\\\">\\\\n\\\\n                    \\\").concat(tagData.avatar ? \\\"\\\\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\\\\n                                <img onerror=\\\\\\\"this.style.visibility='hidden'\\\\\\\"  class=\\\\\\\"rounded-circle w-50px me-2\\\\\\\" src=\\\\\\\"\\\".concat(hostUrl, \\\"media/\\\").concat(tagData.avatar, \\\"\\\\\\\">\\\\n                            </div>\\\") : '', \\\"\\\\n\\\\n                    <div class=\\\\\\\"d-flex flex-column\\\\\\\">\\\\n                        <strong>\\\").concat(tagData.name, \\\"</strong>\\\\n                        <span>\\\").concat(tagData.email, \\\"</span>\\\\n                    </div>\\\\n                </div>\\\\n            \\\");\\n    } // initialize Tagify on the above input node reference\\n\\n\\n    var tagify = new Tagify(inputElm, {\\n      tagTextProp: 'name',\\n      // very important since a custom template is used with this property as text. allows typing a \\\"value\\\" or a \\\"name\\\" to match input with whitelist\\n      enforceWhitelist: true,\\n      skipInvalid: true,\\n      // do not remporarily add invalid tags\\n      dropdown: {\\n        closeOnSelect: false,\\n        enabled: 0,\\n        classname: 'users-list',\\n        searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\\n\\n      },\\n      templates: {\\n        tag: tagTemplate,\\n        dropdownItem: suggestionItemTemplate\\n      },\\n      whitelist: usersList\\n    });\\n    tagify.on('dropdown:show dropdown:updated', onDropdownShow);\\n    tagify.on('dropdown:select', onSelectSuggestion);\\n    var addAllSuggestionsElm;\\n\\n    function onDropdownShow(e) {\\n      var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\\n\\n      if (tagify.suggestedListItems.length > 1) {\\n        addAllSuggestionsElm = getAddAllSuggestionsElm(); // insert \\\"addAllSuggestionsElm\\\" as the first element in the suggestions list\\n\\n        dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild);\\n      }\\n    }\\n\\n    function onSelectSuggestion(e) {\\n      if (e.detail.elm == addAllSuggestionsElm) tagify.dropdown.selectAll.call(tagify);\\n    } // create a \\\"add all\\\" custom suggestion element every time the dropdown changes\\n\\n\\n    function getAddAllSuggestionsElm() {\\n      // suggestions items should be based on \\\"dropdownItem\\\" template\\n      return tagify.parseTemplate('dropdownItem', [{\\n        \\\"class\\\": \\\"addAll\\\",\\n        name: \\\"Add all\\\",\\n        email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\\n          return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1;\\n        }, 0) + \\\" Members\\\"\\n      }]);\\n    }\\n  }; // Init quill editor \\n\\n\\n  var initQuill = function initQuill(el) {\\n    var quill = new Quill('#kt_inbox_form_editor', {\\n      modules: {\\n        toolbar: [[{\\n          header: [1, 2, false]\\n        }], ['bold', 'italic', 'underline'], ['image', 'code-block']]\\n      },\\n      placeholder: 'Type your text here...',\\n      theme: 'snow' // or 'bubble'\\n\\n    }); // Customize editor\\n\\n    var toolbar = el.querySelector('.ql-toolbar');\\n\\n    if (toolbar) {\\n      var _toolbar$classList;\\n\\n      var classes = ['px-5', 'border-top-0', 'border-start-0', 'border-end-0'];\\n\\n      (_toolbar$classList = toolbar.classList).add.apply(_toolbar$classList, classes);\\n    }\\n  }; // Init dropzone\\n\\n\\n  var initDropzone = function initDropzone(el) {\\n    // set the dropzone container id\\n    var id = '[data-kt-inbox-form=\\\"dropzone\\\"]';\\n    var dropzone = el.querySelector(id);\\n    var uploadButton = el.querySelector('[data-kt-inbox-form=\\\"dropzone_upload\\\"]'); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"https://preview.keenthemes.com/api/dropzone/void.php\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 20,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      previewTemplate: previewTemplate,\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: uploadButton // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hookup the start button\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n    }); // Update the total progress bar\\n\\n    myDropzone.on(\\\"totaluploadprogress\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.width = progress + \\\"%\\\";\\n      });\\n    });\\n    myDropzone.on(\\\"sending\\\", function (file) {\\n      // Show the total progress bar when upload starts\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.opacity = \\\"1\\\";\\n      });\\n    }); // Hide the total progress bar when nothing\\\"s uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      handlePreviewText();\\n      initForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAppInboxReply.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/inbox/reply.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/inbox/reply.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/inbox/reply.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/inbox/reply.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/inbox/reply.js"]();
/******/ 	
/******/ })()
;