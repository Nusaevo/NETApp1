/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/file-manager/list.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/file-manager/list.js ***!
  \*******************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTFileManagerList = function () {\n  // Define shared variables\n  var datatable;\n  var table; // Define template element variables\n\n  var uploadTemplate;\n  var renameTemplate;\n  var actionTemplate;\n  var checkboxTemplate; // Private functions\n\n  var initTemplates = function initTemplates() {\n    uploadTemplate = document.querySelector('[data-kt-filemanager-template=\"upload\"]');\n    renameTemplate = document.querySelector('[data-kt-filemanager-template=\"rename\"]');\n    actionTemplate = document.querySelector('[data-kt-filemanager-template=\"action\"]');\n    checkboxTemplate = document.querySelector('[data-kt-filemanager-template=\"checkbox\"]');\n  };\n\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var dateCol = dateRow[3]; // select date from 4th column in table\n\n      var realDate = moment(dateCol.innerHTML, \"DD MMM YYYY, LT\").format();\n      dateCol.setAttribute('data-order', realDate);\n    });\n    var foldersListOptions = {\n      \"info\": false,\n      'order': [],\n      \"scrollY\": \"700px\",\n      \"scrollCollapse\": true,\n      \"paging\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"\".concat(hostUrl, \"media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\")\n      }\n    };\n    var filesListOptions = {\n      \"info\": false,\n      'order': [],\n      'pageLength': 10,\n      \"lengthChange\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"\".concat(hostUrl, \"media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark mb-4\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\")\n      },\n      conditionalPaging: true\n    }; // Define datatable options to load\n\n    var loadOptions;\n\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      loadOptions = foldersListOptions;\n    } else {\n      loadOptions = filesListOptions;\n    } // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n\n    datatable = $(table).DataTable(loadOptions); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleDeleteRows();\n      toggleToolbars();\n      resetNewFolder();\n      KTMenu.createInstances();\n      initCopyLink();\n      countTotalItems();\n      handleRename();\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-filemanager-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Delete customer\n\n\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-filemanager-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get customer name\n\n        var fileName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + fileName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + fileName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      checkboxes = document.querySelectorAll('#kt_file_manager_list_wrapper [type=\"checkbox\"]');\n    } // Select elements\n\n\n    var deleteSelected = document.querySelector('[data-kt-filemanager-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        console.log(c);\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected files or folders?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected  files or folders!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected  files or folders was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Define variables\n    var toolbarBase = document.querySelector('[data-kt-filemanager-table-toolbar=\"base\"]');\n    var toolbarSelected = document.querySelector('[data-kt-filemanager-table-toolbar=\"selected\"]');\n    var selectedCount = document.querySelector('[data-kt-filemanager-table-select=\"selected_count\"]'); // Select refreshed checkbox DOM elements \n\n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  }; // Handle new folder\n\n\n  var handleNewFolder = function handleNewFolder() {\n    // Select button\n    var newFolder = document.getElementById('kt_file_manager_new_folder'); // Handle click action\n\n    newFolder.addEventListener('click', function (e) {\n      e.preventDefault(); // Ignore if input already exist\n\n      if (table.querySelector('#kt_file_manager_new_folder_row')) {\n        return;\n      } // Add new blank row to datatable\n\n\n      var tableBody = table.querySelector('tbody');\n      var rowElement = uploadTemplate.cloneNode(true); // Clone template markup\n\n      tableBody.prepend(rowElement); // Define template interactive elements\n\n      var rowForm = rowElement.querySelector('#kt_file_manager_add_folder_form');\n      var rowButton = rowElement.querySelector('#kt_file_manager_add_folder');\n      var cancelButton = rowElement.querySelector('#kt_file_manager_cancel_folder');\n      var folderIcon = rowElement.querySelector('.svg-icon-2x');\n      var rowInput = rowElement.querySelector('[name=\"new_folder_name\"]'); // Define validator\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n      var validator = FormValidation.formValidation(rowForm, {\n        fields: {\n          'new_folder_name': {\n            validators: {\n              notEmpty: {\n                message: 'Folder name is required'\n              }\n            }\n          }\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      }); // Handle add new folder button\n\n      rowButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Activate indicator\n\n        rowButton.setAttribute(\"data-kt-indicator\", \"on\"); // Validate form before submit\n\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n\n            if (status == 'Valid') {\n              // Simulate process for demo only\n              setTimeout(function () {\n                var _folderLink$classList;\n\n                // Create folder link\n                var folderLink = document.createElement('a');\n                var folderLinkClasses = ['text-gray-800', 'text-hover-primary'];\n                folderLink.setAttribute('href', '?page=apps/file-manager/blank');\n\n                (_folderLink$classList = folderLink.classList).add.apply(_folderLink$classList, folderLinkClasses);\n\n                folderLink.innerText = rowInput.value;\n                var newRow = datatable.row.add({\n                  'checkbox': checkboxTemplate.innerHTML,\n                  'name': folderIcon.outerHTML + folderLink.outerHTML,\n                  \"size\": '-',\n                  \"date\": '-',\n                  'action': actionTemplate.innerHTML\n                }).node();\n                $(newRow).find('td').eq(4).attr('data-kt-filemanager-table', 'action_dropdown');\n                $(newRow).find('td').eq(4).addClass('text-end'); // Add custom class to last 'td' element --- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n                // Re-sort datatable to allow new folder added at the top\n\n                var index = datatable.row(0).index(),\n                    rowCount = datatable.data().length - 1,\n                    insertedRow = datatable.row(rowCount).data(),\n                    tempRow;\n\n                for (var i = rowCount; i > index; i--) {\n                  tempRow = datatable.row(i - 1).data();\n                  datatable.row(i).data(tempRow);\n                  datatable.row(i - 1).data(insertedRow);\n                }\n\n                toastr.options = {\n                  \"closeButton\": true,\n                  \"debug\": false,\n                  \"newestOnTop\": false,\n                  \"progressBar\": false,\n                  \"positionClass\": \"toastr-top-right\",\n                  \"preventDuplicates\": false,\n                  \"showDuration\": \"300\",\n                  \"hideDuration\": \"1000\",\n                  \"timeOut\": \"5000\",\n                  \"extendedTimeOut\": \"1000\",\n                  \"showEasing\": \"swing\",\n                  \"hideEasing\": \"linear\",\n                  \"showMethod\": \"fadeIn\",\n                  \"hideMethod\": \"fadeOut\"\n                };\n                toastr.success(rowInput.value + ' was created!'); // Disable indicator\n\n                rowButton.removeAttribute(\"data-kt-indicator\"); // Reset input\n\n                rowInput.value = '';\n                datatable.draw(false);\n              }, 2000);\n            } else {\n              // Disable indicator\n              rowButton.removeAttribute(\"data-kt-indicator\");\n            }\n          });\n        }\n      }); // Handle cancel new folder button\n\n      cancelButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Activate indicator\n\n        cancelButton.setAttribute(\"data-kt-indicator\", \"on\");\n        setTimeout(function () {\n          // Disable indicator\n          cancelButton.removeAttribute(\"data-kt-indicator\"); // Toggle toastr\n\n          toastr.options = {\n            \"closeButton\": true,\n            \"debug\": false,\n            \"newestOnTop\": false,\n            \"progressBar\": false,\n            \"positionClass\": \"toastr-top-right\",\n            \"preventDuplicates\": false,\n            \"showDuration\": \"300\",\n            \"hideDuration\": \"1000\",\n            \"timeOut\": \"5000\",\n            \"extendedTimeOut\": \"1000\",\n            \"showEasing\": \"swing\",\n            \"hideEasing\": \"linear\",\n            \"showMethod\": \"fadeIn\",\n            \"hideMethod\": \"fadeOut\"\n          };\n          toastr.error('Cancelled new folder creation');\n          resetNewFolder();\n        }, 1000);\n      });\n    });\n  }; // Reset add new folder input\n\n\n  var resetNewFolder = function resetNewFolder() {\n    var newFolderRow = table.querySelector('#kt_file_manager_new_folder_row');\n\n    if (newFolderRow) {\n      newFolderRow.parentNode.removeChild(newFolderRow);\n    }\n  }; // Handle rename file or folder\n\n\n  var handleRename = function handleRename() {\n    var renameButton = table.querySelectorAll('[data-kt-filemanager-table=\"rename\"]');\n    renameButton.forEach(function (button) {\n      button.addEventListener('click', renameCallback);\n    });\n  }; // Rename callback\n\n\n  var renameCallback = function renameCallback(e) {\n    e.preventDefault(); // Define shared value\n\n    var nameValue; // Stop renaming if there's an input existing\n\n    if (table.querySelectorAll('#kt_file_manager_rename_input').length > 0) {\n      Swal.fire({\n        text: \"Unsaved input detected. Please save or cancel the current item\",\n        icon: \"warning\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\"\n        }\n      });\n      return;\n    } // Select parent row\n\n\n    var parent = e.target.closest('tr'); // Get name column\n\n    var nameCol = parent.querySelectorAll('td')[1];\n    var colIcon = nameCol.querySelector('.svg-icon');\n    nameValue = nameCol.innerText; // Set rename input template\n\n    var renameInput = renameTemplate.cloneNode(true);\n    renameInput.querySelector('#kt_file_manager_rename_folder_icon').innerHTML = colIcon.outerHTML; // Swap current column content with input template\n\n    nameCol.innerHTML = renameInput.innerHTML; // Set input value with current file/folder name\n\n    parent.querySelector('#kt_file_manager_rename_input').value = nameValue; // Rename file / folder validator\n\n    var renameValidator = FormValidation.formValidation(nameCol, {\n      fields: {\n        'rename_folder_name': {\n          validators: {\n            notEmpty: {\n              message: 'Name is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Rename input button action\n\n    var renameInputButton = document.querySelector('#kt_file_manager_rename_folder');\n    renameInputButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Detect if valid\n\n      if (renameValidator) {\n        renameValidator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Pop up confirmation\n            Swal.fire({\n              text: \"Are you sure you want to rename \" + nameValue + \"?\",\n              icon: \"warning\",\n              showCancelButton: true,\n              buttonsStyling: false,\n              confirmButtonText: \"Yes, rename it!\",\n              cancelButtonText: \"No, cancel\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-danger\",\n                cancelButton: \"btn fw-bold btn-active-light-primary\"\n              }\n            }).then(function (result) {\n              if (result.value) {\n                Swal.fire({\n                  text: \"You have renamed \" + nameValue + \"!.\",\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn fw-bold btn-primary\"\n                  }\n                }).then(function () {\n                  // Get new file / folder name value\n                  var newValue = document.querySelector('#kt_file_manager_rename_input').value; // New column data template\n\n                  var newData = \"<div class=\\\"d-flex align-items-center\\\">\\n                                        \".concat(colIcon.outerHTML, \"\\n                                        <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(newValue, \"</a>\\n                                    </div>\"); // Draw datatable with new content -- Add more events here for any server-side events\n\n                  datatable.cell($(nameCol)).data(newData).draw();\n                });\n              } else if (result.dismiss === 'cancel') {\n                Swal.fire({\n                  text: nameValue + \" was not renamed.\",\n                  icon: \"error\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn fw-bold btn-primary\"\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    }); // Cancel rename input\n\n    var cancelInputButton = document.querySelector('#kt_file_manager_rename_folder_cancel');\n    cancelInputButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Simulate process for demo only\n\n      cancelInputButton.setAttribute(\"data-kt-indicator\", \"on\");\n      setTimeout(function () {\n        var revertTemplate = \"<div class=\\\"d-flex align-items-center\\\">\\n                    \".concat(colIcon.outerHTML, \"\\n                    <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(nameValue, \"</a>\\n                </div>\"); // Remove spinner\n\n        cancelInputButton.removeAttribute(\"data-kt-indicator\"); // Draw datatable with new content -- Add more events here for any server-side events\n\n        datatable.cell($(nameCol)).data(revertTemplate).draw(); // Toggle toastr\n\n        toastr.options = {\n          \"closeButton\": true,\n          \"debug\": false,\n          \"newestOnTop\": false,\n          \"progressBar\": false,\n          \"positionClass\": \"toastr-top-right\",\n          \"preventDuplicates\": false,\n          \"showDuration\": \"300\",\n          \"hideDuration\": \"1000\",\n          \"timeOut\": \"5000\",\n          \"extendedTimeOut\": \"1000\",\n          \"showEasing\": \"swing\",\n          \"hideEasing\": \"linear\",\n          \"showMethod\": \"fadeIn\",\n          \"hideMethod\": \"fadeOut\"\n        };\n        toastr.error('Cancelled rename function');\n      }, 1000);\n    });\n  }; // Init dropzone\n\n\n  var initDropzone = function initDropzone() {\n    // set the dropzone container id\n    var id = \"#kt_modal_upload_dropzone\";\n    var dropzone = document.querySelector(id); // set the preview element template\n\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"path/to/your/server\",\n      // Set the url for your upload script location\n      parallelUploads: 10,\n      previewTemplate: previewTemplate,\n      maxFilesize: 1,\n      // Max filesize in MB\n      autoProcessQueue: false,\n      // Stop auto upload\n      autoQueue: false,\n      // Make sure the files aren't queued until manually added\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hook each start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n        // myDropzone.enqueueFile(file); -- default dropzone function\n        // Process simulation for demo only\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      };\n\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n      dropzone.querySelector('.dropzone-upload').style.display = \"inline-block\";\n      dropzone.querySelector('.dropzone-remove-all').style.display = \"inline-block\";\n    }); // Hide the total progress bar when nothing's uploading anymore\n\n    myDropzone.on(\"complete\", function (file) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n          progressBar.querySelector('.dropzone-start').style.opacity = \"0\";\n        });\n      }, 300);\n    }); // Setup the buttons for all transfers\n\n    dropzone.querySelector(\".dropzone-upload\").addEventListener('click', function () {\n      // myDropzone.processQueue(); --- default dropzone process\n      // Process simulation for demo only\n      myDropzone.files.forEach(function (file) {\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      });\n    }); // Setup the button for remove all files\n\n    dropzone.querySelector(\".dropzone-remove-all\").addEventListener('click', function () {\n      Swal.fire({\n        text: \"Are you sure you would like to remove all files?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, remove it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n          dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n          myDropzone.removeAllFiles(true);\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your files was not removed!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // On all files completed upload\n\n    myDropzone.on(\"queuecomplete\", function (progress) {\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\n      uploadIcons.forEach(function (uploadIcon) {\n        uploadIcon.style.display = \"none\";\n      });\n    }); // On all files removed\n\n    myDropzone.on(\"removedfile\", function (file) {\n      if (myDropzone.files.length < 1) {\n        dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n        dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n      }\n    });\n  }; // Init copy link\n\n\n  var initCopyLink = function initCopyLink() {\n    // Select all copy link elements\n    var elements = table.querySelectorAll('[data-kt-filemanger-table=\"copy_link\"]');\n    elements.forEach(function (el) {\n      // Define elements\n      var button = el.querySelector('button');\n      var generator = el.querySelector('[data-kt-filemanger-table=\"copy_link_generator\"]');\n      var result = el.querySelector('[data-kt-filemanger-table=\"copy_link_result\"]');\n      var input = el.querySelector('input'); // Click action\n\n      button.addEventListener('click', function (e) {\n        e.preventDefault(); // Reset toggle\n\n        generator.classList.remove('d-none');\n        result.classList.add('d-none');\n        var linkTimeout;\n        clearTimeout(linkTimeout);\n        linkTimeout = setTimeout(function () {\n          generator.classList.add('d-none');\n          result.classList.remove('d-none');\n          input.select();\n        }, 2000);\n      });\n    });\n  }; // Handle move to folder\n\n\n  var handleMoveToFolder = function handleMoveToFolder() {\n    var element = document.querySelector('#kt_modal_move_to_folder');\n    var form = element.querySelector('#kt_modal_move_to_folder_form');\n    var saveButton = form.querySelector('#kt_modal_move_to_folder_submit');\n    var moveModal = new bootstrap.Modal(element); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'move_to_folder': {\n          validators: {\n            notEmpty: {\n              message: 'Please select a folder.'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n    saveButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      saveButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Simulate process for demo only\n            setTimeout(function () {\n              Swal.fire({\n                text: \"Are you sure you would like to move to this folder\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, move it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\",\n                  cancelButton: \"btn btn-active-light\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  form.reset(); // Reset form\t\n\n                  moveModal.hide(); // Hide modal\t\t\t\n\n                  toastr.options = {\n                    \"closeButton\": true,\n                    \"debug\": false,\n                    \"newestOnTop\": false,\n                    \"progressBar\": false,\n                    \"positionClass\": \"toastr-top-right\",\n                    \"preventDuplicates\": false,\n                    \"showDuration\": \"300\",\n                    \"hideDuration\": \"1000\",\n                    \"timeOut\": \"5000\",\n                    \"extendedTimeOut\": \"1000\",\n                    \"showEasing\": \"swing\",\n                    \"hideEasing\": \"linear\",\n                    \"showMethod\": \"fadeIn\",\n                    \"hideMethod\": \"fadeOut\"\n                  };\n                  toastr.success('1 item has been moved.');\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                } else {\n                  Swal.fire({\n                    text: \"Your action has been cancelled!.\",\n                    icon: \"error\",\n                    buttonsStyling: false,\n                    confirmButtonText: \"Ok, got it!\",\n                    customClass: {\n                      confirmButton: \"btn btn-primary\"\n                    }\n                  });\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                }\n              });\n            }, 500);\n          } else {\n            saveButton.removeAttribute(\"data-kt-indicator\");\n          }\n        });\n      }\n    });\n  }; // Count total number of items\n\n\n  var countTotalItems = function countTotalItems() {\n    var counter = document.getElementById('kt_file_manager_items_counter'); // Count total number of elements in datatable --- more info: https://datatables.net/reference/api/count()\n\n    counter.innerText = datatable.rows().count() + ' items';\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      table = document.querySelector('#kt_file_manager_list');\n\n      if (!table) {\n        return;\n      }\n\n      initTemplates();\n      initDatatable();\n      initToggleToolbar();\n      handleSearchDatatable();\n      handleDeleteRows();\n      handleNewFolder();\n      initDropzone();\n      initCopyLink();\n      handleRename();\n      handleMoveToFolder();\n      countTotalItems();\n      KTMenu.createInstances();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFileManagerList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/file-manager/list.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/apps/file-manager/list.js":
/*!********************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/apps/file-manager/list.js ***!
  \********************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/apps/file-manager/list.js\":\n    /*!*******************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/apps/file-manager/list.js ***!\r\n      \\*******************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomAppsFileManagerListJs() {\n      eval(\" // Class definition\\n\\nvar KTFileManagerList = function () {\\n  // Define shared variables\\n  var datatable;\\n  var table; // Define template element variables\\n\\n  var uploadTemplate;\\n  var renameTemplate;\\n  var actionTemplate;\\n  var checkboxTemplate; // Private functions\\n\\n  var initTemplates = function initTemplates() {\\n    uploadTemplate = document.querySelector('[data-kt-filemanager-template=\\\"upload\\\"]');\\n    renameTemplate = document.querySelector('[data-kt-filemanager-template=\\\"rename\\\"]');\\n    actionTemplate = document.querySelector('[data-kt-filemanager-template=\\\"action\\\"]');\\n    checkboxTemplate = document.querySelector('[data-kt-filemanager-template=\\\"checkbox\\\"]');\\n  };\\n\\n  var initDatatable = function initDatatable() {\\n    // Set date data order\\n    var tableRows = table.querySelectorAll('tbody tr');\\n    tableRows.forEach(function (row) {\\n      var dateRow = row.querySelectorAll('td');\\n      var dateCol = dateRow[3]; // select date from 4th column in table\\n\\n      var realDate = moment(dateCol.innerHTML, \\\"DD MMM YYYY, LT\\\").format();\\n      dateCol.setAttribute('data-order', realDate);\\n    });\\n    var foldersListOptions = {\\n      \\\"info\\\": false,\\n      'order': [],\\n      \\\"scrollY\\\": \\\"700px\\\",\\n      \\\"scrollCollapse\\\": true,\\n      \\\"paging\\\": false,\\n      'ordering': false,\\n      'columns': [{\\n        data: 'checkbox'\\n      }, {\\n        data: 'name'\\n      }, {\\n        data: 'size'\\n      }, {\\n        data: 'date'\\n      }, {\\n        data: 'action'\\n      }],\\n      'language': {\\n        emptyTable: \\\"<div class=\\\\\\\"d-flex flex-column flex-center\\\\\\\">\\\\n                    <img src=\\\\\\\"\\\".concat(hostUrl, \\\"media/illustrations/sketchy-1/5.png\\\\\\\" class=\\\\\\\"mw-400px\\\\\\\" />\\\\n                    <div class=\\\\\\\"fs-1 fw-bolder text-dark\\\\\\\">No items found.</div>\\\\n                    <div class=\\\\\\\"fs-6\\\\\\\">Start creating new folders or uploading a new file!</div>\\\\n                </div>\\\")\\n      }\\n    };\\n    var filesListOptions = {\\n      \\\"info\\\": false,\\n      'order': [],\\n      'pageLength': 10,\\n      \\\"lengthChange\\\": false,\\n      'ordering': false,\\n      'columns': [{\\n        data: 'checkbox'\\n      }, {\\n        data: 'name'\\n      }, {\\n        data: 'size'\\n      }, {\\n        data: 'date'\\n      }, {\\n        data: 'action'\\n      }],\\n      'language': {\\n        emptyTable: \\\"<div class=\\\\\\\"d-flex flex-column flex-center\\\\\\\">\\\\n                    <img src=\\\\\\\"\\\".concat(hostUrl, \\\"media/illustrations/sketchy-1/5.png\\\\\\\" class=\\\\\\\"mw-400px\\\\\\\" />\\\\n                    <div class=\\\\\\\"fs-1 fw-bolder text-dark mb-4\\\\\\\">No items found.</div>\\\\n                    <div class=\\\\\\\"fs-6\\\\\\\">Start creating new folders or uploading a new file!</div>\\\\n                </div>\\\")\\n      },\\n      conditionalPaging: true\\n    }; // Define datatable options to load\\n\\n    var loadOptions;\\n\\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\\n      loadOptions = foldersListOptions;\\n    } else {\\n      loadOptions = filesListOptions;\\n    } // Init datatable --- more info on datatables: https://datatables.net/manual/\\n\\n\\n    datatable = $(table).DataTable(loadOptions); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\\n\\n    datatable.on('draw', function () {\\n      initToggleToolbar();\\n      handleDeleteRows();\\n      toggleToolbars();\\n      resetNewFolder();\\n      KTMenu.createInstances();\\n      initCopyLink();\\n      countTotalItems();\\n      handleRename();\\n    });\\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\\n\\n\\n  var handleSearchDatatable = function handleSearchDatatable() {\\n    var filterSearch = document.querySelector('[data-kt-filemanager-table-filter=\\\"search\\\"]');\\n    filterSearch.addEventListener('keyup', function (e) {\\n      datatable.search(e.target.value).draw();\\n    });\\n  }; // Delete customer\\n\\n\\n  var handleDeleteRows = function handleDeleteRows() {\\n    // Select all delete buttons\\n    var deleteButtons = table.querySelectorAll('[data-kt-filemanager-table-filter=\\\"delete_row\\\"]');\\n    deleteButtons.forEach(function (d) {\\n      // Delete button on click\\n      d.addEventListener('click', function (e) {\\n        e.preventDefault(); // Select parent row\\n\\n        var parent = e.target.closest('tr'); // Get customer name\\n\\n        var fileName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n\\n        Swal.fire({\\n          text: \\\"Are you sure you want to delete \\\" + fileName + \\\"?\\\",\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete!\\\",\\n          cancelButtonText: \\\"No, cancel\\\",\\n          customClass: {\\n            confirmButton: \\\"btn fw-bold btn-danger\\\",\\n            cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            Swal.fire({\\n              text: \\\"You have deleted \\\" + fileName + \\\"!.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            }).then(function () {\\n              // Remove current row\\n              datatable.row($(parent)).remove().draw();\\n            });\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: customerName + \\\" was not deleted.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }; // Init toggle toolbar\\n\\n\\n  var initToggleToolbar = function initToggleToolbar() {\\n    // Toggle selected action toolbar\\n    // Select all checkboxes\\n    var checkboxes = table.querySelectorAll('[type=\\\"checkbox\\\"]');\\n\\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\\n      checkboxes = document.querySelectorAll('#kt_file_manager_list_wrapper [type=\\\"checkbox\\\"]');\\n    } // Select elements\\n\\n\\n    var deleteSelected = document.querySelector('[data-kt-filemanager-table-select=\\\"delete_selected\\\"]'); // Toggle delete selected toolbar\\n\\n    checkboxes.forEach(function (c) {\\n      // Checkbox on click event\\n      c.addEventListener('click', function () {\\n        console.log(c);\\n        setTimeout(function () {\\n          toggleToolbars();\\n        }, 50);\\n      });\\n    }); // Deleted selected rows\\n\\n    deleteSelected.addEventListener('click', function () {\\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\\n      Swal.fire({\\n        text: \\\"Are you sure you want to delete selected files or folders?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, delete!\\\",\\n        cancelButtonText: \\\"No, cancel\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\",\\n          cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          Swal.fire({\\n            text: \\\"You have deleted all selected  files or folders!.\\\",\\n            icon: \\\"success\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          }).then(function () {\\n            // Remove all selected customers\\n            checkboxes.forEach(function (c) {\\n              if (c.checked) {\\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\\n              }\\n            }); // Remove header checked box\\n\\n            var headerCheckbox = table.querySelectorAll('[type=\\\"checkbox\\\"]')[0];\\n            headerCheckbox.checked = false;\\n          });\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Selected  files or folders was not deleted.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn fw-bold btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Toggle toolbars\\n\\n\\n  var toggleToolbars = function toggleToolbars() {\\n    // Define variables\\n    var toolbarBase = document.querySelector('[data-kt-filemanager-table-toolbar=\\\"base\\\"]');\\n    var toolbarSelected = document.querySelector('[data-kt-filemanager-table-toolbar=\\\"selected\\\"]');\\n    var selectedCount = document.querySelector('[data-kt-filemanager-table-select=\\\"selected_count\\\"]'); // Select refreshed checkbox DOM elements \\n\\n    var allCheckboxes = table.querySelectorAll('tbody [type=\\\"checkbox\\\"]'); // Detect checkboxes state & count\\n\\n    var checkedState = false;\\n    var count = 0; // Count checked boxes\\n\\n    allCheckboxes.forEach(function (c) {\\n      if (c.checked) {\\n        checkedState = true;\\n        count++;\\n      }\\n    }); // Toggle toolbars\\n\\n    if (checkedState) {\\n      selectedCount.innerHTML = count;\\n      toolbarBase.classList.add('d-none');\\n      toolbarSelected.classList.remove('d-none');\\n    } else {\\n      toolbarBase.classList.remove('d-none');\\n      toolbarSelected.classList.add('d-none');\\n    }\\n  }; // Handle new folder\\n\\n\\n  var handleNewFolder = function handleNewFolder() {\\n    // Select button\\n    var newFolder = document.getElementById('kt_file_manager_new_folder'); // Handle click action\\n\\n    newFolder.addEventListener('click', function (e) {\\n      e.preventDefault(); // Ignore if input already exist\\n\\n      if (table.querySelector('#kt_file_manager_new_folder_row')) {\\n        return;\\n      } // Add new blank row to datatable\\n\\n\\n      var tableBody = table.querySelector('tbody');\\n      var rowElement = uploadTemplate.cloneNode(true); // Clone template markup\\n\\n      tableBody.prepend(rowElement); // Define template interactive elements\\n\\n      var rowForm = rowElement.querySelector('#kt_file_manager_add_folder_form');\\n      var rowButton = rowElement.querySelector('#kt_file_manager_add_folder');\\n      var cancelButton = rowElement.querySelector('#kt_file_manager_cancel_folder');\\n      var folderIcon = rowElement.querySelector('.svg-icon-2x');\\n      var rowInput = rowElement.querySelector('[name=\\\"new_folder_name\\\"]'); // Define validator\\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n      var validator = FormValidation.formValidation(rowForm, {\\n        fields: {\\n          'new_folder_name': {\\n            validators: {\\n              notEmpty: {\\n                message: 'Folder name is required'\\n              }\\n            }\\n          }\\n        },\\n        plugins: {\\n          trigger: new FormValidation.plugins.Trigger(),\\n          bootstrap: new FormValidation.plugins.Bootstrap5({\\n            rowSelector: '.fv-row',\\n            eleInvalidClass: '',\\n            eleValidClass: ''\\n          })\\n        }\\n      }); // Handle add new folder button\\n\\n      rowButton.addEventListener('click', function (e) {\\n        e.preventDefault(); // Activate indicator\\n\\n        rowButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Validate form before submit\\n\\n        if (validator) {\\n          validator.validate().then(function (status) {\\n            console.log('validated!');\\n\\n            if (status == 'Valid') {\\n              // Simulate process for demo only\\n              setTimeout(function () {\\n                var _folderLink$classList;\\n\\n                // Create folder link\\n                var folderLink = document.createElement('a');\\n                var folderLinkClasses = ['text-gray-800', 'text-hover-primary'];\\n                folderLink.setAttribute('href', '?page=apps/file-manager/blank');\\n\\n                (_folderLink$classList = folderLink.classList).add.apply(_folderLink$classList, folderLinkClasses);\\n\\n                folderLink.innerText = rowInput.value;\\n                var newRow = datatable.row.add({\\n                  'checkbox': checkboxTemplate.innerHTML,\\n                  'name': folderIcon.outerHTML + folderLink.outerHTML,\\n                  \\\"size\\\": '-',\\n                  \\\"date\\\": '-',\\n                  'action': actionTemplate.innerHTML\\n                }).node();\\n                $(newRow).find('td').eq(4).attr('data-kt-filemanager-table', 'action_dropdown');\\n                $(newRow).find('td').eq(4).addClass('text-end'); // Add custom class to last 'td' element --- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\\n                // Re-sort datatable to allow new folder added at the top\\n\\n                var index = datatable.row(0).index(),\\n                    rowCount = datatable.data().length - 1,\\n                    insertedRow = datatable.row(rowCount).data(),\\n                    tempRow;\\n\\n                for (var i = rowCount; i > index; i--) {\\n                  tempRow = datatable.row(i - 1).data();\\n                  datatable.row(i).data(tempRow);\\n                  datatable.row(i - 1).data(insertedRow);\\n                }\\n\\n                toastr.options = {\\n                  \\\"closeButton\\\": true,\\n                  \\\"debug\\\": false,\\n                  \\\"newestOnTop\\\": false,\\n                  \\\"progressBar\\\": false,\\n                  \\\"positionClass\\\": \\\"toastr-top-right\\\",\\n                  \\\"preventDuplicates\\\": false,\\n                  \\\"showDuration\\\": \\\"300\\\",\\n                  \\\"hideDuration\\\": \\\"1000\\\",\\n                  \\\"timeOut\\\": \\\"5000\\\",\\n                  \\\"extendedTimeOut\\\": \\\"1000\\\",\\n                  \\\"showEasing\\\": \\\"swing\\\",\\n                  \\\"hideEasing\\\": \\\"linear\\\",\\n                  \\\"showMethod\\\": \\\"fadeIn\\\",\\n                  \\\"hideMethod\\\": \\\"fadeOut\\\"\\n                };\\n                toastr.success(rowInput.value + ' was created!'); // Disable indicator\\n\\n                rowButton.removeAttribute(\\\"data-kt-indicator\\\"); // Reset input\\n\\n                rowInput.value = '';\\n                datatable.draw(false);\\n              }, 2000);\\n            } else {\\n              // Disable indicator\\n              rowButton.removeAttribute(\\\"data-kt-indicator\\\");\\n            }\\n          });\\n        }\\n      }); // Handle cancel new folder button\\n\\n      cancelButton.addEventListener('click', function (e) {\\n        e.preventDefault(); // Activate indicator\\n\\n        cancelButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\");\\n        setTimeout(function () {\\n          // Disable indicator\\n          cancelButton.removeAttribute(\\\"data-kt-indicator\\\"); // Toggle toastr\\n\\n          toastr.options = {\\n            \\\"closeButton\\\": true,\\n            \\\"debug\\\": false,\\n            \\\"newestOnTop\\\": false,\\n            \\\"progressBar\\\": false,\\n            \\\"positionClass\\\": \\\"toastr-top-right\\\",\\n            \\\"preventDuplicates\\\": false,\\n            \\\"showDuration\\\": \\\"300\\\",\\n            \\\"hideDuration\\\": \\\"1000\\\",\\n            \\\"timeOut\\\": \\\"5000\\\",\\n            \\\"extendedTimeOut\\\": \\\"1000\\\",\\n            \\\"showEasing\\\": \\\"swing\\\",\\n            \\\"hideEasing\\\": \\\"linear\\\",\\n            \\\"showMethod\\\": \\\"fadeIn\\\",\\n            \\\"hideMethod\\\": \\\"fadeOut\\\"\\n          };\\n          toastr.error('Cancelled new folder creation');\\n          resetNewFolder();\\n        }, 1000);\\n      });\\n    });\\n  }; // Reset add new folder input\\n\\n\\n  var resetNewFolder = function resetNewFolder() {\\n    var newFolderRow = table.querySelector('#kt_file_manager_new_folder_row');\\n\\n    if (newFolderRow) {\\n      newFolderRow.parentNode.removeChild(newFolderRow);\\n    }\\n  }; // Handle rename file or folder\\n\\n\\n  var handleRename = function handleRename() {\\n    var renameButton = table.querySelectorAll('[data-kt-filemanager-table=\\\"rename\\\"]');\\n    renameButton.forEach(function (button) {\\n      button.addEventListener('click', renameCallback);\\n    });\\n  }; // Rename callback\\n\\n\\n  var renameCallback = function renameCallback(e) {\\n    e.preventDefault(); // Define shared value\\n\\n    var nameValue; // Stop renaming if there's an input existing\\n\\n    if (table.querySelectorAll('#kt_file_manager_rename_input').length > 0) {\\n      Swal.fire({\\n        text: \\\"Unsaved input detected. Please save or cancel the current item\\\",\\n        icon: \\\"warning\\\",\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Ok, got it!\\\",\\n        customClass: {\\n          confirmButton: \\\"btn fw-bold btn-danger\\\"\\n        }\\n      });\\n      return;\\n    } // Select parent row\\n\\n\\n    var parent = e.target.closest('tr'); // Get name column\\n\\n    var nameCol = parent.querySelectorAll('td')[1];\\n    var colIcon = nameCol.querySelector('.svg-icon');\\n    nameValue = nameCol.innerText; // Set rename input template\\n\\n    var renameInput = renameTemplate.cloneNode(true);\\n    renameInput.querySelector('#kt_file_manager_rename_folder_icon').innerHTML = colIcon.outerHTML; // Swap current column content with input template\\n\\n    nameCol.innerHTML = renameInput.innerHTML; // Set input value with current file/folder name\\n\\n    parent.querySelector('#kt_file_manager_rename_input').value = nameValue; // Rename file / folder validator\\n\\n    var renameValidator = FormValidation.formValidation(nameCol, {\\n      fields: {\\n        'rename_folder_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Name is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Rename input button action\\n\\n    var renameInputButton = document.querySelector('#kt_file_manager_rename_folder');\\n    renameInputButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Detect if valid\\n\\n      if (renameValidator) {\\n        renameValidator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Pop up confirmation\\n            Swal.fire({\\n              text: \\\"Are you sure you want to rename \\\" + nameValue + \\\"?\\\",\\n              icon: \\\"warning\\\",\\n              showCancelButton: true,\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Yes, rename it!\\\",\\n              cancelButtonText: \\\"No, cancel\\\",\\n              customClass: {\\n                confirmButton: \\\"btn fw-bold btn-danger\\\",\\n                cancelButton: \\\"btn fw-bold btn-active-light-primary\\\"\\n              }\\n            }).then(function (result) {\\n              if (result.value) {\\n                Swal.fire({\\n                  text: \\\"You have renamed \\\" + nameValue + \\\"!.\\\",\\n                  icon: \\\"success\\\",\\n                  buttonsStyling: false,\\n                  confirmButtonText: \\\"Ok, got it!\\\",\\n                  customClass: {\\n                    confirmButton: \\\"btn fw-bold btn-primary\\\"\\n                  }\\n                }).then(function () {\\n                  // Get new file / folder name value\\n                  var newValue = document.querySelector('#kt_file_manager_rename_input').value; // New column data template\\n\\n                  var newData = \\\"<div class=\\\\\\\"d-flex align-items-center\\\\\\\">\\\\n                                        \\\".concat(colIcon.outerHTML, \\\"\\\\n                                        <a href=\\\\\\\"?page=apps/file-manager/files/\\\\\\\" class=\\\\\\\"text-gray-800 text-hover-primary\\\\\\\">\\\").concat(newValue, \\\"</a>\\\\n                                    </div>\\\"); // Draw datatable with new content -- Add more events here for any server-side events\\n\\n                  datatable.cell($(nameCol)).data(newData).draw();\\n                });\\n              } else if (result.dismiss === 'cancel') {\\n                Swal.fire({\\n                  text: nameValue + \\\" was not renamed.\\\",\\n                  icon: \\\"error\\\",\\n                  buttonsStyling: false,\\n                  confirmButtonText: \\\"Ok, got it!\\\",\\n                  customClass: {\\n                    confirmButton: \\\"btn fw-bold btn-primary\\\"\\n                  }\\n                });\\n              }\\n            });\\n          }\\n        });\\n      }\\n    }); // Cancel rename input\\n\\n    var cancelInputButton = document.querySelector('#kt_file_manager_rename_folder_cancel');\\n    cancelInputButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Simulate process for demo only\\n\\n      cancelInputButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\");\\n      setTimeout(function () {\\n        var revertTemplate = \\\"<div class=\\\\\\\"d-flex align-items-center\\\\\\\">\\\\n                    \\\".concat(colIcon.outerHTML, \\\"\\\\n                    <a href=\\\\\\\"?page=apps/file-manager/files/\\\\\\\" class=\\\\\\\"text-gray-800 text-hover-primary\\\\\\\">\\\").concat(nameValue, \\\"</a>\\\\n                </div>\\\"); // Remove spinner\\n\\n        cancelInputButton.removeAttribute(\\\"data-kt-indicator\\\"); // Draw datatable with new content -- Add more events here for any server-side events\\n\\n        datatable.cell($(nameCol)).data(revertTemplate).draw(); // Toggle toastr\\n\\n        toastr.options = {\\n          \\\"closeButton\\\": true,\\n          \\\"debug\\\": false,\\n          \\\"newestOnTop\\\": false,\\n          \\\"progressBar\\\": false,\\n          \\\"positionClass\\\": \\\"toastr-top-right\\\",\\n          \\\"preventDuplicates\\\": false,\\n          \\\"showDuration\\\": \\\"300\\\",\\n          \\\"hideDuration\\\": \\\"1000\\\",\\n          \\\"timeOut\\\": \\\"5000\\\",\\n          \\\"extendedTimeOut\\\": \\\"1000\\\",\\n          \\\"showEasing\\\": \\\"swing\\\",\\n          \\\"hideEasing\\\": \\\"linear\\\",\\n          \\\"showMethod\\\": \\\"fadeIn\\\",\\n          \\\"hideMethod\\\": \\\"fadeOut\\\"\\n        };\\n        toastr.error('Cancelled rename function');\\n      }, 1000);\\n    });\\n  }; // Init dropzone\\n\\n\\n  var initDropzone = function initDropzone() {\\n    // set the dropzone container id\\n    var id = \\\"#kt_modal_upload_dropzone\\\";\\n    var dropzone = document.querySelector(id); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"path/to/your/server\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 10,\\n      previewTemplate: previewTemplate,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      autoProcessQueue: false,\\n      // Stop auto upload\\n      autoQueue: false,\\n      // Make sure the files aren't queued until manually added\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: id + \\\" .dropzone-select\\\" // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hook each start button\\n      file.previewElement.querySelector(id + \\\" .dropzone-start\\\").onclick = function () {\\n        // myDropzone.enqueueFile(file); -- default dropzone function\\n        // Process simulation for demo only\\n        var progressBar = file.previewElement.querySelector('.progress-bar');\\n        progressBar.style.opacity = \\\"1\\\";\\n        var width = 1;\\n        var timer = setInterval(function () {\\n          if (width >= 100) {\\n            myDropzone.emit(\\\"success\\\", file);\\n            myDropzone.emit(\\\"complete\\\", file);\\n            clearInterval(timer);\\n          } else {\\n            width++;\\n            progressBar.style.width = width + '%';\\n          }\\n        }, 20);\\n      };\\n\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n      dropzone.querySelector('.dropzone-upload').style.display = \\\"inline-block\\\";\\n      dropzone.querySelector('.dropzone-remove-all').style.display = \\\"inline-block\\\";\\n    }); // Hide the total progress bar when nothing's uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (file) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.dropzone-start').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    }); // Setup the buttons for all transfers\\n\\n    dropzone.querySelector(\\\".dropzone-upload\\\").addEventListener('click', function () {\\n      // myDropzone.processQueue(); --- default dropzone process\\n      // Process simulation for demo only\\n      myDropzone.files.forEach(function (file) {\\n        var progressBar = file.previewElement.querySelector('.progress-bar');\\n        progressBar.style.opacity = \\\"1\\\";\\n        var width = 1;\\n        var timer = setInterval(function () {\\n          if (width >= 100) {\\n            myDropzone.emit(\\\"success\\\", file);\\n            myDropzone.emit(\\\"complete\\\", file);\\n            clearInterval(timer);\\n          } else {\\n            width++;\\n            progressBar.style.width = width + '%';\\n          }\\n        }, 20);\\n      });\\n    }); // Setup the button for remove all files\\n\\n    dropzone.querySelector(\\\".dropzone-remove-all\\\").addEventListener('click', function () {\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to remove all files?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, remove it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n          dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n          myDropzone.removeAllFiles(true);\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your files was not removed!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    }); // On all files completed upload\\n\\n    myDropzone.on(\\\"queuecomplete\\\", function (progress) {\\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\\n      uploadIcons.forEach(function (uploadIcon) {\\n        uploadIcon.style.display = \\\"none\\\";\\n      });\\n    }); // On all files removed\\n\\n    myDropzone.on(\\\"removedfile\\\", function (file) {\\n      if (myDropzone.files.length < 1) {\\n        dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n        dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n      }\\n    });\\n  }; // Init copy link\\n\\n\\n  var initCopyLink = function initCopyLink() {\\n    // Select all copy link elements\\n    var elements = table.querySelectorAll('[data-kt-filemanger-table=\\\"copy_link\\\"]');\\n    elements.forEach(function (el) {\\n      // Define elements\\n      var button = el.querySelector('button');\\n      var generator = el.querySelector('[data-kt-filemanger-table=\\\"copy_link_generator\\\"]');\\n      var result = el.querySelector('[data-kt-filemanger-table=\\\"copy_link_result\\\"]');\\n      var input = el.querySelector('input'); // Click action\\n\\n      button.addEventListener('click', function (e) {\\n        e.preventDefault(); // Reset toggle\\n\\n        generator.classList.remove('d-none');\\n        result.classList.add('d-none');\\n        var linkTimeout;\\n        clearTimeout(linkTimeout);\\n        linkTimeout = setTimeout(function () {\\n          generator.classList.add('d-none');\\n          result.classList.remove('d-none');\\n          input.select();\\n        }, 2000);\\n      });\\n    });\\n  }; // Handle move to folder\\n\\n\\n  var handleMoveToFolder = function handleMoveToFolder() {\\n    var element = document.querySelector('#kt_modal_move_to_folder');\\n    var form = element.querySelector('#kt_modal_move_to_folder_form');\\n    var saveButton = form.querySelector('#kt_modal_move_to_folder_submit');\\n    var moveModal = new bootstrap.Modal(element); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n    var validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'move_to_folder': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Please select a folder.'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    });\\n    saveButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      saveButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\");\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Simulate process for demo only\\n            setTimeout(function () {\\n              Swal.fire({\\n                text: \\\"Are you sure you would like to move to this folder\\\",\\n                icon: \\\"warning\\\",\\n                showCancelButton: true,\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Yes, move it!\\\",\\n                cancelButtonText: \\\"No, return\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\",\\n                  cancelButton: \\\"btn btn-active-light\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  form.reset(); // Reset form\\t\\n\\n                  moveModal.hide(); // Hide modal\\t\\t\\t\\n\\n                  toastr.options = {\\n                    \\\"closeButton\\\": true,\\n                    \\\"debug\\\": false,\\n                    \\\"newestOnTop\\\": false,\\n                    \\\"progressBar\\\": false,\\n                    \\\"positionClass\\\": \\\"toastr-top-right\\\",\\n                    \\\"preventDuplicates\\\": false,\\n                    \\\"showDuration\\\": \\\"300\\\",\\n                    \\\"hideDuration\\\": \\\"1000\\\",\\n                    \\\"timeOut\\\": \\\"5000\\\",\\n                    \\\"extendedTimeOut\\\": \\\"1000\\\",\\n                    \\\"showEasing\\\": \\\"swing\\\",\\n                    \\\"hideEasing\\\": \\\"linear\\\",\\n                    \\\"showMethod\\\": \\\"fadeIn\\\",\\n                    \\\"hideMethod\\\": \\\"fadeOut\\\"\\n                  };\\n                  toastr.success('1 item has been moved.');\\n                  saveButton.removeAttribute(\\\"data-kt-indicator\\\");\\n                } else {\\n                  Swal.fire({\\n                    text: \\\"Your action has been cancelled!.\\\",\\n                    icon: \\\"error\\\",\\n                    buttonsStyling: false,\\n                    confirmButtonText: \\\"Ok, got it!\\\",\\n                    customClass: {\\n                      confirmButton: \\\"btn btn-primary\\\"\\n                    }\\n                  });\\n                  saveButton.removeAttribute(\\\"data-kt-indicator\\\");\\n                }\\n              });\\n            }, 500);\\n          } else {\\n            saveButton.removeAttribute(\\\"data-kt-indicator\\\");\\n          }\\n        });\\n      }\\n    });\\n  }; // Count total number of items\\n\\n\\n  var countTotalItems = function countTotalItems() {\\n    var counter = document.getElementById('kt_file_manager_items_counter'); // Count total number of elements in datatable --- more info: https://datatables.net/reference/api/count()\\n\\n    counter.innerText = datatable.rows().count() + ' items';\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      table = document.querySelector('#kt_file_manager_list');\\n\\n      if (!table) {\\n        return;\\n      }\\n\\n      initTemplates();\\n      initDatatable();\\n      initToggleToolbar();\\n      handleSearchDatatable();\\n      handleDeleteRows();\\n      handleNewFolder();\\n      initDropzone();\\n      initCopyLink();\\n      handleRename();\\n      handleMoveToFolder();\\n      countTotalItems();\\n      KTMenu.createInstances();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFileManagerList.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/file-manager/list.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/apps/file-manager/list.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/apps/file-manager/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/file-manager/list.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/apps/file-manager/list.js"]();
/******/ 	
/******/ })()
;