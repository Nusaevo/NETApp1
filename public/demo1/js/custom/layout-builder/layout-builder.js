/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/layout-builder/layout-builder.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/core/js/custom/layout-builder/layout-builder.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTLayoutBuilder = function () {\n  var form = document.querySelector(\"#kt_layout_builder_form\");\n  var actionInput = document.querySelector(\"#kt_layout_builder_action\");\n  var tabInput = document.querySelector(\"#kt_layout_builder_tab\");\n  var url = form.getAttribute(\"action\");\n  var previewButton = document.querySelector(\"#kt_layout_builder_preview\");\n  var exportButton = document.querySelector(\"#kt_layout_builder_export\");\n  var resetButton = document.querySelector(\"#kt_layout_builder_reset\");\n\n  var handleTab = function handleTab() {\n    var tabs = [].slice.call(document.querySelectorAll('#kt_layout_builder_tabs a[data-bs-toggle=\"tab\"]'));\n    tabs.forEach(function (tab) {\n      tab.addEventListener(\"shown.bs.tab\", function (e) {\n        tabInput.value = tab.getAttribute(\"href\").substring(1);\n      });\n    });\n  };\n\n  var handlePreview = function handlePreview() {\n    previewButton.addEventListener(\"click\", function (e) {\n      e.preventDefault(); // Set form action value\n\n      actionInput.value = \"preview\"; // Show progress\n\n      previewButton.setAttribute(\"data-kt-indicator\", \"on\"); // Prepare form data\n\n      var data = $(form).serialize(); // Submit\n\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          toastr.success(\"Preview has been updated with current configured layout.\", \"Preview updated!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          setTimeout(function () {\n            location.reload(); // reload page\n          }, 1500);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n        },\n        complete: function complete() {\n          previewButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n\n  var handleExport = function handleExport() {\n    exportButton.addEventListener(\"click\", function (e) {\n      e.preventDefault();\n      toastr.success(\"Process has been started and it may take a while.\", \"Generating HTML!\", {\n        timeOut: 0,\n        extendedTimeOut: 0,\n        closeButton: true,\n        closeDuration: 0\n      }); // Show progress\n\n      exportButton.setAttribute(\"data-kt-indicator\", \"on\"); // Set form action value\n\n      actionInput.value = \"export\"; // Prepare form data\n\n      var data = $(form).serialize();\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          var timer = setInterval(function () {\n            $(\"<iframe/>\").attr({\n              src: url + \"?layout-builder[action]=export&download=1&output=\" + response,\n              style: \"visibility:hidden;display:none\"\n            }).ready(function () {\n              // Stop the timer\n              clearInterval(timer);\n              exportButton.removeAttribute(\"data-kt-indicator\");\n            }).appendTo(\"body\");\n          }, 3000);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          exportButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n\n  var handleReset = function handleReset() {\n    resetButton.addEventListener(\"click\", function (e) {\n      e.preventDefault(); // Show progress\n\n      resetButton.setAttribute(\"data-kt-indicator\", \"on\"); // Set form action value\n\n      actionInput.value = \"reset\"; // Prepare form data\n\n      var data = $(form).serialize();\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          toastr.success(\"Preview has been successfully reset and the page will be reloaded.\", \"Reset Preview!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          setTimeout(function () {\n            location.reload(); // reload page\n          }, 1500);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n        },\n        complete: function complete() {\n          resetButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      handlePreview();\n      handleExport();\n      handleReset();\n      handleTab();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutBuilder.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/layout-builder/layout-builder.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/layout-builder/layout-builder.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/layout-builder/layout-builder.js ***!
  \***************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/layout-builder/layout-builder.js\":\n    /*!**************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/layout-builder/layout-builder.js ***!\r\n      \\**************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomLayoutBuilderLayoutBuilderJs() {\n      eval(\" // Class definition\\n\\nvar KTLayoutBuilder = function () {\\n  var form = document.querySelector(\\\"#kt_layout_builder_form\\\");\\n  var actionInput = document.querySelector(\\\"#kt_layout_builder_action\\\");\\n  var tabInput = document.querySelector(\\\"#kt_layout_builder_tab\\\");\\n  var url = form.getAttribute(\\\"action\\\");\\n  var previewButton = document.querySelector(\\\"#kt_layout_builder_preview\\\");\\n  var exportButton = document.querySelector(\\\"#kt_layout_builder_export\\\");\\n  var resetButton = document.querySelector(\\\"#kt_layout_builder_reset\\\");\\n\\n  var handleTab = function handleTab() {\\n    var tabs = [].slice.call(document.querySelectorAll('#kt_layout_builder_tabs a[data-bs-toggle=\\\"tab\\\"]'));\\n    tabs.forEach(function (tab) {\\n      tab.addEventListener(\\\"shown.bs.tab\\\", function (e) {\\n        tabInput.value = tab.getAttribute(\\\"href\\\").substring(1);\\n      });\\n    });\\n  };\\n\\n  var handlePreview = function handlePreview() {\\n    previewButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault(); // Set form action value\\n\\n      actionInput.value = \\\"preview\\\"; // Show progress\\n\\n      previewButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Prepare form data\\n\\n      var data = $(form).serialize(); // Submit\\n\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          toastr.success(\\\"Preview has been updated with current configured layout.\\\", \\\"Preview updated!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          setTimeout(function () {\\n            location.reload(); // reload page\\n          }, 1500);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n        },\\n        complete: function complete() {\\n          previewButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  var handleExport = function handleExport() {\\n    exportButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault();\\n      toastr.success(\\\"Process has been started and it may take a while.\\\", \\\"Generating HTML!\\\", {\\n        timeOut: 0,\\n        extendedTimeOut: 0,\\n        closeButton: true,\\n        closeDuration: 0\\n      }); // Show progress\\n\\n      exportButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Set form action value\\n\\n      actionInput.value = \\\"export\\\"; // Prepare form data\\n\\n      var data = $(form).serialize();\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          var timer = setInterval(function () {\\n            $(\\\"<iframe/>\\\").attr({\\n              src: url + \\\"?layout-builder[action]=export&download=1&output=\\\" + response,\\n              style: \\\"visibility:hidden;display:none\\\"\\n            }).ready(function () {\\n              // Stop the timer\\n              clearInterval(timer);\\n              exportButton.removeAttribute(\\\"data-kt-indicator\\\");\\n            }).appendTo(\\\"body\\\");\\n          }, 3000);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          exportButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  var handleReset = function handleReset() {\\n    resetButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault(); // Show progress\\n\\n      resetButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Set form action value\\n\\n      actionInput.value = \\\"reset\\\"; // Prepare form data\\n\\n      var data = $(form).serialize();\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          toastr.success(\\\"Preview has been successfully reset and the page will be reloaded.\\\", \\\"Reset Preview!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          setTimeout(function () {\\n            location.reload(); // reload page\\n          }, 1500);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n        },\\n        complete: function complete() {\\n          resetButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      handlePreview();\\n      handleExport();\\n      handleReset();\\n      handleTab();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTLayoutBuilder.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2xheW91dC1idWlsZGVyL2xheW91dC1idWlsZGVyLmpzLmpzIiwibWFwcGluZ3MiOiJDQUVBOztBQUNBLElBQUlBLGVBQWUsR0FBRyxZQUFXO0FBQ2hDLE1BQUlDLElBQUksR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLHlCQUF2QixDQUFYO0FBQ0EsTUFBSUMsV0FBVyxHQUFHRixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsMkJBQXZCLENBQWxCO0FBQ0EsTUFBSUUsUUFBUSxHQUFHSCxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsd0JBQXZCLENBQWY7QUFDQSxNQUFJRyxHQUFHLEdBQUdMLElBQUksQ0FBQ00sWUFBTCxDQUFrQixRQUFsQixDQUFWO0FBRUEsTUFBSUMsYUFBYSxHQUFHTixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsNEJBQXZCLENBQXBCO0FBQ0EsTUFBSU0sWUFBWSxHQUFHUCxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsMkJBQXZCLENBQW5CO0FBQ0EsTUFBSU8sV0FBVyxHQUFHUixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsMEJBQXZCLENBQWxCOztBQUVBLE1BQUlRLFNBQVMsR0FBRyxTQUFaQSxTQUFZLEdBQVc7QUFDMUIsUUFBSUMsSUFBSSxHQUFHLEdBQUdDLEtBQUgsQ0FBU0MsSUFBVCxDQUFjWixRQUFRLENBQUNhLGdCQUFULENBQTBCLGlEQUExQixDQUFkLENBQVg7QUFFQUgsSUFBQUEsSUFBSSxDQUFDSSxPQUFMLENBQWEsVUFBVUMsR0FBVixFQUFlO0FBQzNCQSxNQUFBQSxHQUFHLENBQUNDLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDLFVBQVVDLENBQVYsRUFBYTtBQUNqRGQsUUFBQUEsUUFBUSxDQUFDZSxLQUFULEdBQWlCSCxHQUFHLENBQUNWLFlBQUosQ0FBaUIsTUFBakIsRUFBeUJjLFNBQXpCLENBQW1DLENBQW5DLENBQWpCO0FBQ0EsT0FGRDtBQUdBLEtBSkQ7QUFLQSxHQVJEOztB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QUFDcEJsQyxVQUFBQSxXQUFXLENBQUNtQyxlQUFaLENBQTRCLG1CQUE1QjtBQUNBO0FBekJLLE9BQVA7QUEyQkEsS0F2Q0Q7QUF3Q0EsR0F6Q0Q7O0FBMkNBLFNBQU87QUFDTjtBQUNBVyxJQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDaEJsQyxNQUFBQSxhQUFhO0FBQ2J3QixNQUFBQSxZQUFZO0FBQ1pTLE1BQUFBLFdBQVc7QUFDWDVDLE1BQUFBLFNBQVM7QUFDVDtBQVBLLEdBQVA7QUFTQSxDQXRLcUIsRUFBdEIsQyxDQXdLQTs7O0FBQ0E4QyxNQUFNLENBQUNDLGtCQUFQLENBQTBCLFlBQVc7QUFDakMxRCxFQUFBQSxlQUFlLENBQUN3RCxJQUFoQjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2xheW91dC1idWlsZGVyL2xheW91dC1idWlsZGVyLmpzPzk5YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVExheW91dEJ1aWxkZXIgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja3RfbGF5b3V0X2J1aWxkZXJfZm9ybVwiKTtcclxuXHR2YXIgYWN0aW9uSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2t0X2xheW91dF9idWlsZGVyX2FjdGlvblwiKTtcclxuXHR2YXIgdGFiSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2t0X2xheW91dF9idWlsZGVyX3RhYlwiKTtcdFxyXG5cdHZhciB1cmwgPSBmb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcclxuXHJcblx0dmFyIHByZXZpZXdCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2t0X2xheW91dF9idWlsZGVyX3ByZXZpZXdcIik7XHJcblx0dmFyIGV4cG9ydEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja3RfbGF5b3V0X2J1aWxkZXJfZXhwb3J0XCIpO1xyXG5cdHZhciByZXNldEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja3RfbGF5b3V0X2J1aWxkZXJfcmVzZXRcIik7XHJcblxyXG5cdHZhciBoYW5kbGVUYWIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciB0YWJzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcja3RfbGF5b3V0X2J1aWxkZXJfdGFicyBhW2RhdGEtYnMtdG9nZ2xlPVwidGFiXCJdJykpO1xyXG5cclxuXHRcdHRhYnMuZm9yRWFjaChmdW5jdGlvbiAodGFiKSB7XHJcblx0XHRcdHRhYi5hZGRFdmVudExpc3RlbmVyKFwic2hvd24uYnMudGFiXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dGFiSW5wdXQudmFsdWUgPSB0YWIuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKS5zdWJzdHJpbmcoMSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0dmFyIGhhbmRsZVByZXZpZXcgPSBmdW5jdGlvbigpIHtcclxuXHRcdHByZXZpZXdCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0Ly8gU2V0IGZvcm0gYWN0aW9uIHZhbHVlXHJcblx0XHRcdGFjdGlvbklucHV0LnZhbHVlID0gXCJwcmV2aWV3XCI7XHJcblxyXG5cdFx0XHQvLyBTaG93IHByb2dyZXNzXHJcblx0XHRcdHByZXZpZXdCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIiwgXCJvblwiKTtcclxuXHJcblx0XHRcdC8vIFByZXBhcmUgZm9ybSBkYXRhXHJcblx0XHRcdHZhciBkYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcclxuXHJcblx0XHRcdC8vIFN1Ym1pdFxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6IFwiUE9TVFwiLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhocikge1xyXG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoXHJcblx0XHRcdFx0XHRcdFwiUHJldmlldyBoYXMgYmVlbiB1cGRhdGVkIHdpdGggY3VycmVudCBjb25maWd1cmVkIGxheW91dC5cIiwgXHJcblx0XHRcdFx0XHRcdFwiUHJldmlldyB1cGRhdGVkIVwiLCBcclxuXHRcdFx0XHRcdFx0e3RpbWVPdXQ6IDAsIGV4dGVuZGVkVGltZU91dDogMCwgY2xvc2VCdXR0b246IHRydWUsIGNsb3NlRHVyYXRpb246IDB9XHJcblx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGxvY2F0aW9uLnJlbG9hZCgpOyAvLyByZWxvYWQgcGFnZVxyXG5cdFx0XHRcdFx0fSwgMTUwMCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHRvYXN0ci5lcnJvcihcclxuXHRcdFx0XHRcdFx0XCJQbGVhc2UgdHJ5IGl0IGFnYWluIGxhdGVyLlwiLCBcclxuXHRcdFx0XHRcdFx0XCJTb21ldGhpbmcgd2VudCB3cm9uZyFcIiwgXHJcblx0XHRcdFx0XHRcdHt0aW1lT3V0OiAwLCBleHRlbmRlZFRpbWVPdXQ6IDAsIGNsb3NlQnV0dG9uOiB0cnVlLCBjbG9zZUR1cmF0aW9uOiAwfVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHByZXZpZXdCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdHZhciBoYW5kbGVFeHBvcnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdGV4cG9ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHR0b2FzdHIuc3VjY2VzcyhcclxuXHRcdFx0XHRcIlByb2Nlc3MgaGFzIGJlZW4gc3RhcnRlZCBhbmQgaXQgbWF5IHRha2UgYSB3aGlsZS5cIiwgXHJcblx0XHRcdFx0XCJHZW5lcmF0aW5nIEhUTUwhXCIsIFxyXG5cdFx0XHRcdHt0aW1lT3V0OiAwLCBleHRlbmRlZFRpbWVPdXQ6IDAsIGNsb3NlQnV0dG9uOiB0cnVlLCBjbG9zZUR1cmF0aW9uOiAwfVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0Ly8gU2hvdyBwcm9ncmVzc1xyXG5cdFx0XHRleHBvcnRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIiwgXCJvblwiKTtcclxuXHJcblx0XHRcdC8vIFNldCBmb3JtIGFjdGlvbiB2YWx1ZVxyXG5cdFx0XHRhY3Rpb25JbnB1dC52YWx1ZSA9IFwiZXhwb3J0XCI7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBQcmVwYXJlIGZvcm0gZGF0YVxyXG5cdFx0XHR2YXIgZGF0YSA9ICQoZm9ybSkuc2VyaWFsaXplKCk7XHJcblxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6IFwiUE9TVFwiLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhocikge1xyXG5cdFx0XHRcdFx0dmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdCQoXCI8aWZyYW1lLz5cIikuYXR0cih7XHJcblx0XHRcdFx0XHRcdFx0c3JjOiB1cmwgKyBcIj9sYXlvdXQtYnVpbGRlclthY3Rpb25dPWV4cG9ydCZkb3dubG9hZD0xJm91dHB1dD1cIiArIHJlc3BvbnNlLFxyXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiBcInZpc2liaWxpdHk6aGlkZGVuO2Rpc3BsYXk6bm9uZVwiLFxyXG5cdFx0XHRcdFx0XHR9KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTdG9wIHRoZSB0aW1lclxyXG5cdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwodGltZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRleHBvcnRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcblx0XHRcdFx0XHRcdH0pLmFwcGVuZFRvKFwiYm9keVwiKTtcclxuXHRcdFx0XHRcdH0sIDMwMDApO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoXHJcblx0XHRcdFx0XHRcdFwiUGxlYXNlIHRyeSBpdCBhZ2FpbiBsYXRlci5cIiwgXHJcblx0XHRcdFx0XHRcdFwiU29tZXRoaW5nIHdlbnQgd3JvbmchXCIsIFxyXG5cdFx0XHRcdFx0XHR7dGltZU91dDogMCwgZXh0ZW5kZWRUaW1lT3V0OiAwLCBjbG9zZUJ1dHRvbjogdHJ1ZSwgY2xvc2VEdXJhdGlvbjogMH1cclxuXHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0ZXhwb3J0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0dmFyIGhhbmRsZVJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXNldEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHQvLyBTaG93IHByb2dyZXNzXHJcblx0XHRcdHJlc2V0QnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIsIFwib25cIik7XHJcblxyXG5cdFx0XHQvLyBTZXQgZm9ybSBhY3Rpb24gdmFsdWVcclxuXHRcdFx0YWN0aW9uSW5wdXQudmFsdWUgPSBcInJlc2V0XCI7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBQcmVwYXJlIGZvcm0gZGF0YVxyXG5cdFx0XHR2YXIgZGF0YSA9ICQoZm9ybSkuc2VyaWFsaXplKCk7XHJcblxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6IFwiUE9TVFwiLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhocikge1xyXG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoXHJcblx0XHRcdFx0XHRcdFwiUHJldmlldyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcmVzZXQgYW5kIHRoZSBwYWdlIHdpbGwgYmUgcmVsb2FkZWQuXCIsIFxyXG5cdFx0XHRcdFx0XHRcIlJlc2V0IFByZXZpZXchXCIsIFxyXG5cdFx0XHRcdFx0XHR7dGltZU91dDogMCwgZXh0ZW5kZWRUaW1lT3V0OiAwLCBjbG9zZUJ1dHRvbjogdHJ1ZSwgY2xvc2VEdXJhdGlvbjogMH1cclxuXHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0bG9jYXRpb24ucmVsb2FkKCk7IC8vIHJlbG9hZCBwYWdlXHJcblx0XHRcdFx0XHR9LCAxNTAwKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0dG9hc3RyLmVycm9yKFxyXG5cdFx0XHRcdFx0XHRcIlBsZWFzZSB0cnkgaXQgYWdhaW4gbGF0ZXIuXCIsIFxyXG5cdFx0XHRcdFx0XHRcIlNvbWV0aGluZyB3ZW50IHdyb25nIVwiLCBcclxuXHRcdFx0XHRcdFx0e3RpbWVPdXQ6IDAsIGV4dGVuZGVkVGltZU91dDogMCwgY2xvc2VCdXR0b246IHRydWUsIGNsb3NlRHVyYXRpb246IDB9XHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmVzZXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0Ly8gUHVibGljIGZ1bmN0aW9uc1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGhhbmRsZVByZXZpZXcoKTtcclxuXHRcdFx0aGFuZGxlRXhwb3J0KCk7XHJcblx0XHRcdGhhbmRsZVJlc2V0KCk7XHJcblx0XHRcdGhhbmRsZVRhYigpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24oKSB7XHJcbiAgICBLVExheW91dEJ1aWxkZXIuaW5pdCgpO1xyXG59KTsiXSwibmFtZXMiOlsiS1RMYXlvdXRCdWlsZGVyIiwiZm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFjdGlvbklucHV0IiwidGFiSW5wdXQiLCJ1cmwiLCJnZXRBdHRyaWJ1dGUiLCJwcmV2aWV3QnV0dG9uIiwiZXhwb3J0QnV0dG9uIiwicmVzZXRCdXR0b24iLCJoYW5kbGVUYWIiLCJ0YWJzIiwic2xpY2UiLCJjYWxsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJ0YWIiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInZhbHVlIiwic3Vic3RyaW5nIiwiaGFuZGxlUHJldmlldyIsInByZXZlbnREZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiZGF0YSIsIiQiLCJzZXJpYWxpemUiLCJhamF4IiwidHlwZSIsImRhdGFUeXBlIiwic3VjY2VzcyIsInJlc3BvbnNlIiwic3RhdHVzIiwieGhyIiwidG9hc3RyIiwidGltZU91dCIsImV4dGVuZGVkVGltZU91dCIsImNsb3NlQnV0dG9uIiwiY2xvc2VEdXJhdGlvbiIsInNldFRpbWVvdXQiLCJsb2NhdGlvbiIsInJlbG9hZCIsImVycm9yIiwiY29tcGxldGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYW5kbGVFeHBvcnQiLCJ0aW1lciIsInNldEludGVydmFsIiwiYXR0ciIsInNyYyIsInN0eWxlIiwicmVhZHkiLCJjbGVhckludGVydmFsIiwiYXBwZW5kVG8iLCJoYW5kbGVSZXNldCIsImluaXQiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/layout-builder/layout-builder.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/layout-builder/layout-builder.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/layout-builder/layout-builder.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/layout-builder/layout-builder.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/layout-builder/layout-builder.js"]();
/******/ 	
/******/ })()
;