/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/layout-builder/layout-builder.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/core/js/custom/layout-builder/layout-builder.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTLayoutBuilder = function () {\n  var form = document.querySelector(\"#kt_layout_builder_form\");\n  var actionInput = document.querySelector(\"#kt_layout_builder_action\");\n  var tabInput = document.querySelector(\"#kt_layout_builder_tab\");\n  var url = form.getAttribute(\"action\");\n  var previewButton = document.querySelector(\"#kt_layout_builder_preview\");\n  var exportButton = document.querySelector(\"#kt_layout_builder_export\");\n  var resetButton = document.querySelector(\"#kt_layout_builder_reset\");\n  var handleTab = function handleTab() {\n    var tabs = [].slice.call(document.querySelectorAll('#kt_layout_builder_tabs a[data-bs-toggle=\"tab\"]'));\n    tabs.forEach(function (tab) {\n      tab.addEventListener(\"shown.bs.tab\", function (e) {\n        tabInput.value = tab.getAttribute(\"href\").substring(1);\n      });\n    });\n  };\n  var handlePreview = function handlePreview() {\n    previewButton.addEventListener(\"click\", function (e) {\n      e.preventDefault();\n\n      // Set form action value\n      actionInput.value = \"preview\";\n\n      // Show progress\n      previewButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n      // Prepare form data\n      var data = $(form).serialize();\n\n      // Submit\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          toastr.success(\"Preview has been updated with current configured layout.\", \"Preview updated!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          setTimeout(function () {\n            location.reload(); // reload page\n          }, 1500);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n        },\n        complete: function complete() {\n          previewButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n  var handleExport = function handleExport() {\n    exportButton.addEventListener(\"click\", function (e) {\n      e.preventDefault();\n      toastr.success(\"Process has been started and it may take a while.\", \"Generating HTML!\", {\n        timeOut: 0,\n        extendedTimeOut: 0,\n        closeButton: true,\n        closeDuration: 0\n      });\n\n      // Show progress\n      exportButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n      // Set form action value\n      actionInput.value = \"export\";\n\n      // Prepare form data\n      var data = $(form).serialize();\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          var timer = setInterval(function () {\n            $(\"<iframe/>\").attr({\n              src: url + \"?layout-builder[action]=export&download=1&output=\" + response,\n              style: \"visibility:hidden;display:none\"\n            }).ready(function () {\n              // Stop the timer\n              clearInterval(timer);\n              exportButton.removeAttribute(\"data-kt-indicator\");\n            }).appendTo(\"body\");\n          }, 3000);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          exportButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n  var handleReset = function handleReset() {\n    resetButton.addEventListener(\"click\", function (e) {\n      e.preventDefault();\n\n      // Show progress\n      resetButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n      // Set form action value\n      actionInput.value = \"reset\";\n\n      // Prepare form data\n      var data = $(form).serialize();\n      $.ajax({\n        type: \"POST\",\n        dataType: \"html\",\n        url: url,\n        data: data,\n        success: function success(response, status, xhr) {\n          toastr.success(\"Preview has been successfully reset and the page will be reloaded.\", \"Reset Preview!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n          setTimeout(function () {\n            location.reload(); // reload page\n          }, 1500);\n        },\n        error: function error(response) {\n          toastr.error(\"Please try it again later.\", \"Something went wrong!\", {\n            timeOut: 0,\n            extendedTimeOut: 0,\n            closeButton: true,\n            closeDuration: 0\n          });\n        },\n        complete: function complete() {\n          resetButton.removeAttribute(\"data-kt-indicator\");\n        }\n      });\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      handlePreview();\n      handleExport();\n      handleReset();\n      handleTab();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutBuilder.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/layout-builder/layout-builder.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/layout-builder/layout-builder.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/layout-builder/layout-builder.js ***!
  \***************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/layout-builder/layout-builder.js\": (\n    /*!**************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/layout-builder/layout-builder.js ***!\n      \\**************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomLayoutBuilderLayoutBuilderJs() {\n      eval(\" // Class definition\\n\\nvar KTLayoutBuilder = function () {\\n  var form = document.querySelector(\\\"#kt_layout_builder_form\\\");\\n  var actionInput = document.querySelector(\\\"#kt_layout_builder_action\\\");\\n  var tabInput = document.querySelector(\\\"#kt_layout_builder_tab\\\");\\n  var url = form.getAttribute(\\\"action\\\");\\n  var previewButton = document.querySelector(\\\"#kt_layout_builder_preview\\\");\\n  var exportButton = document.querySelector(\\\"#kt_layout_builder_export\\\");\\n  var resetButton = document.querySelector(\\\"#kt_layout_builder_reset\\\");\\n\\n  var handleTab = function handleTab() {\\n    var tabs = [].slice.call(document.querySelectorAll('#kt_layout_builder_tabs a[data-bs-toggle=\\\"tab\\\"]'));\\n    tabs.forEach(function (tab) {\\n      tab.addEventListener(\\\"shown.bs.tab\\\", function (e) {\\n        tabInput.value = tab.getAttribute(\\\"href\\\").substring(1);\\n      });\\n    });\\n  };\\n\\n  var handlePreview = function handlePreview() {\\n    previewButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault(); // Set form action value\\n\\n      actionInput.value = \\\"preview\\\"; // Show progress\\n\\n      previewButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Prepare form data\\n\\n      var data = $(form).serialize(); // Submit\\n\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          toastr.success(\\\"Preview has been updated with current configured layout.\\\", \\\"Preview updated!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          setTimeout(function () {\\n            location.reload(); // reload page\\n          }, 1500);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n        },\\n        complete: function complete() {\\n          previewButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  var handleExport = function handleExport() {\\n    exportButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault();\\n      toastr.success(\\\"Process has been started and it may take a while.\\\", \\\"Generating HTML!\\\", {\\n        timeOut: 0,\\n        extendedTimeOut: 0,\\n        closeButton: true,\\n        closeDuration: 0\\n      }); // Show progress\\n\\n      exportButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Set form action value\\n\\n      actionInput.value = \\\"export\\\"; // Prepare form data\\n\\n      var data = $(form).serialize();\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          var timer = setInterval(function () {\\n            $(\\\"<iframe/>\\\").attr({\\n              src: url + \\\"?layout-builder[action]=export&download=1&output=\\\" + response,\\n              style: \\\"visibility:hidden;display:none\\\"\\n            }).ready(function () {\\n              // Stop the timer\\n              clearInterval(timer);\\n              exportButton.removeAttribute(\\\"data-kt-indicator\\\");\\n            }).appendTo(\\\"body\\\");\\n          }, 3000);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          exportButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  var handleReset = function handleReset() {\\n    resetButton.addEventListener(\\\"click\\\", function (e) {\\n      e.preventDefault(); // Show progress\\n\\n      resetButton.setAttribute(\\\"data-kt-indicator\\\", \\\"on\\\"); // Set form action value\\n\\n      actionInput.value = \\\"reset\\\"; // Prepare form data\\n\\n      var data = $(form).serialize();\\n      $.ajax({\\n        type: \\\"POST\\\",\\n        dataType: \\\"html\\\",\\n        url: url,\\n        data: data,\\n        success: function success(response, status, xhr) {\\n          toastr.success(\\\"Preview has been successfully reset and the page will be reloaded.\\\", \\\"Reset Preview!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n          setTimeout(function () {\\n            location.reload(); // reload page\\n          }, 1500);\\n        },\\n        error: function error(response) {\\n          toastr.error(\\\"Please try it again later.\\\", \\\"Something went wrong!\\\", {\\n            timeOut: 0,\\n            extendedTimeOut: 0,\\n            closeButton: true,\\n            closeDuration: 0\\n          });\\n        },\\n        complete: function complete() {\\n          resetButton.removeAttribute(\\\"data-kt-indicator\\\");\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      handlePreview();\\n      handleExport();\\n      handleReset();\\n      handleTab();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTLayoutBuilder.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/layout-builder/layout-builder.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/layout-builder/layout-builder.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/layout-builder/layout-builder.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/layout-builder/layout-builder.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/layout-builder/layout-builder.js"]();
/******/ 	
/******/ })()
;