/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js ***!
  \*********************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTFlotDemoAxis = function () {\n  // Private functions\n  var exampleAxis = function exampleAxis() {\n    function randValue() {\n      return Math.floor(Math.random() * (1 + 40 - 20)) + 20;\n    }\n\n    var pageviews = [[1, randValue()], [2, randValue()], [3, 2 + randValue()], [4, 3 + randValue()], [5, 5 + randValue()], [6, 10 + randValue()], [7, 15 + randValue()], [8, 20 + randValue()], [9, 25 + randValue()], [10, 30 + randValue()], [11, 35 + randValue()], [12, 25 + randValue()], [13, 15 + randValue()], [14, 20 + randValue()], [15, 45 + randValue()], [16, 50 + randValue()], [17, 65 + randValue()], [18, 70 + randValue()], [19, 85 + randValue()], [20, 80 + randValue()], [21, 75 + randValue()], [22, 80 + randValue()], [23, 75 + randValue()], [24, 70 + randValue()], [25, 65 + randValue()], [26, 75 + randValue()], [27, 80 + randValue()], [28, 85 + randValue()], [29, 90 + randValue()], [30, 95 + randValue()]];\n    var visitors = [[1, randValue() - 5], [2, randValue() - 5], [3, randValue() - 5], [4, 6 + randValue()], [5, 5 + randValue()], [6, 20 + randValue()], [7, 25 + randValue()], [8, 36 + randValue()], [9, 26 + randValue()], [10, 38 + randValue()], [11, 39 + randValue()], [12, 50 + randValue()], [13, 51 + randValue()], [14, 12 + randValue()], [15, 13 + randValue()], [16, 14 + randValue()], [17, 15 + randValue()], [18, 15 + randValue()], [19, 16 + randValue()], [20, 17 + randValue()], [21, 18 + randValue()], [22, 19 + randValue()], [23, 20 + randValue()], [24, 21 + randValue()], [25, 14 + randValue()], [26, 24 + randValue()], [27, 25 + randValue()], [28, 26 + randValue()], [29, 27 + randValue()], [30, 31 + randValue()]];\n    var plot = $.plot($(\"#kt_docs_flot_axis\"), [{\n      data: pageviews,\n      label: \"Unique Visits\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      data: visitors,\n      label: \"Page Views\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], {\n      series: {\n        lines: {\n          show: true,\n          lineWidth: 2,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 0.05\n            }, {\n              opacity: 0.01\n            }]\n          }\n        },\n        points: {\n          show: true,\n          radius: 3,\n          lineWidth: 1\n        },\n        shadowSize: 2\n      },\n      grid: {\n        hoverable: true,\n        clickable: true,\n        tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n        borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n        borderWidth: 1\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-active-primary'), KTUtil.getCssVariableValue('--bs-active-danger')],\n      xaxis: {\n        ticks: 11,\n        tickDecimals: 0,\n        tickColor: KTUtil.getCssVariableValue('--bs-active-dark')\n      },\n      yaxis: {\n        ticks: 11,\n        tickDecimals: 0,\n        tickColor: KTUtil.getCssVariableValue('--bs-active-dark')\n      }\n    });\n\n    function showTooltip(x, y, contents) {\n      $('<div id=\"tooltip\">' + contents + '</div>').css({\n        position: 'absolute',\n        display: 'none',\n        top: y + 5,\n        left: x + 15,\n        border: '1px solid ' + KTUtil.getCssVariableValue('--bs-light-dark'),\n        padding: '4px',\n        color: +KTUtil.getCssVariableValue('--bs-active-dark'),\n        'border-radius': '3px',\n        'background-color': +KTUtil.getCssVariableValue('--bs-light-dark'),\n        opacity: 0.80\n      }).appendTo(\"body\").fadeIn(200);\n    }\n\n    var previousPoint = null;\n    $(\"#chart_2\").bind(\"plothover\", function (event, pos, item) {\n      $(\"#x\").text(pos.x.toFixed(2));\n      $(\"#y\").text(pos.y.toFixed(2));\n\n      if (item) {\n        if (previousPoint != item.dataIndex) {\n          previousPoint = item.dataIndex;\n          $(\"#tooltip\").remove();\n          var x = item.datapoint[0].toFixed(2),\n              y = item.datapoint[1].toFixed(2);\n          showTooltip(item.pageX, item.pageY, item.series.label + \" of \" + x + \" = \" + y);\n        }\n      } else {\n        $(\"#tooltip\").remove();\n        previousPoint = null;\n      }\n    });\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      exampleAxis();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFlotDemoAxis.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/flotcharts/axis.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/flotcharts/axis.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js\":\n    /*!*********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js ***!\r\n      \\*********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsFlotchartsAxisJs() {\n      eval(\" // Class definition\\n\\nvar KTFlotDemoAxis = function () {\\n  // Private functions\\n  var exampleAxis = function exampleAxis() {\\n    function randValue() {\\n      return Math.floor(Math.random() * (1 + 40 - 20)) + 20;\\n    }\\n\\n    var pageviews = [[1, randValue()], [2, randValue()], [3, 2 + randValue()], [4, 3 + randValue()], [5, 5 + randValue()], [6, 10 + randValue()], [7, 15 + randValue()], [8, 20 + randValue()], [9, 25 + randValue()], [10, 30 + randValue()], [11, 35 + randValue()], [12, 25 + randValue()], [13, 15 + randValue()], [14, 20 + randValue()], [15, 45 + randValue()], [16, 50 + randValue()], [17, 65 + randValue()], [18, 70 + randValue()], [19, 85 + randValue()], [20, 80 + randValue()], [21, 75 + randValue()], [22, 80 + randValue()], [23, 75 + randValue()], [24, 70 + randValue()], [25, 65 + randValue()], [26, 75 + randValue()], [27, 80 + randValue()], [28, 85 + randValue()], [29, 90 + randValue()], [30, 95 + randValue()]];\\n    var visitors = [[1, randValue() - 5], [2, randValue() - 5], [3, randValue() - 5], [4, 6 + randValue()], [5, 5 + randValue()], [6, 20 + randValue()], [7, 25 + randValue()], [8, 36 + randValue()], [9, 26 + randValue()], [10, 38 + randValue()], [11, 39 + randValue()], [12, 50 + randValue()], [13, 51 + randValue()], [14, 12 + randValue()], [15, 13 + randValue()], [16, 14 + randValue()], [17, 15 + randValue()], [18, 15 + randValue()], [19, 16 + randValue()], [20, 17 + randValue()], [21, 18 + randValue()], [22, 19 + randValue()], [23, 20 + randValue()], [24, 21 + randValue()], [25, 14 + randValue()], [26, 24 + randValue()], [27, 25 + randValue()], [28, 26 + randValue()], [29, 27 + randValue()], [30, 31 + randValue()]];\\n    var plot = $.plot($(\\\"#kt_docs_flot_axis\\\"), [{\\n      data: pageviews,\\n      label: \\\"Unique Visits\\\",\\n      lines: {\\n        lineWidth: 1\\n      },\\n      shadowSize: 0\\n    }, {\\n      data: visitors,\\n      label: \\\"Page Views\\\",\\n      lines: {\\n        lineWidth: 1\\n      },\\n      shadowSize: 0\\n    }], {\\n      series: {\\n        lines: {\\n          show: true,\\n          lineWidth: 2,\\n          fill: true,\\n          fillColor: {\\n            colors: [{\\n              opacity: 0.05\\n            }, {\\n              opacity: 0.01\\n            }]\\n          }\\n        },\\n        points: {\\n          show: true,\\n          radius: 3,\\n          lineWidth: 1\\n        },\\n        shadowSize: 2\\n      },\\n      grid: {\\n        hoverable: true,\\n        clickable: true,\\n        tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n        borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n        borderWidth: 1\\n      },\\n      colors: [KTUtil.getCssVariableValue('--bs-active-primary'), KTUtil.getCssVariableValue('--bs-active-danger')],\\n      xaxis: {\\n        ticks: 11,\\n        tickDecimals: 0,\\n        tickColor: KTUtil.getCssVariableValue('--bs-active-dark')\\n      },\\n      yaxis: {\\n        ticks: 11,\\n        tickDecimals: 0,\\n        tickColor: KTUtil.getCssVariableValue('--bs-active-dark')\\n      }\\n    });\\n\\n    function showTooltip(x, y, contents) {\\n      $('<div id=\\\"tooltip\\\">' + contents + '</div>').css({\\n        position: 'absolute',\\n        display: 'none',\\n        top: y + 5,\\n        left: x + 15,\\n        border: '1px solid ' + KTUtil.getCssVariableValue('--bs-light-dark'),\\n        padding: '4px',\\n        color: +KTUtil.getCssVariableValue('--bs-active-dark'),\\n        'border-radius': '3px',\\n        'background-color': +KTUtil.getCssVariableValue('--bs-light-dark'),\\n        opacity: 0.80\\n      }).appendTo(\\\"body\\\").fadeIn(200);\\n    }\\n\\n    var previousPoint = null;\\n    $(\\\"#chart_2\\\").bind(\\\"plothover\\\", function (event, pos, item) {\\n      $(\\\"#x\\\").text(pos.x.toFixed(2));\\n      $(\\\"#y\\\").text(pos.y.toFixed(2));\\n\\n      if (item) {\\n        if (previousPoint != item.dataIndex) {\\n          previousPoint = item.dataIndex;\\n          $(\\\"#tooltip\\\").remove();\\n          var x = item.datapoint[0].toFixed(2),\\n              y = item.datapoint[1].toFixed(2);\\n          showTooltip(item.pageX, item.pageY, item.series.label + \\\" of \\\" + x + \\\" = \\\" + y);\\n        }\\n      } else {\\n        $(\\\"#tooltip\\\").remove();\\n        previousPoint = null;\\n      }\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      exampleAxis();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFlotDemoAxis.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/flotcharts/axis.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/flotcharts/axis.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/flotcharts/axis.js"]();
/******/ 	
/******/ })()
;