/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js ***!
  \**********************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTFlotDemoStack = function () {\n  // Private functions\n  var exampleStack = function exampleStack() {\n    var d1 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d1.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d2 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d2.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d3 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d3.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var stack = 0,\n        bars = true,\n        lines = false,\n        steps = false;\n\n    function plotWithOptions() {\n      $.plot($(\"#kt_docs_flot_stack\"), [{\n        label: \"sales\",\n        data: d1,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }, {\n        label: \"tax\",\n        data: d2,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }, {\n        label: \"profit\",\n        data: d3,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }], {\n        colors: [KTUtil.getCssVariableValue('--bs-active-danger'), KTUtil.getCssVariableValue('--bs-active-primary')],\n        series: {\n          stack: stack,\n          lines: {\n            show: lines,\n            fill: true,\n            steps: steps,\n            lineWidth: 0 // in pixels\n\n          },\n          bars: {\n            show: bars,\n            barWidth: 0.5,\n            lineWidth: 0,\n            // in pixels\n            shadowSize: 0,\n            align: 'center'\n          }\n        },\n        grid: {\n          tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n          borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n          borderWidth: 1\n        }\n      });\n    }\n\n    $(\".stackControls input\").click(function (e) {\n      e.preventDefault();\n      stack = $(this).val() == \"With stacking\" ? true : null;\n      plotWithOptions();\n    });\n    $(\".graphControls input\").click(function (e) {\n      e.preventDefault();\n      bars = $(this).val().indexOf(\"Bars\") != -1;\n      lines = $(this).val().indexOf(\"Lines\") != -1;\n      steps = $(this).val().indexOf(\"steps\") != -1;\n      plotWithOptions();\n    });\n    plotWithOptions();\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      exampleStack();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFlotDemoStack.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/flotcharts/stack.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/flotcharts/stack.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js\":\n    /*!**********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js ***!\r\n      \\**********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsFlotchartsStackJs() {\n      eval(\" // Class definition\\n\\nvar KTFlotDemoStack = function () {\\n  // Private functions\\n  var exampleStack = function exampleStack() {\\n    var d1 = [];\\n\\n    for (var i = 0; i <= 10; i += 1) {\\n      d1.push([i, parseInt(Math.random() * 30)]);\\n    }\\n\\n    var d2 = [];\\n\\n    for (var i = 0; i <= 10; i += 1) {\\n      d2.push([i, parseInt(Math.random() * 30)]);\\n    }\\n\\n    var d3 = [];\\n\\n    for (var i = 0; i <= 10; i += 1) {\\n      d3.push([i, parseInt(Math.random() * 30)]);\\n    }\\n\\n    var stack = 0,\\n        bars = true,\\n        lines = false,\\n        steps = false;\\n\\n    function plotWithOptions() {\\n      $.plot($(\\\"#kt_docs_flot_stack\\\"), [{\\n        label: \\\"sales\\\",\\n        data: d1,\\n        lines: {\\n          lineWidth: 1\\n        },\\n        shadowSize: 0\\n      }, {\\n        label: \\\"tax\\\",\\n        data: d2,\\n        lines: {\\n          lineWidth: 1\\n        },\\n        shadowSize: 0\\n      }, {\\n        label: \\\"profit\\\",\\n        data: d3,\\n        lines: {\\n          lineWidth: 1\\n        },\\n        shadowSize: 0\\n      }], {\\n        colors: [KTUtil.getCssVariableValue('--bs-active-danger'), KTUtil.getCssVariableValue('--bs-active-primary')],\\n        series: {\\n          stack: stack,\\n          lines: {\\n            show: lines,\\n            fill: true,\\n            steps: steps,\\n            lineWidth: 0 // in pixels\\n\\n          },\\n          bars: {\\n            show: bars,\\n            barWidth: 0.5,\\n            lineWidth: 0,\\n            // in pixels\\n            shadowSize: 0,\\n            align: 'center'\\n          }\\n        },\\n        grid: {\\n          tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n          borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n          borderWidth: 1\\n        }\\n      });\\n    }\\n\\n    $(\\\".stackControls input\\\").click(function (e) {\\n      e.preventDefault();\\n      stack = $(this).val() == \\\"With stacking\\\" ? true : null;\\n      plotWithOptions();\\n    });\\n    $(\\\".graphControls input\\\").click(function (e) {\\n      e.preventDefault();\\n      bars = $(this).val().indexOf(\\\"Bars\\\") != -1;\\n      lines = $(this).val().indexOf(\\\"Lines\\\") != -1;\\n      steps = $(this).val().indexOf(\\\"steps\\\") != -1;\\n      plotWithOptions();\\n    });\\n    plotWithOptions();\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      exampleStack();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFlotDemoStack.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/flotcharts/stack.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/flotcharts/stack.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/flotcharts/stack.js"]();
/******/ 	
/******/ })()
;