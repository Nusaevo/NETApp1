/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js ***!
  \*************************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTFlotDemoTracking = function () {\n  // Private functions\n  var exampleTracking = function exampleTracking() {\n    var sin = [],\n        cos = [];\n\n    for (var i = 0; i < 14; i += 0.1) {\n      sin.push([i, Math.sin(i)]);\n      cos.push([i, Math.cos(i)]);\n    }\n\n    var plot = $.plot($(\"#kt_docs_flot_tracking\"), [{\n      data: sin,\n      label: \"sin(x) = -0.00\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      data: cos,\n      label: \"cos(x) = -0.00\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], {\n      colors: [KTUtil.getCssVariableValue('--bs-active-primary'), KTUtil.getCssVariableValue('--bs-active-warning')],\n      series: {\n        lines: {\n          show: true\n        }\n      },\n      crosshair: {\n        mode: \"x\"\n      },\n      grid: {\n        hoverable: true,\n        autoHighlight: false,\n        tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n        borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\n        borderWidth: 1\n      },\n      yaxis: {\n        min: -1.2,\n        max: 1.2\n      }\n    });\n    var legends = $(\"#kt_docs_flot_tracking .legendLabel\");\n    legends.each(function () {\n      // fix the widths so they don't jump around\n      $(this).css('width', $(this).width());\n    });\n    var updateLegendTimeout = null;\n    var latestPosition = null;\n\n    function updateLegend() {\n      updateLegendTimeout = null;\n      var pos = latestPosition;\n      var axes = plot.getAxes();\n      if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max || pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) return;\n      var i,\n          j,\n          dataset = plot.getData();\n\n      for (i = 0; i < dataset.length; ++i) {\n        var series = dataset[i]; // find the nearest points, x-wise\n\n        for (j = 0; j < series.data.length; ++j) {\n          if (series.data[j][0] > pos.x) break;\n        } // now interpolate\n\n\n        var y,\n            p1 = series.data[j - 1],\n            p2 = series.data[j];\n        if (p1 == null) y = p2[1];else if (p2 == null) y = p1[1];else y = p1[1] + (p2[1] - p1[1]) * (pos.x - p1[0]) / (p2[0] - p1[0]);\n        legends.eq(i).text(series.label.replace(/=.*/, \"= \" + y.toFixed(2)));\n      }\n    }\n\n    $(\"#kt_docs_flot_tracking\").bind(\"plothover\", function (event, pos, item) {\n      latestPosition = pos;\n      if (!updateLegendTimeout) updateLegendTimeout = setTimeout(updateLegend, 50);\n    });\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      exampleTracking();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFlotDemoTracking.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/flotcharts/tracking.js":
/*!**************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/flotcharts/tracking.js ***!
  \**************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js\":\n    /*!*************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js ***!\r\n      \\*************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsFlotchartsTrackingJs() {\n      eval(\" // Class definition\\n\\nvar KTFlotDemoTracking = function () {\\n  // Private functions\\n  var exampleTracking = function exampleTracking() {\\n    var sin = [],\\n        cos = [];\\n\\n    for (var i = 0; i < 14; i += 0.1) {\\n      sin.push([i, Math.sin(i)]);\\n      cos.push([i, Math.cos(i)]);\\n    }\\n\\n    var plot = $.plot($(\\\"#kt_docs_flot_tracking\\\"), [{\\n      data: sin,\\n      label: \\\"sin(x) = -0.00\\\",\\n      lines: {\\n        lineWidth: 1\\n      },\\n      shadowSize: 0\\n    }, {\\n      data: cos,\\n      label: \\\"cos(x) = -0.00\\\",\\n      lines: {\\n        lineWidth: 1\\n      },\\n      shadowSize: 0\\n    }], {\\n      colors: [KTUtil.getCssVariableValue('--bs-active-primary'), KTUtil.getCssVariableValue('--bs-active-warning')],\\n      series: {\\n        lines: {\\n          show: true\\n        }\\n      },\\n      crosshair: {\\n        mode: \\\"x\\\"\\n      },\\n      grid: {\\n        hoverable: true,\\n        autoHighlight: false,\\n        tickColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n        borderColor: KTUtil.getCssVariableValue('--bs-light-dark'),\\n        borderWidth: 1\\n      },\\n      yaxis: {\\n        min: -1.2,\\n        max: 1.2\\n      }\\n    });\\n    var legends = $(\\\"#kt_docs_flot_tracking .legendLabel\\\");\\n    legends.each(function () {\\n      // fix the widths so they don't jump around\\n      $(this).css('width', $(this).width());\\n    });\\n    var updateLegendTimeout = null;\\n    var latestPosition = null;\\n\\n    function updateLegend() {\\n      updateLegendTimeout = null;\\n      var pos = latestPosition;\\n      var axes = plot.getAxes();\\n      if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max || pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) return;\\n      var i,\\n          j,\\n          dataset = plot.getData();\\n\\n      for (i = 0; i < dataset.length; ++i) {\\n        var series = dataset[i]; // find the nearest points, x-wise\\n\\n        for (j = 0; j < series.data.length; ++j) {\\n          if (series.data[j][0] > pos.x) break;\\n        } // now interpolate\\n\\n\\n        var y,\\n            p1 = series.data[j - 1],\\n            p2 = series.data[j];\\n        if (p1 == null) y = p2[1];else if (p2 == null) y = p1[1];else y = p1[1] + (p2[1] - p1[1]) * (pos.x - p1[0]) / (p2[0] - p1[0]);\\n        legends.eq(i).text(series.label.replace(/=.*/, \\\"= \\\" + y.toFixed(2)));\\n      }\\n    }\\n\\n    $(\\\"#kt_docs_flot_tracking\\\").bind(\\\"plothover\\\", function (event, pos, item) {\\n      latestPosition = pos;\\n      if (!updateLegendTimeout) updateLegendTimeout = setTimeout(updateLegend, 50);\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      exampleTracking();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFlotDemoTracking.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2Zsb3RjaGFydHMvdHJhY2tpbmcuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsa0JBQWtCLEdBQUcsWUFBWTtBQUNqQztBQUNBLE1BQUlDLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBWTtBQUM5QixRQUFJQyxHQUFHLEdBQUcsRUFBVjtBQUFBLFFBQ0xDLEdBQUcsR0FBRyxFQUREOztBQUVOLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxJQUFJLEdBQTdCLEVBQWtDO0FBQ2pDRixNQUFBQSxHQUFHLENBQUNHLElBQUosQ0FBUyxDQUFDRCxDQUFELEVBQUlFLElBQUksQ0FBQ0osR0FBTCxDQUFTRSxDQUFULENBQUosQ0FBVDtBQUNBRCxNQUFBQSxHQUFHLENBQUNFLElBQUosQ0FBUyxDQUFDRCxDQUFELEVBQUlFLElBQUksQ0FBQ0gsR0FBTCxDQUFTQyxDQUFULENBQUosQ0FBVDtBQUNBOztBQUVELFFBQUlHLElBQUksR0FBR0MsQ0FBQyxDQUFDRCxJQUFGLENBQU9DLENBQUMsQ0FBQyx3QkFBRCxDQUFSLEVBQW9DLENBQUM7QUFDL0NDLE1BQUFBLElBQUksRUFBRVAsR0FEeUM7QUFFL0NRLE1BQUFBLEtBQUssRUFBRSxnQkFGd0M7QUFHL0NDLE1BQUFBLEtBQUssRUFBRTtBQUNOQyxRQUFBQSxTQUFTLEVBQUU7QUFETCxPQUh3QztBQU0vQ0MsTUFBQUEsVUFBVSxFQUFFO0FBTm1DLEtBQUQsRUFPNUM7QUFDRkosTUFBQUEsSUFBSSxFQUFFTixHQURKO0FBRUZPLE1BQUFBLEtBQUssRUFBRSxnQkFGTDtBQUdGQyxNQUFBQSxLQUFLLEVBQUU7QUFDTkMsUUFBQUEsU0FBUyxFQUFFO0FBREwsT0FITDtBQU1GQyxNQUFBQSxVQUFVLEVBQUU7QUFOVixLQVA0QyxDQUFwQyxFQWNQO0FB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Oi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2NoYXJ0cy9mbG90Y2hhcnRzL3RyYWNraW5nLmpzPzU5YjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVEZsb3REZW1vVHJhY2tpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGV4YW1wbGVUcmFja2luZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2luID0gW10sXHJcblx0XHRcdGNvcyA9IFtdO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxNDsgaSArPSAwLjEpIHtcclxuXHRcdFx0c2luLnB1c2goW2ksIE1hdGguc2luKGkpXSk7XHJcblx0XHRcdGNvcy5wdXNoKFtpLCBNYXRoLmNvcyhpKV0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwbG90ID0gJC5wbG90KCQoXCIja3RfZG9jc19mbG90X3RyYWNraW5nXCIpLCBbe1xyXG5cdFx0XHRkYXRhOiBzaW4sXHJcblx0XHRcdGxhYmVsOiBcInNpbih4KSA9IC0wLjAwXCIsXHJcblx0XHRcdGxpbmVzOiB7XHJcblx0XHRcdFx0bGluZVdpZHRoOiAxLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRzaGFkb3dTaXplOiAwXHJcblx0XHR9LCB7XHJcblx0XHRcdGRhdGE6IGNvcyxcclxuXHRcdFx0bGFiZWw6IFwiY29zKHgpID0gLTAuMDBcIixcclxuXHRcdFx0bGluZXM6IHtcclxuXHRcdFx0XHRsaW5lV2lkdGg6IDEsXHJcblx0XHRcdH0sXHJcblx0XHRcdHNoYWRvd1NpemU6IDBcclxuXHRcdH1dLCB7XHJcblx0XHRcdGNvbG9yczogW0tUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWFjdGl2ZS1wcmltYXJ5JyksIEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWFjdGl2ZS13YXJuaW5nJyldLFxyXG5cdFx0XHRzZXJpZXM6IHtcclxuXHRcdFx0XHRsaW5lczoge1xyXG5cdFx0XHRcdFx0c2hvdzogdHJ1ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0Y3Jvc3NoYWlyOiB7XHJcblx0XHRcdFx0bW9kZTogXCJ4XCJcclxuXHRcdFx0fSxcclxuXHRcdFx0Z3JpZDoge1xyXG5cdFx0XHRcdGhvdmVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0XHRhdXRvSGlnaGxpZ2h0OiBmYWxzZSxcclxuXHRcdFx0XHR0aWNrQ29sb3I6IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWxpZ2h0LWRhcmsnKSxcclxuXHRcdFx0XHRib3JkZXJDb2xvcjogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtbGlnaHQtZGFyaycpLFxyXG5cdFx0XHRcdGJvcmRlcldpZHRoOiAxXHJcblx0XHRcdH0sXHJcblx0XHRcdHlheGlzOiB7XHJcblx0XHRcdFx0bWluOiAtMS4yLFxyXG5cdFx0XHRcdG1heDogMS4yXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBsZWdlbmRzID0gJChcIiNrdF9kb2NzX2Zsb3RfdHJhY2tpbmcgLmxlZ2VuZExhYmVsXCIpO1xyXG5cdFx0bGVnZW5kcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBmaXggdGhlIHdpZHRocyBzbyB0aGV5IGRvbid0IGp1bXAgYXJvdW5kXHJcblx0XHRcdCQodGhpcykuY3NzKCd3aWR0aCcsICQodGhpcykud2lkdGgoKSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR2YXIgdXBkYXRlTGVnZW5kVGltZW91dCA9IG51bGw7XHJcblx0XHR2YXIgbGF0ZXN0UG9zaXRpb24gPSBudWxsO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHVwZGF0ZUxlZ2VuZCgpIHtcclxuXHRcdFx0dXBkYXRlTGVnZW5kVGltZW91dCA9IG51bGw7XHJcblxyXG5cdFx0XHR2YXIgcG9zID0gbGF0ZXN0UG9zaXRpb247XHJcblxyXG5cdFx0XHR2YXIgYXhlcyA9IHBsb3QuZ2V0QXhlcygpO1xyXG5cdFx0XHRpZiAocG9zLnggPCBheGVzLnhheGlzLm1pbiB8fCBwb3MueCA+IGF4ZXMueGF4aXMubWF4IHx8IHBvcy55IDwgYXhlcy55YXhpcy5taW4gfHwgcG9zLnkgPiBheGVzLnlheGlzLm1heCkgcmV0dXJuO1xyXG5cclxuXHRcdFx0dmFyIGksIGosIGRhdGFzZXQgPSBwbG90LmdldERhdGEoKTtcclxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGRhdGFzZXQubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0XHR2YXIgc2VyaWVzID0gZGF0YXNldFtpXTtcclxuXHJcblx0XHRcdFx0Ly8gZmluZCB0aGUgbmVhcmVzdCBwb2ludHMsIHgtd2lzZVxyXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBzZXJpZXMuZGF0YS5sZW5ndGg7ICsrailcclxuXHRcdFx0XHRcdGlmIChzZXJpZXMuZGF0YVtqXVswXSA+IHBvcy54KSBicmVhaztcclxuXHJcblx0XHRcdFx0Ly8gbm93IGludGVycG9sYXRlXHJcblx0XHRcdFx0dmFyIHksIHAxID0gc2VyaWVzLmRhdGFbaiAtIDFdLFxyXG5cdFx0XHRcdFx0cDIgPSBzZXJpZXMuZGF0YVtqXTtcclxuXHJcblx0XHRcdFx0aWYgKHAxID09IG51bGwpIHkgPSBwMlsxXTtcclxuXHRcdFx0XHRlbHNlIGlmIChwMiA9PSBudWxsKSB5ID0gcDFbMV07XHJcblx0XHRcdFx0ZWxzZSB5ID0gcDFbMV0gKyAocDJbMV0gLSBwMVsxXSkgKiAocG9zLnggLSBwMVswXSkgLyAocDJbMF0gLSBwMVswXSk7XHJcblxyXG5cdFx0XHRcdGxlZ2VuZHMuZXEoaSkudGV4dChzZXJpZXMubGFiZWwucmVwbGFjZSgvPS4qLywgXCI9IFwiICsgeS50b0ZpeGVkKDIpKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQkKFwiI2t0X2RvY3NfZmxvdF90cmFja2luZ1wiKS5iaW5kKFwicGxvdGhvdmVyXCIsIGZ1bmN0aW9uKGV2ZW50LCBwb3MsIGl0ZW0pIHtcclxuXHRcdFx0bGF0ZXN0UG9zaXRpb24gPSBwb3M7XHJcblx0XHRcdGlmICghdXBkYXRlTGVnZW5kVGltZW91dCkgdXBkYXRlTGVnZW5kVGltZW91dCA9IHNldFRpbWVvdXQodXBkYXRlTGVnZW5kLCA1MCk7XHJcblx0XHR9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIFB1YmxpYyBGdW5jdGlvbnNcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGV4YW1wbGVUcmFja2luZygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgS1RGbG90RGVtb1RyYWNraW5nLmluaXQoKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJLVEZsb3REZW1vVHJhY2tpbmciLCJleGFtcGxlVHJhY2tpbmciLCJzaW4iLCJjb3MiLCJpIiwicHVzaCIsIk1hdGgiLCJwbG90IiwiJCIsImRhdGEiLCJsYWJlbCIsImxpbmVzIiwibGluZVdpZHRoIiwic2hhZG93U2l6ZSIsImNvbG9ycyIsIktUVXRpbCIsImdldENzc1ZhcmlhYmxlVmFsdWUiLCJzZXJpZXMiLCJzaG93IiwiY3Jvc3NoYWlyIiwibW9kZSIsImdyaWQiLCJob3ZlcmFibGUiLCJhdXRvSGlnaGxpZ2h0IiwidGlja0NvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsInlheGlzIiwibWluIiwibWF4IiwibGVnZW5kcyIsImVhY2giLCJjc3MiLCJ3aWR0aCIsInVwZGF0ZUxlZ2VuZFRpbWVvdXQiLCJsYXRlc3RQb3NpdGlvbiIsInVwZGF0ZUxlZ2VuZCIsInBvcyIsImF4ZXMiLCJnZXRBeGVzIiwieCIsInhheGlzIiwieSIsImoiLCJkYXRhc2V0IiwiZ2V0RGF0YSIsImxlbmd0aCIsInAxIiwicDIiLCJlcSIsInRleHQiLCJyZXBsYWNlIiwidG9GaXhlZCIsImJpbmQiLCJldmVudCIsIml0ZW0iLCJzZXRUaW1lb3V0IiwiaW5pdCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/flotcharts/tracking.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/flotcharts/tracking.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/flotcharts/tracking.js"]();
/******/ 	
/******/ })()
;