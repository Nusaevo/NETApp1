/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/chartjs.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/chartjs.js ***!
  \*************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTGeneralChartJS = function () {\n  // Randomizer function\n  function getRandom() {\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n  function generateRandomData() {\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    var arr = [];\n    for (var i = 0; i < count; i++) {\n      arr.push(getRandom(min, max));\n    }\n    return arr;\n  }\n\n  // Private functions\n  var example1 = function example1() {\n    // Define chart element\n    var ctx = document.getElementById('kt_chartjs_1');\n\n    // Define colors\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\n    var successColor = KTUtil.getCssVariableValue('--bs-success');\n\n    // Define fonts\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // Chart data\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: generateRandomData(1, 100, 12),\n        backgroundColor: primaryColor,\n        stack: 'Stack 0'\n      }, {\n        label: 'Dataset 2',\n        data: generateRandomData(1, 100, 12),\n        backgroundColor: dangerColor,\n        stack: 'Stack 1'\n      }, {\n        label: 'Dataset 3',\n        data: generateRandomData(1, 100, 12),\n        backgroundColor: successColor,\n        stack: 'Stack 2'\n      }]\n    };\n\n    // Chart config\n    var config = {\n      type: 'bar',\n      data: data,\n      options: {\n        plugins: {\n          title: {\n            display: false\n          }\n        },\n        responsive: true,\n        interaction: {\n          intersect: false\n        },\n        scales: {\n          x: {\n            stacked: true\n          },\n          y: {\n            stacked: true\n          }\n        }\n      }\n    };\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    var myChart = new Chart(ctx, config);\n  };\n  var example2 = function example2() {\n    // Define chart element\n    var ctx = document.getElementById('kt_chartjs_2');\n\n    // Define colors\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\n    var successColor = KTUtil.getCssVariableValue('--bs-success');\n\n    // Define fonts\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n    // Chart data\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: generateRandomData(1, 50, 7),\n        borderColor: primaryColor,\n        backgroundColor: 'transparent'\n      }, {\n        label: 'Dataset 2',\n        data: generateRandomData(1, 50, 7),\n        borderColor: dangerColor,\n        backgroundColor: 'transparent'\n      }]\n    };\n\n    // Chart config\n    var config = {\n      type: 'line',\n      data: data,\n      options: {\n        plugins: {\n          title: {\n            display: false\n          }\n        },\n        responsive: true\n      }\n    };\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    var myChart = new Chart(ctx, config);\n  };\n  var example3 = function example3() {\n    // Define chart element\n    var ctx = document.getElementById('kt_chartjs_3');\n\n    // Define colors\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\n    var successColor = KTUtil.getCssVariableValue('--bs-success');\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\n    var infoColor = KTUtil.getCssVariableValue('--bs-info');\n\n    // Chart labels\n    var labels = ['January', 'February', 'March', 'April', 'May'];\n\n    // Chart data\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: generateRandomData(1, 100, 5),\n        backgroundColor: [primaryColor, dangerColor, successColor, warningColor, infoColor]\n      }]\n    };\n\n    // Chart config\n    var config = {\n      type: 'pie',\n      data: data,\n      options: {\n        plugins: {\n          title: {\n            display: false\n          }\n        },\n        responsive: true\n      }\n    };\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    var myChart = new Chart(ctx, config);\n  };\n  var example4 = function example4() {\n    // Define chart element\n    var ctx = document.getElementById('kt_chartjs_4');\n\n    // Define colors\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\n    var dangerLightColor = KTUtil.getCssVariableValue('--bs-light-danger');\n\n    // Define fonts\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // Chart data\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: generateRandomData(50, 100, 12),\n        borderColor: primaryColor,\n        backgroundColor: 'transparent',\n        stack: 'combined'\n      }, {\n        label: 'Dataset 2',\n        data: generateRandomData(1, 60, 12),\n        backgroundColor: dangerColor,\n        borderColor: dangerColor,\n        stack: 'combined',\n        type: 'bar'\n      }]\n    };\n\n    // Chart config\n    var config = {\n      type: 'line',\n      data: data,\n      options: {\n        plugins: {\n          title: {\n            display: false\n          }\n        },\n        responsive: true,\n        interaction: {\n          intersect: false\n        },\n        scales: {\n          y: {\n            stacked: true\n          }\n        }\n      },\n      defaults: {\n        font: {\n          family: 'inherit'\n        }\n      }\n    };\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    var myChart = new Chart(ctx, config);\n  };\n  var example5 = function example5() {\n    // Define chart element\n    var ctx = document.getElementById('kt_chartjs_5');\n\n    // Define colors\n    var infoColor = KTUtil.getCssVariableValue('--bs-info');\n    var infoLightColor = KTUtil.getCssVariableValue('--bs-light-info');\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\n    var warningLightColor = KTUtil.getCssVariableValue('--bs-light-warning');\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\n    var primaryLightColor = KTUtil.getCssVariableValue('--bs-light-primary');\n\n    // Define fonts\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June'];\n\n    // Chart data\n    var data = {\n      labels: labels,\n      datasets: [{\n        label: 'Dataset 1',\n        data: generateRandomData(20, 80, 6),\n        borderColor: infoColor,\n        backgroundColor: infoLightColor\n      }, {\n        label: 'Dataset 2',\n        data: generateRandomData(10, 60, 6),\n        backgroundColor: warningLightColor,\n        borderColor: warningColor\n      }, {\n        label: 'Dataset 3',\n        data: generateRandomData(0, 80, 6),\n        backgroundColor: primaryLightColor,\n        borderColor: primaryColor\n      }]\n    };\n\n    // Chart config\n    var config = {\n      type: 'radar',\n      data: data,\n      options: {\n        plugins: {\n          title: {\n            display: false\n          }\n        },\n        responsive: true\n      }\n    };\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    var myChart = new Chart(ctx, config);\n  };\n  return {\n    // Public Functions\n    init: function init() {\n      // Global font settings: https://www.chartjs.org/docs/latest/general/fonts.html\n      Chart.defaults.font.size = 13;\n      Chart.defaults.font.family = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n      example1();\n      example2();\n      example3();\n      example4();\n      example5();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralChartJS.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/chartjs.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/chartjs.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/chartjs.js ***!
  \**************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/documentation/charts/chartjs.js\": (\n    /*!*************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/documentation/charts/chartjs.js ***!\n      \\*************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsChartjsJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralChartJS = function () {\\n  // Randomizer function\\n  function getRandom() {\\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\\n    return Math.floor(Math.random() * (max - min) + min);\\n  }\\n\\n  function generateRandomData() {\\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\\n    var arr = [];\\n\\n    for (var i = 0; i < count; i++) {\\n      arr.push(getRandom(min, max));\\n    }\\n\\n    return arr;\\n  } // Private functions\\n\\n\\n  var example1 = function example1() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_1'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: primaryColor,\\n        stack: 'Stack 0'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: dangerColor,\\n        stack: 'Stack 1'\\n      }, {\\n        label: 'Dataset 3',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: successColor,\\n        stack: 'Stack 2'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'bar',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true,\\n        interaction: {\\n          intersect: false\\n        },\\n        scales: {\\n          x: {\\n            stacked: true\\n          },\\n          y: {\\n            stacked: true\\n          }\\n        }\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example2 = function example2() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_2'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 50, 7),\\n        borderColor: primaryColor,\\n        backgroundColor: 'transparent'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 50, 7),\\n        borderColor: dangerColor,\\n        backgroundColor: 'transparent'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'line',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example3 = function example3() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_3'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success');\\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var infoColor = KTUtil.getCssVariableValue('--bs-info'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 100, 5),\\n        backgroundColor: [primaryColor, dangerColor, successColor, warningColor, infoColor]\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'pie',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example4 = function example4() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_4'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var dangerLightColor = KTUtil.getCssVariableValue('--bs-light-danger'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(50, 100, 12),\\n        borderColor: primaryColor,\\n        backgroundColor: 'transparent',\\n        stack: 'combined'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 60, 12),\\n        backgroundColor: dangerColor,\\n        borderColor: dangerColor,\\n        stack: 'combined',\\n        type: 'bar'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'line',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true,\\n        interaction: {\\n          intersect: false\\n        },\\n        scales: {\\n          y: {\\n            stacked: true\\n          }\\n        }\\n      },\\n      defaults: {\\n        font: {\\n          family: 'inherit'\\n        }\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example5 = function example5() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_5'); // Define colors\\n\\n    var infoColor = KTUtil.getCssVariableValue('--bs-info');\\n    var infoLightColor = KTUtil.getCssVariableValue('--bs-light-info');\\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var warningLightColor = KTUtil.getCssVariableValue('--bs-light-warning');\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var primaryLightColor = KTUtil.getCssVariableValue('--bs-light-primary'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(20, 80, 6),\\n        borderColor: infoColor,\\n        backgroundColor: infoLightColor\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(10, 60, 6),\\n        backgroundColor: warningLightColor,\\n        borderColor: warningColor\\n      }, {\\n        label: 'Dataset 3',\\n        data: generateRandomData(0, 80, 6),\\n        backgroundColor: primaryLightColor,\\n        borderColor: primaryColor\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'radar',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Global font settings: https://www.chartjs.org/docs/latest/general/fonts.html\\n      Chart.defaults.font.size = 13;\\n      Chart.defaults.font.family = KTUtil.getCssVariableValue('--bs-font-sans-serif');\\n      example1();\\n      example2();\\n      example3();\\n      example4();\\n      example5();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralChartJS.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/chartjs.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/chartjs.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/chartjs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/chartjs.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/chartjs.js"]();
/******/ 	
/******/ })()
;