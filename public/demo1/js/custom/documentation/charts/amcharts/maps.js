/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js ***!
  \*******************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTGeneralAmChartsMaps = function () {\n  // Shared variables\n  var chart;\n  var bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');\n  var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-bg');\n\n  // Private functions\n  var demo1 = function demo1() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_1\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create the map chart\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\n      var chart = root.container.children.push(am5map.MapChart[\"new\"](root, {\n        panX: \"translateX\",\n        panY: \"translateY\",\n        projection: am5map.geoMercator()\n      }));\n\n      // Create main polygon series for countries\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_worldLow,\n        exclude: [\"AQ\"]\n      }));\n      polygonSeries.mapPolygons.template.setAll({\n        tooltipText: \"{name}\",\n        toggleKey: \"active\",\n        interactive: true\n      });\n      polygonSeries.mapPolygons.template.states.create(\"hover\", {\n        fill: root.interfaceColors.get(\"primaryButtonHover\")\n      });\n      polygonSeries.mapPolygons.template.states.create(\"active\", {\n        fill: root.interfaceColors.get(\"primaryButtonHover\")\n      });\n\n      // US Series\n      // Create main polygon series for countries\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var polygonSeriesUS = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_usaLow\n      }));\n      polygonSeriesUS.mapPolygons.template.setAll({\n        tooltipText: \"{name}\",\n        toggleKey: \"active\",\n        interactive: true\n      });\n      var colors = am5.ColorSet[\"new\"](root, {});\n      polygonSeriesUS.mapPolygons.template.set(\"fill\", colors.getIndex(3));\n      polygonSeriesUS.mapPolygons.template.states.create(\"hover\", {\n        fill: root.interfaceColors.get(\"primaryButtonHover\")\n      });\n      polygonSeriesUS.mapPolygons.template.states.create(\"active\", {\n        fill: root.interfaceColors.get(\"primaryButtonHover\")\n      });\n\n      // Add zoom control\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\n      chart.set(\"zoomControl\", am5map.ZoomControl[\"new\"](root, {}));\n\n      // Set clicking on \"water\" to zoom out\n      chart.chartContainer.get(\"background\").events.on(\"click\", function () {\n        chart.goHome();\n      });\n\n      // Make stuff animate on load\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  var demo2 = function demo2() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_2\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create the map chart\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\n      var chart = root.container.children.push(am5map.MapChart[\"new\"](root, {\n        panX: \"rotateX\",\n        panY: \"translateY\",\n        projection: am5map.geoMercator(),\n        homeGeoPoint: {\n          latitude: 2,\n          longitude: 2\n        }\n      }));\n      var cont = chart.children.push(am5.Container[\"new\"](root, {\n        layout: root.horizontalLayout,\n        x: 20,\n        y: 40\n      }));\n\n      // Add labels and controls\n      cont.children.push(am5.Label[\"new\"](root, {\n        centerY: am5.p50,\n        text: \"Map\",\n        fill: bodyColor\n      }));\n      var switchButton = cont.children.push(am5.Button[\"new\"](root, {\n        themeTags: [\"switch\"],\n        centerY: am5.p50,\n        icon: am5.Circle[\"new\"](root, {\n          themeTags: [\"icon\"]\n        })\n      }));\n      switchButton.on(\"active\", function () {\n        if (!switchButton.get(\"active\")) {\n          chart.set(\"projection\", am5map.geoMercator());\n          chart.set(\"panY\", \"translateY\");\n          chart.set(\"rotationY\", 0);\n          backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0);\n        } else {\n          chart.set(\"projection\", am5map.geoOrthographic());\n          chart.set(\"panY\", \"rotateY\");\n          backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0.1);\n        }\n      });\n      cont.children.push(am5.Label[\"new\"](root, {\n        centerY: am5.p50,\n        text: \"Globe\",\n        fill: bodyColor\n      }));\n\n      // Create series for background fill\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n      var backgroundSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {}));\n      backgroundSeries.mapPolygons.template.setAll({\n        fill: root.interfaceColors.get(\"alternativeBackground\"),\n        fillOpacity: 0,\n        strokeOpacity: 0\n      });\n\n      // Add background polygon\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n      backgroundSeries.data.push({\n        geometry: am5map.getGeoRectangle(90, 180, -90, -180)\n      });\n\n      // Create main polygon series for countries\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_worldLow\n      }));\n\n      // Create line series for trajectory lines\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/\n      var lineSeries = chart.series.push(am5map.MapLineSeries[\"new\"](root, {}));\n      lineSeries.mapLines.template.setAll({\n        stroke: bodyColor,\n        strokeOpacity: 0.3\n      });\n\n      // Create point series for markers\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/\n      var pointSeries = chart.series.push(am5map.MapPointSeries[\"new\"](root, {}));\n      pointSeries.bullets.push(function () {\n        var circle = am5.Circle[\"new\"](root, {\n          radius: 7,\n          tooltipText: \"Drag me!\",\n          cursorOverStyle: \"pointer\",\n          tooltipY: 0,\n          fill: am5.color(0xffba00),\n          stroke: bgColor,\n          strokeWidth: 2,\n          draggable: true\n        });\n        circle.events.on(\"dragged\", function (event) {\n          var dataItem = event.target.dataItem;\n          var projection = chart.get(\"projection\");\n          var geoPoint = chart.invert({\n            x: circle.x(),\n            y: circle.y()\n          });\n          dataItem.setAll({\n            longitude: geoPoint.longitude,\n            latitude: geoPoint.latitude\n          });\n        });\n        return am5.Bullet[\"new\"](root, {\n          sprite: circle\n        });\n      });\n      var paris = addCity({\n        latitude: 48.8567,\n        longitude: 2.351\n      }, \"Paris\");\n      var toronto = addCity({\n        latitude: 43.8163,\n        longitude: -79.4287\n      }, \"Toronto\");\n      var la = addCity({\n        latitude: 34.3,\n        longitude: -118.15\n      }, \"Los Angeles\");\n      var havana = addCity({\n        latitude: 23,\n        longitude: -82\n      }, \"Havana\");\n      var lineDataItem = lineSeries.pushDataItem({\n        pointsToConnect: [paris, toronto, la, havana]\n      });\n      var planeSeries = chart.series.push(am5map.MapPointSeries[\"new\"](root, {}));\n      var plane = am5.Graphics[\"new\"](root, {\n        svgPath: \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\n        scale: 0.06,\n        centerY: am5.p50,\n        centerX: am5.p50,\n        fill: bgColor\n      });\n      planeSeries.bullets.push(function () {\n        var container = am5.Container[\"new\"](root, {});\n        container.children.push(plane);\n        return am5.Bullet[\"new\"](root, {\n          sprite: container\n        });\n      });\n      var planeDataItem = planeSeries.pushDataItem({\n        lineDataItem: lineDataItem,\n        positionOnLine: 0,\n        autoRotate: true\n      });\n      planeDataItem.animate({\n        key: \"positionOnLine\",\n        to: 1,\n        duration: 10000,\n        loops: Infinity,\n        easing: am5.ease.yoyo(am5.ease.linear)\n      });\n      planeDataItem.on(\"positionOnLine\", function (value) {\n        if (value >= 0.99) {\n          plane.set(\"rotation\", 180);\n        } else if (value <= 0.01) {\n          plane.set(\"rotation\", 0);\n        }\n      });\n      function addCity(coords, title) {\n        return pointSeries.pushDataItem({\n          latitude: coords.latitude,\n          longitude: coords.longitude\n        });\n      }\n\n      // Make stuff animate on load\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  var demo3 = function demo3() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_3\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create the map chart\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\n      var chart = root.container.children.push(am5map.MapChart[\"new\"](root, {\n        panX: \"rotateX\",\n        panY: \"rotateY\",\n        projection: am5map.geoOrthographic(),\n        paddingBottom: 20,\n        paddingTop: 20,\n        paddingLeft: 20,\n        paddingRight: 20\n      }));\n\n      // Create main polygon series for countries\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_worldLow\n      }));\n      polygonSeries.mapPolygons.template.setAll({\n        tooltipText: \"{name}\",\n        toggleKey: \"active\",\n        interactive: true\n      });\n      polygonSeries.mapPolygons.template.states.create(\"hover\", {\n        fill: root.interfaceColors.get(\"primaryButtonHover\")\n      });\n\n      // Create series for background fill\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n      var backgroundSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {}));\n      backgroundSeries.mapPolygons.template.setAll({\n        fill: root.interfaceColors.get(\"alternativeBackground\"),\n        fillOpacity: 0.1,\n        strokeOpacity: 0\n      });\n      backgroundSeries.data.push({\n        geometry: am5map.getGeoRectangle(90, 180, -90, -180)\n      });\n\n      // Create graticule series\n      // https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/\n      var graticuleSeries = chart.series.push(am5map.GraticuleSeries[\"new\"](root, {}));\n      graticuleSeries.mapLines.template.setAll({\n        strokeOpacity: 0.1,\n        stroke: root.interfaceColors.get(\"alternativeBackground\")\n      });\n\n      // Rotate animation\n      chart.animate({\n        key: \"rotationX\",\n        from: 0,\n        to: 360,\n        duration: 30000,\n        loops: Infinity\n      });\n\n      // Make stuff animate on load\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  var demo4 = function demo4() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_4\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create the map chart\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\n      var chart = root.container.children.push(am5map.MapChart[\"new\"](root, {\n        panX: \"translateX\",\n        panY: \"translateY\",\n        projection: am5map.geoMercator()\n      }));\n      var colorSet = am5.ColorSet[\"new\"](root, {});\n\n      // Create main polygon series for time zone areas\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var areaSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_worldTimeZoneAreasLow\n      }));\n      var areaPolygonTemplate = areaSeries.mapPolygons.template;\n      areaPolygonTemplate.setAll({\n        fillOpacity: 0.6\n      });\n      areaPolygonTemplate.adapters.add(\"fill\", function (fill, target) {\n        return am5.Color.saturate(colorSet.getIndex(areaSeries.mapPolygons.indexOf(target)), 0.5);\n      });\n      areaPolygonTemplate.states.create(\"hover\", {\n        fillOpacity: 0.8\n      });\n\n      // Create main polygon series for time zones\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n      var zoneSeries = chart.series.push(am5map.MapPolygonSeries[\"new\"](root, {\n        geoJSON: am5geodata_worldTimeZonesLow\n      }));\n      zoneSeries.mapPolygons.template.setAll({\n        fill: am5.color(0x000000),\n        fillOpacity: 0.08\n      });\n      var zonePolygonTemplate = zoneSeries.mapPolygons.template;\n      zonePolygonTemplate.setAll({\n        interactive: true,\n        tooltipText: \"{id}\"\n      });\n      zonePolygonTemplate.states.create(\"hover\", {\n        fillOpacity: 0.3\n      });\n\n      // labels\n      var labelSeries = chart.series.push(am5map.MapPointSeries[\"new\"](root, {}));\n      labelSeries.bullets.push(function () {\n        return am5.Bullet[\"new\"](root, {\n          sprite: am5.Label[\"new\"](root, {\n            text: \"{id}\",\n            populateText: true,\n            centerX: am5.p50,\n            centerY: am5.p50,\n            fontSize: \"0.7em\",\n            fill: bodyColor\n          })\n        });\n      });\n\n      // create labels for each zone\n      zoneSeries.events.on(\"datavalidated\", function () {\n        am5.array.each(zoneSeries.dataItems, function (dataItem) {\n          var centroid = dataItem.get(\"mapPolygon\").visualCentroid();\n          labelSeries.pushDataItem({\n            id: dataItem.get(\"id\"),\n            geometry: {\n              type: \"Point\",\n              coordinates: [centroid.longitude, centroid.latitude]\n            }\n          });\n        });\n      });\n\n      // Add zoom control\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\n      chart.set(\"zoomControl\", am5map.ZoomControl[\"new\"](root, {}));\n\n      // Add labels and controls\n      var cont = chart.children.push(am5.Container[\"new\"](root, {\n        layout: root.horizontalLayout,\n        x: 20,\n        y: 40\n      }));\n      cont.children.push(am5.Label[\"new\"](root, {\n        centerY: am5.p50,\n        text: \"Map\",\n        fill: bodyColor\n      }));\n      var switchButton = cont.children.push(am5.Button[\"new\"](root, {\n        themeTags: [\"switch\"],\n        centerY: am5.p50,\n        icon: am5.Circle[\"new\"](root, {\n          themeTags: [\"icon\"]\n        })\n      }));\n      switchButton.on(\"active\", function () {\n        if (!switchButton.get(\"active\")) {\n          chart.set(\"projection\", am5map.geoMercator());\n          chart.set(\"panX\", \"translateX\");\n          chart.set(\"panY\", \"translateY\");\n        } else {\n          chart.set(\"projection\", am5map.geoOrthographic());\n          chart.set(\"panX\", \"rotateX\");\n          chart.set(\"panY\", \"rotateY\");\n        }\n      });\n      cont.children.push(am5.Label[\"new\"](root, {\n        centerY: am5.p50,\n        text: \"Globe\",\n        fill: bodyColor\n      }));\n      // Make stuff animate on load\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  return {\n    // Public Functions\n    init: function init() {\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralAmChartsMaps.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/amcharts/maps.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/amcharts/maps.js ***!
  \********************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js\": (\n    /*!*******************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js ***!\n      \\*******************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsAmchartsMapsJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralAmChartsMaps = function () {\\n  // Shared variables\\n  var chart;\\n  var bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');\\n  var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-bg'); // Private functions\\n\\n  var demo1 = function demo1() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_1\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create the map chart\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\\n\\n      var chart = root.container.children.push(am5map.MapChart[\\\"new\\\"](root, {\\n        panX: \\\"translateX\\\",\\n        panY: \\\"translateY\\\",\\n        projection: am5map.geoMercator()\\n      })); // Create main polygon series for countries\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_worldLow,\\n        exclude: [\\\"AQ\\\"]\\n      }));\\n      polygonSeries.mapPolygons.template.setAll({\\n        tooltipText: \\\"{name}\\\",\\n        toggleKey: \\\"active\\\",\\n        interactive: true\\n      });\\n      polygonSeries.mapPolygons.template.states.create(\\\"hover\\\", {\\n        fill: root.interfaceColors.get(\\\"primaryButtonHover\\\")\\n      });\\n      polygonSeries.mapPolygons.template.states.create(\\\"active\\\", {\\n        fill: root.interfaceColors.get(\\\"primaryButtonHover\\\")\\n      }); // US Series\\n      // Create main polygon series for countries\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var polygonSeriesUS = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_usaLow\\n      }));\\n      polygonSeriesUS.mapPolygons.template.setAll({\\n        tooltipText: \\\"{name}\\\",\\n        toggleKey: \\\"active\\\",\\n        interactive: true\\n      });\\n      var colors = am5.ColorSet[\\\"new\\\"](root, {});\\n      polygonSeriesUS.mapPolygons.template.set(\\\"fill\\\", colors.getIndex(3));\\n      polygonSeriesUS.mapPolygons.template.states.create(\\\"hover\\\", {\\n        fill: root.interfaceColors.get(\\\"primaryButtonHover\\\")\\n      });\\n      polygonSeriesUS.mapPolygons.template.states.create(\\\"active\\\", {\\n        fill: root.interfaceColors.get(\\\"primaryButtonHover\\\")\\n      }); // Add zoom control\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\\n\\n      chart.set(\\\"zoomControl\\\", am5map.ZoomControl[\\\"new\\\"](root, {})); // Set clicking on \\\"water\\\" to zoom out\\n\\n      chart.chartContainer.get(\\\"background\\\").events.on(\\\"click\\\", function () {\\n        chart.goHome();\\n      }); // Make stuff animate on load\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  var demo2 = function demo2() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_2\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create the map chart\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\\n\\n      var chart = root.container.children.push(am5map.MapChart[\\\"new\\\"](root, {\\n        panX: \\\"rotateX\\\",\\n        panY: \\\"translateY\\\",\\n        projection: am5map.geoMercator(),\\n        homeGeoPoint: {\\n          latitude: 2,\\n          longitude: 2\\n        }\\n      }));\\n      var cont = chart.children.push(am5.Container[\\\"new\\\"](root, {\\n        layout: root.horizontalLayout,\\n        x: 20,\\n        y: 40\\n      })); // Add labels and controls\\n\\n      cont.children.push(am5.Label[\\\"new\\\"](root, {\\n        centerY: am5.p50,\\n        text: \\\"Map\\\",\\n        fill: bodyColor\\n      }));\\n      var switchButton = cont.children.push(am5.Button[\\\"new\\\"](root, {\\n        themeTags: [\\\"switch\\\"],\\n        centerY: am5.p50,\\n        icon: am5.Circle[\\\"new\\\"](root, {\\n          themeTags: [\\\"icon\\\"]\\n        })\\n      }));\\n      switchButton.on(\\\"active\\\", function () {\\n        if (!switchButton.get(\\\"active\\\")) {\\n          chart.set(\\\"projection\\\", am5map.geoMercator());\\n          chart.set(\\\"panY\\\", \\\"translateY\\\");\\n          chart.set(\\\"rotationY\\\", 0);\\n          backgroundSeries.mapPolygons.template.set(\\\"fillOpacity\\\", 0);\\n        } else {\\n          chart.set(\\\"projection\\\", am5map.geoOrthographic());\\n          chart.set(\\\"panY\\\", \\\"rotateY\\\");\\n          backgroundSeries.mapPolygons.template.set(\\\"fillOpacity\\\", 0.1);\\n        }\\n      });\\n      cont.children.push(am5.Label[\\\"new\\\"](root, {\\n        centerY: am5.p50,\\n        text: \\\"Globe\\\",\\n        fill: bodyColor\\n      })); // Create series for background fill\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\\n\\n      var backgroundSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {}));\\n      backgroundSeries.mapPolygons.template.setAll({\\n        fill: root.interfaceColors.get(\\\"alternativeBackground\\\"),\\n        fillOpacity: 0,\\n        strokeOpacity: 0\\n      }); // Add background polygon\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\\n\\n      backgroundSeries.data.push({\\n        geometry: am5map.getGeoRectangle(90, 180, -90, -180)\\n      }); // Create main polygon series for countries\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_worldLow\\n      })); // Create line series for trajectory lines\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/\\n\\n      var lineSeries = chart.series.push(am5map.MapLineSeries[\\\"new\\\"](root, {}));\\n      lineSeries.mapLines.template.setAll({\\n        stroke: bodyColor,\\n        strokeOpacity: 0.3\\n      }); // Create point series for markers\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/\\n\\n      var pointSeries = chart.series.push(am5map.MapPointSeries[\\\"new\\\"](root, {}));\\n      pointSeries.bullets.push(function () {\\n        var circle = am5.Circle[\\\"new\\\"](root, {\\n          radius: 7,\\n          tooltipText: \\\"Drag me!\\\",\\n          cursorOverStyle: \\\"pointer\\\",\\n          tooltipY: 0,\\n          fill: am5.color(0xffba00),\\n          stroke: bgColor,\\n          strokeWidth: 2,\\n          draggable: true\\n        });\\n        circle.events.on(\\\"dragged\\\", function (event) {\\n          var dataItem = event.target.dataItem;\\n          var projection = chart.get(\\\"projection\\\");\\n          var geoPoint = chart.invert({\\n            x: circle.x(),\\n            y: circle.y()\\n          });\\n          dataItem.setAll({\\n            longitude: geoPoint.longitude,\\n            latitude: geoPoint.latitude\\n          });\\n        });\\n        return am5.Bullet[\\\"new\\\"](root, {\\n          sprite: circle\\n        });\\n      });\\n      var paris = addCity({\\n        latitude: 48.8567,\\n        longitude: 2.351\\n      }, \\\"Paris\\\");\\n      var toronto = addCity({\\n        latitude: 43.8163,\\n        longitude: -79.4287\\n      }, \\\"Toronto\\\");\\n      var la = addCity({\\n        latitude: 34.3,\\n        longitude: -118.15\\n      }, \\\"Los Angeles\\\");\\n      var havana = addCity({\\n        latitude: 23,\\n        longitude: -82\\n      }, \\\"Havana\\\");\\n      var lineDataItem = lineSeries.pushDataItem({\\n        pointsToConnect: [paris, toronto, la, havana]\\n      });\\n      var planeSeries = chart.series.push(am5map.MapPointSeries[\\\"new\\\"](root, {}));\\n      var plane = am5.Graphics[\\\"new\\\"](root, {\\n        svgPath: \\\"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\\\",\\n        scale: 0.06,\\n        centerY: am5.p50,\\n        centerX: am5.p50,\\n        fill: bgColor\\n      });\\n      planeSeries.bullets.push(function () {\\n        var container = am5.Container[\\\"new\\\"](root, {});\\n        container.children.push(plane);\\n        return am5.Bullet[\\\"new\\\"](root, {\\n          sprite: container\\n        });\\n      });\\n      var planeDataItem = planeSeries.pushDataItem({\\n        lineDataItem: lineDataItem,\\n        positionOnLine: 0,\\n        autoRotate: true\\n      });\\n      planeDataItem.animate({\\n        key: \\\"positionOnLine\\\",\\n        to: 1,\\n        duration: 10000,\\n        loops: Infinity,\\n        easing: am5.ease.yoyo(am5.ease.linear)\\n      });\\n      planeDataItem.on(\\\"positionOnLine\\\", function (value) {\\n        if (value >= 0.99) {\\n          plane.set(\\\"rotation\\\", 180);\\n        } else if (value <= 0.01) {\\n          plane.set(\\\"rotation\\\", 0);\\n        }\\n      });\\n\\n      function addCity(coords, title) {\\n        return pointSeries.pushDataItem({\\n          latitude: coords.latitude,\\n          longitude: coords.longitude\\n        });\\n      } // Make stuff animate on load\\n\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  var demo3 = function demo3() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_3\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create the map chart\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\\n\\n      var chart = root.container.children.push(am5map.MapChart[\\\"new\\\"](root, {\\n        panX: \\\"rotateX\\\",\\n        panY: \\\"rotateY\\\",\\n        projection: am5map.geoOrthographic(),\\n        paddingBottom: 20,\\n        paddingTop: 20,\\n        paddingLeft: 20,\\n        paddingRight: 20\\n      })); // Create main polygon series for countries\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var polygonSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_worldLow\\n      }));\\n      polygonSeries.mapPolygons.template.setAll({\\n        tooltipText: \\\"{name}\\\",\\n        toggleKey: \\\"active\\\",\\n        interactive: true\\n      });\\n      polygonSeries.mapPolygons.template.states.create(\\\"hover\\\", {\\n        fill: root.interfaceColors.get(\\\"primaryButtonHover\\\")\\n      }); // Create series for background fill\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\\n\\n      var backgroundSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {}));\\n      backgroundSeries.mapPolygons.template.setAll({\\n        fill: root.interfaceColors.get(\\\"alternativeBackground\\\"),\\n        fillOpacity: 0.1,\\n        strokeOpacity: 0\\n      });\\n      backgroundSeries.data.push({\\n        geometry: am5map.getGeoRectangle(90, 180, -90, -180)\\n      }); // Create graticule series\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/\\n\\n      var graticuleSeries = chart.series.push(am5map.GraticuleSeries[\\\"new\\\"](root, {}));\\n      graticuleSeries.mapLines.template.setAll({\\n        strokeOpacity: 0.1,\\n        stroke: root.interfaceColors.get(\\\"alternativeBackground\\\")\\n      }); // Rotate animation\\n\\n      chart.animate({\\n        key: \\\"rotationX\\\",\\n        from: 0,\\n        to: 360,\\n        duration: 30000,\\n        loops: Infinity\\n      }); // Make stuff animate on load\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  var demo4 = function demo4() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_4\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create the map chart\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/\\n\\n      var chart = root.container.children.push(am5map.MapChart[\\\"new\\\"](root, {\\n        panX: \\\"translateX\\\",\\n        panY: \\\"translateY\\\",\\n        projection: am5map.geoMercator()\\n      }));\\n      var colorSet = am5.ColorSet[\\\"new\\\"](root, {}); // Create main polygon series for time zone areas\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var areaSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_worldTimeZoneAreasLow\\n      }));\\n      var areaPolygonTemplate = areaSeries.mapPolygons.template;\\n      areaPolygonTemplate.setAll({\\n        fillOpacity: 0.6\\n      });\\n      areaPolygonTemplate.adapters.add(\\\"fill\\\", function (fill, target) {\\n        return am5.Color.saturate(colorSet.getIndex(areaSeries.mapPolygons.indexOf(target)), 0.5);\\n      });\\n      areaPolygonTemplate.states.create(\\\"hover\\\", {\\n        fillOpacity: 0.8\\n      }); // Create main polygon series for time zones\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\\n\\n      var zoneSeries = chart.series.push(am5map.MapPolygonSeries[\\\"new\\\"](root, {\\n        geoJSON: am5geodata_worldTimeZonesLow\\n      }));\\n      zoneSeries.mapPolygons.template.setAll({\\n        fill: am5.color(0x000000),\\n        fillOpacity: 0.08\\n      });\\n      var zonePolygonTemplate = zoneSeries.mapPolygons.template;\\n      zonePolygonTemplate.setAll({\\n        interactive: true,\\n        tooltipText: \\\"{id}\\\"\\n      });\\n      zonePolygonTemplate.states.create(\\\"hover\\\", {\\n        fillOpacity: 0.3\\n      }); // labels\\n\\n      var labelSeries = chart.series.push(am5map.MapPointSeries[\\\"new\\\"](root, {}));\\n      labelSeries.bullets.push(function () {\\n        return am5.Bullet[\\\"new\\\"](root, {\\n          sprite: am5.Label[\\\"new\\\"](root, {\\n            text: \\\"{id}\\\",\\n            populateText: true,\\n            centerX: am5.p50,\\n            centerY: am5.p50,\\n            fontSize: \\\"0.7em\\\",\\n            fill: bodyColor\\n          })\\n        });\\n      }); // create labels for each zone\\n\\n      zoneSeries.events.on(\\\"datavalidated\\\", function () {\\n        am5.array.each(zoneSeries.dataItems, function (dataItem) {\\n          var centroid = dataItem.get(\\\"mapPolygon\\\").visualCentroid();\\n          labelSeries.pushDataItem({\\n            id: dataItem.get(\\\"id\\\"),\\n            geometry: {\\n              type: \\\"Point\\\",\\n              coordinates: [centroid.longitude, centroid.latitude]\\n            }\\n          });\\n        });\\n      }); // Add zoom control\\n      // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\\n\\n      chart.set(\\\"zoomControl\\\", am5map.ZoomControl[\\\"new\\\"](root, {})); // Add labels and controls\\n\\n      var cont = chart.children.push(am5.Container[\\\"new\\\"](root, {\\n        layout: root.horizontalLayout,\\n        x: 20,\\n        y: 40\\n      }));\\n      cont.children.push(am5.Label[\\\"new\\\"](root, {\\n        centerY: am5.p50,\\n        text: \\\"Map\\\",\\n        fill: bodyColor\\n      }));\\n      var switchButton = cont.children.push(am5.Button[\\\"new\\\"](root, {\\n        themeTags: [\\\"switch\\\"],\\n        centerY: am5.p50,\\n        icon: am5.Circle[\\\"new\\\"](root, {\\n          themeTags: [\\\"icon\\\"]\\n        })\\n      }));\\n      switchButton.on(\\\"active\\\", function () {\\n        if (!switchButton.get(\\\"active\\\")) {\\n          chart.set(\\\"projection\\\", am5map.geoMercator());\\n          chart.set(\\\"panX\\\", \\\"translateX\\\");\\n          chart.set(\\\"panY\\\", \\\"translateY\\\");\\n        } else {\\n          chart.set(\\\"projection\\\", am5map.geoOrthographic());\\n          chart.set(\\\"panX\\\", \\\"rotateX\\\");\\n          chart.set(\\\"panY\\\", \\\"rotateY\\\");\\n        }\\n      });\\n      cont.children.push(am5.Label[\\\"new\\\"](root, {\\n        centerY: am5.p50,\\n        text: \\\"Globe\\\",\\n        fill: bodyColor\\n      })); // Make stuff animate on load\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      demo1();\\n      demo2();\\n      demo3();\\n      demo4();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralAmChartsMaps.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/amcharts/maps.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/amcharts/maps.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/amcharts/maps.js"]();
/******/ 	
/******/ })()
;