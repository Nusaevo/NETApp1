/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js ***!
  \***************************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTGeneralAmChartsStock = function () {\n  // Shared variables\n  var chart;\n  var bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');\n  var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-bg');\n\n  // Private functions\n  var _demo1 = function _demo1() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_1\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n      // when axes are in opposite side, they should be added in reverse order\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(30),\n        layer: 5\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n      volumeAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Volume\",\n        fontWeight: \"bold\",\n        paddingTop: 5,\n        paddingBottom: 5\n      }));\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true,\n        pan: \"zoom\"\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        height: am5.percent(70),\n        maxDeviation: 1\n      }));\n      valueAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Value\",\n        fontWeight: \"bold\",\n        paddingBottom: 5,\n        paddingTop: 5\n      }));\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {\n        pan: \"zoom\"\n      });\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        maxDeviation: 0.5,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {}));\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"XTD\",\n        valueYField: \"price1\",\n        calculateAggregates: true,\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n      var valueTooltip = valueSeries1.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"XTD\",\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"quantity\",\n        valueXField: \"date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        strokeWidth: 0.2,\n        strokeOpacity: 1,\n        stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      valueLegend.data.setAll([valueSeries1]);\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      volumeLegend.data.setAll([volumeSeries]);\n\n      // Stack axes vertically\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\n      chart.rightAxesContainer.set(\"layout\", root.verticalLayout);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"price1\",\n        valueXField: \"date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Generate random data and set on series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      var data = [];\n      var price1 = 1000;\n      var quantity = 10000;\n      for (var i = 1; i < 5000; i++) {\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        if (price1 < 100) {\n          price1 = 100;\n        }\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\n        if (quantity < 0) {\n          quantity *= -1;\n        }\n        data.push({\n          date: new Date(2010, 0, i).getTime(),\n          price1: price1,\n          quantity: quantity\n        });\n      }\n      valueSeries1.data.setAll(data);\n      volumeSeries.data.setAll(data);\n      sbSeries.data.setAll(data);\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  var _demo2 = function _demo2() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_2\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n\n      // Y axis #1\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true,\n        pan: \"zoom\"\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        maxDeviation: 1,\n        extraMin: 0.2 // gives some extra space\n      }));\n\n      // Y axis #2\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        opposite: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        forceHidden: true,\n        fill: bodyColor\n      });\n      volumeAxisRenderer.grid.template.setAll({\n        forceHidden: true\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(25),\n        layer: 5,\n        centerY: am5.p100,\n        y: am5.p100\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n\n      // X axis\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {});\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        themeTags: [\"axis\"]\n      }));\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"XTD\",\n        valueYField: \"price1\",\n        calculateAggregates: true,\n        valueYShow: \"valueYChangeSelectionPercent\",\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n      var valueSeries2 = chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        name: \"BTD\",\n        valueYField: \"price2\",\n        calculateAggregates: true,\n        valueYShow: \"valueYChangeSelectionPercent\",\n        valueXField: \"date\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        legendValueText: \"{valueY}\"\n      }));\n\n      // Add series tooltips\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Tooltips\n      var valueTooltip = valueSeries1.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var valueTooltip2 = valueSeries2.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip2.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"XTD\",\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"quantity\",\n        valueXField: \"date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        width: am5.percent(40),\n        strokeWidth: 0.2,\n        strokeOpacity: 1,\n        stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var legend = chart.plotContainer.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      legend.labels.template.setAll({\n        fill: bodyColor\n      });\n      legend.valueLabels.template.setAll({\n        fill: bodyColor\n      });\n      legend.data.setAll([valueSeries1, valueSeries2]);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"price1\",\n        valueXField: \"date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Generate random data and set on series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      var data = [];\n      var price1 = 1000;\n      var price2 = 2000;\n      var quantity = 10000;\n      for (var i = 1; i < 5000; i++) {\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        price2 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\n        if (price1 < 100) {\n          price1 = 100;\n        }\n        if (price2 < 100) {\n          price2 = 100;\n        }\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\n        if (quantity < 0) {\n          quantity *= -1;\n        }\n        data.push({\n          date: new Date(2010, 0, i).getTime(),\n          price1: price1,\n          price2: price2,\n          quantity: quantity\n        });\n      }\n      valueSeries1.data.setAll(data);\n      valueSeries2.data.setAll(data);\n      volumeSeries.data.setAll(data);\n      sbSeries.data.setAll(data);\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  var _demo3 = function _demo3() {\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n    am5.ready(function () {\n      // Create root element\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n      var root = am5.Root[\"new\"](\"kt_amcharts_3\");\n\n      // Set themes\n      // https://www.amcharts.com/docs/v5/concepts/themes/\n      root.setThemes([am5themes_Animated[\"new\"](root)]);\n\n      // Create chart\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\n      var chart = root.container.children.push(am5xy.XYChart[\"new\"](root, {\n        panX: true,\n        panY: false,\n        wheelX: \"panX\",\n        wheelY: \"zoomX\",\n        layout: root.verticalLayout\n      }));\n      chart.get(\"colors\").set(\"step\", 2);\n\n      // Create axes\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\n      var valueAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        inside: true\n      });\n      valueAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: valueAxisRenderer,\n        height: am5.percent(70)\n      }));\n      valueAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Value\",\n        fontWeight: \"bold\",\n        paddingBottom: 5,\n        paddingTop: 5\n      }));\n      var volumeAxisRenderer = am5xy.AxisRendererY[\"new\"](root, {\n        inside: true\n      });\n      volumeAxisRenderer.labels.template.setAll({\n        centerY: am5.percent(100),\n        maxPosition: 0.98,\n        fill: bodyColor\n      });\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: volumeAxisRenderer,\n        height: am5.percent(30),\n        layer: 5,\n        numberFormat: \"#a\"\n      }));\n      volumeAxis.axisHeader.set(\"paddingTop\", 10);\n      volumeAxis.axisHeader.children.push(am5.Label[\"new\"](root, {\n        text: \"Volume\",\n        fontWeight: \"bold\",\n        paddingTop: 5,\n        paddingBottom: 5\n      }));\n      var dateAxisRenderer = am5xy.AxisRendererX[\"new\"](root, {});\n      dateAxisRenderer.labels.template.setAll({\n        minPosition: 0.01,\n        maxPosition: 0.99,\n        minGridDistance: 40,\n        fill: bodyColor\n      });\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        //groupCount: 20,\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: dateAxisRenderer\n      }));\n      dateAxis.set(\"tooltip\", am5.Tooltip[\"new\"](root, {}));\n      var color = bgColor;\n\n      // Add series\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\n      var valueSeries = chart.series.push(am5xy.CandlestickSeries[\"new\"](root, {\n        fill: color,\n        clustered: false,\n        calculateAggregates: true,\n        stroke: color,\n        name: \"MSFT\",\n        xAxis: dateAxis,\n        yAxis: valueAxis,\n        valueYField: \"Close\",\n        openValueYField: \"Open\",\n        lowValueYField: \"Low\",\n        highValueYField: \"High\",\n        valueXField: \"Date\",\n        lowValueYGrouped: \"low\",\n        highValueYGrouped: \"high\",\n        openValueYGrouped: \"open\",\n        valueYGrouped: \"close\",\n        legendValueText: \"open: {openValueY} low: {lowValueY} high: {highValueY} close: {valueY}\",\n        legendRangeValueText: \"{valueYClose}\"\n      }));\n      var valueTooltip = valueSeries.set(\"tooltip\", am5.Tooltip[\"new\"](root, {\n        getFillFromSprite: false,\n        getStrokeFromSprite: true,\n        getLabelFillFromSprite: true,\n        autoTextColor: false,\n        pointerOrientation: \"horizontal\",\n        labelText: \"{name}: {valueY} {valueYChangePreviousPercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\"\n      }));\n      valueTooltip.get(\"background\").set(\"fill\", bgColor);\n      var firstColor = chart.get(\"colors\").getIndex(0);\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\"new\"](root, {\n        name: \"MSFT\",\n        clustered: false,\n        fill: firstColor,\n        stroke: firstColor,\n        valueYField: \"Volume\",\n        valueXField: \"Date\",\n        valueYGrouped: \"sum\",\n        xAxis: dateAxis,\n        yAxis: volumeAxis,\n        legendValueText: \"{valueY}\",\n        tooltip: am5.Tooltip[\"new\"](root, {\n          labelText: \"{valueY}\"\n        })\n      }));\n      volumeSeries.columns.template.setAll({\n        //strokeWidth: 0.5,\n        //strokeOpacity: 1,\n        //stroke: am5.color(0xffffff)\n      });\n\n      // Add legend to axis header\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      valueLegend.data.setAll([valueSeries]);\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\"new\"](root, {\n        useDefaultMarker: true\n      }));\n      volumeLegend.data.setAll([volumeSeries]);\n\n      // Stack axes vertically\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\n      chart.leftAxesContainer.set(\"layout\", root.verticalLayout);\n\n      // Add cursor\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\n      chart.set(\"cursor\", am5xy.XYCursor[\"new\"](root, {}));\n\n      // Add scrollbar\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\n      var scrollbar = chart.set(\"scrollbarX\", am5xy.XYChartScrollbar[\"new\"](root, {\n        orientation: \"horizontal\",\n        height: 50\n      }));\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\"new\"](root, {\n        groupData: true,\n        groupIntervals: [{\n          timeUnit: \"week\",\n          count: 1\n        }],\n        baseInterval: {\n          timeUnit: \"day\",\n          count: 1\n        },\n        renderer: am5xy.AxisRendererX[\"new\"](root, {})\n      }));\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\"new\"](root, {\n        renderer: am5xy.AxisRendererY[\"new\"](root, {})\n      }));\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\"new\"](root, {\n        valueYField: \"Adj Close\",\n        valueXField: \"Date\",\n        xAxis: sbDateAxis,\n        yAxis: sbValueAxis\n      }));\n      sbSeries.fills.template.setAll({\n        visible: true,\n        fillOpacity: 0.3\n      });\n\n      // Load external data\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\n      am5.net.load(\"https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv\").then(function (result) {\n        // Parse loaded data\n        var data = am5.CSVParser.parse(result.response, {\n          delimiter: \",\",\n          reverse: true,\n          skipEmpty: true,\n          useColumnNames: true\n        });\n\n        // Process data (convert dates and values)\n        var processor = am5.DataProcessor[\"new\"](root, {\n          dateFields: [\"Date\"],\n          dateFormat: \"yyyy-MM-dd\",\n          numericFields: [\"Open\", \"High\", \"Low\", \"Close\", \"Adj Close\", \"Volume\"]\n        });\n        processor.processMany(data);\n        console.log(data);\n\n        // Set data\n        valueSeries.data.setAll(data);\n        volumeSeries.data.setAll(data);\n        sbSeries.data.setAll(data);\n      });\n\n      // Make stuff animate on load\n      // https://www.amcharts.com/docs/v5/concepts/animations/\n      chart.appear(1000, 100);\n    }); // end am5.ready()\n  };\n  return {\n    // Public Functions\n    init: function init() {\n      _demo1();\n      _demo2();\n      _demo3();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralAmChartsStock.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2FtY2hhcnRzL3N0b2NrLWNoYXJ0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLElBQUlBLHNCQUFzQixHQUFHLFlBQVk7RUFDckM7RUFDQSxJQUFJQyxLQUFLO0VBQ1QsSUFBTUMsU0FBUyxHQUFHQyxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDQyxlQUFlLENBQUMsQ0FBQ0MsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUM7RUFDaEcsSUFBTUMsT0FBTyxHQUFHSixnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDQyxlQUFlLENBQUMsQ0FBQ0MsZ0JBQWdCLENBQUMsY0FBYyxDQUFDOztFQUUzRjtFQUNBLElBQUlFLE1BQU0sR0FBRyxTQUFUQSxNQUFNQSxDQUFBLEVBQWU7SUFDckI7SUFDQUMsR0FBRyxDQUFDQyxLQUFLLENBQUMsWUFBWTtNQUVsQjtNQUNBO01BQ0EsSUFBSUMsSUFBSSxHQUFHRixHQUFHLENBQUNHLElBQUksT0FBSSxDQUFDLGVBQWUsQ0FBQzs7TUFHeEM7TUFDQTtNQUNBRCxJQUFJLENBQUNFLFNBQVMsQ0FBQyxDQUNYQyxrQkFBa0IsT0FBSSxDQUFDSCxJQUFJLENBQUMsQ0FDL0IsQ0FBQzs7TUFHRjtNQUNBO01BQ0EsSUFBSVYsS0FBSyxHQUFHVSxJQUFJLENBQUNJLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxPQUFJLENBQUNSLElBQUksRUFBRTtRQUM3RFMsSUFBSSxFQUFFLElBQUk7UUFDVkMsSUFBSSxFQUFFLEtBQUs7UUFDWEMsTUFBTSxFQUFFLE1BQU07UUFDZEMsTUFBTSxFQUFFLE9BQU87UUFDZkMsTUFBTSxFQUFFYixJQUFJLENBQUNjO01BQ2pCLENBQUMsQ0FBQyxDQUFDO01BRUh4QixLQUFLLENBQUN5QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxNQUFNLEVBQUUs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UmUsTUFBTSxDQUFDLENBQUM7SUFDWjtFQUNKLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBbUMsTUFBTSxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFZO0VBQ2xDM0ssc0JBQXNCLENBQUN5SyxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2FtY2hhcnRzL3N0b2NrLWNoYXJ0cy5qcz9iMWZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBDbGFzcyBkZWZpbml0aW9uXG52YXIgS1RHZW5lcmFsQW1DaGFydHNTdG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTaGFyZWQgdmFyaWFibGVzXG4gICAgdmFyIGNoYXJ0O1xuICAgIGNvbnN0IGJvZHlDb2xvciA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWJzLWJvZHktY29sb3InKTtcbiAgICBjb25zdCBiZ0NvbG9yID0gZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtYm9keS1iZycpO1xuXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcbiAgICB2YXIgX2RlbW8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJbml0IEFtQ2hhcnQgLS0gZm9yIG1vcmUgaW5mbywgcGxlYXNlIHZpc2l0IHRoZSBvZmZpY2lhbCBkb2N1bWVudGlhdGlvbjogaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvZ2V0dGluZy1zdGFydGVkL1xuICAgICAgICBhbTUucmVhZHkoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgcm9vdCBlbGVtZW50XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9nZXR0aW5nLXN0YXJ0ZWQvI1Jvb3RfZWxlbWVudFxuICAgICAgICAgICAgdmFyIHJvb3QgPSBhbTUuUm9vdC5uZXcoXCJrdF9hbWNoYXJ0c18xXCIpO1xuXG5cbiAgICAgICAgICAgIC8vIFNldCB0aGVtZXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NvbmNlcHRzL3RoZW1lcy9cbiAgICAgICAgICAgIHJvb3Quc2V0VGhlbWVzKFtcbiAgICAgICAgICAgICAgICBhbTV0aGVtZXNfQW5pbWF0ZWQubmV3KHJvb3QpXG4gICAgICAgICAgICBdKTtcblxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgY2hhcnRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9cbiAgICAgICAgICAgIHZhciBjaGFydCA9IHJvb3QuY29udGFpbmVyLmNoaWxkcmVuLnB1c2goYW01eHkuWFlDaGFydC5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIHBhblg6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFuWTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2hlZWxYOiBcInBhblhcIixcbiAgICAgICAgICAgICAgICB3aGVlbFk6IFwiem9vbVhcIixcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IHJvb3QudmVydGljYWxMYXlvdXRcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgY2hhcnQuZ2V0KFwiY29sb3JzXCIpLnNldChcInN0ZXBcIiwgMik7XG5cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGF4ZXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9heGVzL1xuICAgICAgICAgICAgLy8gd2hlbiBheGVzIGFyZSBpbiBvcHBvc2l0ZSBzaWRlLCB0aGV5IHNob3VsZCBiZSBhZGRlZCBpbiByZXZlcnNlIG9yZGVyXG4gICAgICAgICAgICB2YXIgdm9sdW1lQXhpc1JlbmRlcmVyID0gYW01eHkuQXhpc1JlbmRlcmVyWS5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZvbHVtZUF4aXNSZW5kZXJlci5sYWJlbHMudGVtcGxhdGUuc2V0QWxsKHtcbiAgICAgICAgICAgICAgICBjZW50ZXJZOiBhbTUucGVyY2VudCgxMDApLFxuICAgICAgICAgICAgICAgIG1heFBvc2l0aW9uOiAwLjk4LFxuICAgICAgICAgICAgICAgIGZpbGw6IGJvZHlDb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdm9sdW1lQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2goYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHZvbHVtZUF4aXNSZW5kZXJlcixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGFtNS5wZXJjZW50KDMwKSxcbiAgICAgICAgICAgICAgICBsYXllcjogNVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdm9sdW1lQXhpcy5heGlzSGVhZGVyLnNldChcInBhZGRpbmdUb3BcIiwgMTApO1xuICAgICAgICAgICAgdm9sdW1lQXhpcy5heGlzSGVhZGVyLmNoaWxkcmVuLnB1c2goYW01LkxhYmVsLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJWb2x1bWVcIixcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA1LFxuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDVcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlQXhpc1JlbmRlcmVyID0gYW01eHkuQXhpc1JlbmRlcmVyWS5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhbjogXCJ6b29tXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFsdWVBeGlzUmVuZGVyZXIubGFiZWxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgY2VudGVyWTogYW01LnBlcmNlbnQoMTAwKSxcbiAgICAgICAgICAgICAgICBtYXhQb3NpdGlvbjogMC45OCxcbiAgICAgICAgICAgICAgICBmaWxsOiBib2R5Q29sb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHZhbHVlQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2goYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHZhbHVlQXhpc1JlbmRlcmVyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogYW01LnBlcmNlbnQoNzApLFxuICAgICAgICAgICAgICAgIG1heERldmlhdGlvbjogMVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFsdWVBeGlzLmF4aXNIZWFkZXIuY2hpbGRyZW4ucHVzaChhbTUuTGFiZWwubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogNSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA1XG4gICAgICAgICAgICB9KSk7XG5cblxuXG4gICAgICAgICAgICB2YXIgZGF0ZUF4aXNSZW5kZXJlciA9IGFtNXh5LkF4aXNSZW5kZXJlclgubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBwYW46IFwiem9vbVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRhdGVBeGlzUmVuZGVyZXIubGFiZWxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgbWluUG9zaXRpb246IDAuMDEsXG4gICAgICAgICAgICAgICAgbWF4UG9zaXRpb246IDAuOTksXG4gICAgICAgICAgICAgICAgZmlsbDogYm9keUNvbG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBkYXRlQXhpcyA9IGNoYXJ0LnhBeGVzLnB1c2goYW01eHkuRGF0ZUF4aXMubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBncm91cERhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgbWF4RGV2aWF0aW9uOiAwLjUsXG4gICAgICAgICAgICAgICAgYmFzZUludGVydmFsOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVVbml0OiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IGRhdGVBeGlzUmVuZGVyZXJcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGRhdGVBeGlzLnNldChcInRvb2x0aXBcIiwgYW01LlRvb2x0aXAubmV3KHJvb3QsIHt9KSk7XG5cblxuICAgICAgICAgICAgLy8gQWRkIHNlcmllc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L3Nlcmllcy9cbiAgICAgICAgICAgIHZhciB2YWx1ZVNlcmllczEgPSBjaGFydC5zZXJpZXMucHVzaChhbTV4eS5MaW5lU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJYVERcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJwcmljZTFcIixcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVBZ2dyZWdhdGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlWEZpZWxkOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4QXhpczogZGF0ZUF4aXMsXG4gICAgICAgICAgICAgICAgeUF4aXM6IHZhbHVlQXhpcyxcbiAgICAgICAgICAgICAgICBsZWdlbmRWYWx1ZVRleHQ6IFwie3ZhbHVlWX1cIlxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVUb29sdGlwID0gdmFsdWVTZXJpZXMxLnNldChcInRvb2x0aXBcIiwgYW01LlRvb2x0aXAubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBnZXRGaWxsRnJvbVNwcml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0U3Ryb2tlRnJvbVNwcml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXRMYWJlbEZpbGxGcm9tU3ByaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF1dG9UZXh0Q29sb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJPcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0OiBcIntuYW1lfToge3ZhbHVlWX0ge3ZhbHVlWUNoYW5nZVBlcmNlbnQuZm9ybWF0TnVtYmVyKCdbIzAwZmYwMF0rIywjIyMuIyN8WyNmZjAwMDBdIywjIyMuIyN8WyM5OTk5OTldMCcpfSVcIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFsdWVUb29sdGlwLmdldChcImJhY2tncm91bmRcIikuc2V0KFwiZmlsbFwiLCBiZ0NvbG9yKTtcblxuICAgICAgICAgICAgdmFyIGZpcnN0Q29sb3IgPSBjaGFydC5nZXQoXCJjb2xvcnNcIikuZ2V0SW5kZXgoMCk7XG4gICAgICAgICAgICB2YXIgdm9sdW1lU2VyaWVzID0gY2hhcnQuc2VyaWVzLnB1c2goYW01eHkuQ29sdW1uU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJYVERcIixcbiAgICAgICAgICAgICAgICBmaWxsOiBmaXJzdENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogZmlyc3RDb2xvcixcbiAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJxdWFudGl0eVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlWEZpZWxkOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVlHcm91cGVkOiBcInN1bVwiLFxuICAgICAgICAgICAgICAgIHhBeGlzOiBkYXRlQXhpcyxcbiAgICAgICAgICAgICAgICB5QXhpczogdm9sdW1lQXhpcyxcbiAgICAgICAgICAgICAgICBsZWdlbmRWYWx1ZVRleHQ6IFwie3ZhbHVlWX1cIixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBhbTUuVG9vbHRpcC5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFRleHQ6IFwie3ZhbHVlWX1cIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2b2x1bWVTZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAwLjIsXG4gICAgICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IGFtNS5jb2xvcigweGZmZmZmZilcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIC8vIEFkZCBsZWdlbmQgdG8gYXhpcyBoZWFkZXJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9heGVzL2F4aXMtaGVhZGVycy9cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9sZWdlbmQteHktc2VyaWVzL1xuICAgICAgICAgICAgdmFyIHZhbHVlTGVnZW5kID0gdmFsdWVBeGlzLmF4aXNIZWFkZXIuY2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAgICAgICBhbTUuTGVnZW5kLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZURlZmF1bHRNYXJrZXI6IHRydWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHZhbHVlTGVnZW5kLmRhdGEuc2V0QWxsKFt2YWx1ZVNlcmllczFdKTtcblxuICAgICAgICAgICAgdmFyIHZvbHVtZUxlZ2VuZCA9IHZvbHVtZUF4aXMuYXhpc0hlYWRlci5jaGlsZHJlbi5wdXNoKFxuICAgICAgICAgICAgICAgIGFtNS5MZWdlbmQubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlRGVmYXVsdE1hcmtlcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdm9sdW1lTGVnZW5kLmRhdGEuc2V0QWxsKFt2b2x1bWVTZXJpZXNdKTtcblxuXG4gICAgICAgICAgICAvLyBTdGFjayBheGVzIHZlcnRpY2FsbHlcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9heGVzLyNTdGFja2VkX2F4ZXNcbiAgICAgICAgICAgIGNoYXJ0LnJpZ2h0QXhlc0NvbnRhaW5lci5zZXQoXCJsYXlvdXRcIiwgcm9vdC52ZXJ0aWNhbExheW91dCk7XG5cblxuICAgICAgICAgICAgLy8gQWRkIGN1cnNvclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L2N1cnNvci9cbiAgICAgICAgICAgIGNoYXJ0LnNldChcImN1cnNvclwiLCBhbTV4eS5YWUN1cnNvci5uZXcocm9vdCwge30pKVxuXG5cbiAgICAgICAgICAgIC8vIEFkZCBzY3JvbGxiYXJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9zY3JvbGxiYXJzL1xuICAgICAgICAgICAgdmFyIHNjcm9sbGJhciA9IGNoYXJ0LnNldChcInNjcm9sbGJhclhcIiwgYW01eHkuWFlDaGFydFNjcm9sbGJhci5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHZhciBzYkRhdGVBeGlzID0gc2Nyb2xsYmFyLmNoYXJ0LnhBeGVzLnB1c2goYW01eHkuRGF0ZUF4aXMubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBncm91cERhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgZ3JvdXBJbnRlcnZhbHM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVVbml0OiBcIndlZWtcIixcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICBiYXNlSW50ZXJ2YWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdGltZVVuaXQ6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogYW01eHkuQXhpc1JlbmRlcmVyWC5uZXcocm9vdCwge30pXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHZhciBzYlZhbHVlQXhpcyA9IHNjcm9sbGJhci5jaGFydC55QXhlcy5wdXNoKFxuICAgICAgICAgICAgICAgIGFtNXh5LlZhbHVlQXhpcy5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlcjogYW01eHkuQXhpc1JlbmRlcmVyWS5uZXcocm9vdCwge30pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHZhciBzYlNlcmllcyA9IHNjcm9sbGJhci5jaGFydC5zZXJpZXMucHVzaChhbTV4eS5MaW5lU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgdmFsdWVZRmllbGQ6IFwicHJpY2UxXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVYRmllbGQ6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhBeGlzOiBzYkRhdGVBeGlzLFxuICAgICAgICAgICAgICAgIHlBeGlzOiBzYlZhbHVlQXhpc1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBzYlNlcmllcy5maWxscy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuM1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIGRhdGEgYW5kIHNldCBvbiBzZXJpZXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9zZXJpZXMvI1NldHRpbmdfZGF0YVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIHZhciBwcmljZTEgPSAxMDAwO1xuICAgICAgICAgICAgdmFyIHF1YW50aXR5ID0gMTAwMDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTAwMDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJpY2UxICs9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAxIDogLTEpICogTWF0aC5yYW5kb20oKSAqIDIwKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcmljZTEgPCAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UxID0gMTAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHF1YW50aXR5ICs9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAxIDogLTEpICogTWF0aC5yYW5kb20oKSAqIDUwMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocXVhbnRpdHkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5ICo9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgyMDEwLCAwLCBpKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgICAgIHByaWNlMTogcHJpY2UxLFxuICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogcXVhbnRpdHlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWVTZXJpZXMxLmRhdGEuc2V0QWxsKGRhdGEpO1xuICAgICAgICAgICAgdm9sdW1lU2VyaWVzLmRhdGEuc2V0QWxsKGRhdGEpO1xuICAgICAgICAgICAgc2JTZXJpZXMuZGF0YS5zZXRBbGwoZGF0YSk7XG5cblxuICAgICAgICAgICAgLy8gTWFrZSBzdHVmZiBhbmltYXRlIG9uIGxvYWRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NvbmNlcHRzL2FuaW1hdGlvbnMvXG4gICAgICAgICAgICBjaGFydC5hcHBlYXIoMTAwMCwgMTAwKTtcblxuICAgICAgICB9KTsgLy8gZW5kIGFtNS5yZWFkeSgpXG4gICAgfVxuXG4gICAgdmFyIF9kZW1vMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSW5pdCBBbUNoYXJ0IC0tIGZvciBtb3JlIGluZm8sIHBsZWFzZSB2aXNpdCB0aGUgb2ZmaWNpYWwgZG9jdW1lbnRpYXRpb246IGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2dldHRpbmctc3RhcnRlZC9cbiAgICAgICAgYW01LnJlYWR5KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIHJvb3QgZWxlbWVudFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvZ2V0dGluZy1zdGFydGVkLyNSb290X2VsZW1lbnRcbiAgICAgICAgICAgIHZhciByb290ID0gYW01LlJvb3QubmV3KFwia3RfYW1jaGFydHNfMlwiKTtcblxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlbWVzXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jb25jZXB0cy90aGVtZXMvXG4gICAgICAgICAgICByb290LnNldFRoZW1lcyhbXG4gICAgICAgICAgICAgICAgYW01dGhlbWVzX0FuaW1hdGVkLm5ldyhyb290KVxuICAgICAgICAgICAgXSk7XG5cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGNoYXJ0XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvXG4gICAgICAgICAgICB2YXIgY2hhcnQgPSByb290LmNvbnRhaW5lci5jaGlsZHJlbi5wdXNoKGFtNXh5LlhZQ2hhcnQubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBwYW5YOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhblk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdoZWVsWDogXCJwYW5YXCIsXG4gICAgICAgICAgICAgICAgd2hlZWxZOiBcInpvb21YXCIsXG4gICAgICAgICAgICAgICAgbGF5b3V0OiByb290LnZlcnRpY2FsTGF5b3V0XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGNoYXJ0LmdldChcImNvbG9yc1wiKS5zZXQoXCJzdGVwXCIsIDIpO1xuXG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBheGVzXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvYXhlcy9cblxuICAgICAgICAgICAgLy8gWSBheGlzICMxXG4gICAgICAgICAgICB2YXIgdmFsdWVBeGlzUmVuZGVyZXIgPSBhbTV4eS5BeGlzUmVuZGVyZXJZLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgb3Bwb3NpdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFuOiBcInpvb21cIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhbHVlQXhpc1JlbmRlcmVyLmxhYmVscy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIGNlbnRlclk6IGFtNS5wZXJjZW50KDEwMCksXG4gICAgICAgICAgICAgICAgbWF4UG9zaXRpb246IDAuOTgsXG4gICAgICAgICAgICAgICAgZmlsbDogYm9keUNvbG9yXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2goYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHZhbHVlQXhpc1JlbmRlcmVyLFxuICAgICAgICAgICAgICAgIG1heERldmlhdGlvbjogMSxcbiAgICAgICAgICAgICAgICBleHRyYU1pbjogMC4yIC8vIGdpdmVzIHNvbWUgZXh0cmEgc3BhY2VcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgLy8gWSBheGlzICMyXG4gICAgICAgICAgICB2YXIgdm9sdW1lQXhpc1JlbmRlcmVyID0gYW01eHkuQXhpc1JlbmRlcmVyWS5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdm9sdW1lQXhpc1JlbmRlcmVyLmxhYmVscy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIGZvcmNlSGlkZGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZpbGw6IGJvZHlDb2xvclxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZvbHVtZUF4aXNSZW5kZXJlci5ncmlkLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgZm9yY2VIaWRkZW46IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgdm9sdW1lQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2goYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHZvbHVtZUF4aXNSZW5kZXJlcixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGFtNS5wZXJjZW50KDI1KSxcbiAgICAgICAgICAgICAgICBsYXllcjogNSxcbiAgICAgICAgICAgICAgICBjZW50ZXJZOiBhbTUucDEwMCxcbiAgICAgICAgICAgICAgICB5OiBhbTUucDEwMFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2b2x1bWVBeGlzLmF4aXNIZWFkZXIuc2V0KFwicGFkZGluZ1RvcFwiLCAxMCk7XG5cblxuICAgICAgICAgICAgLy8gWCBheGlzXG4gICAgICAgICAgICB2YXIgZGF0ZUF4aXNSZW5kZXJlciA9IGFtNXh5LkF4aXNSZW5kZXJlclgubmV3KHJvb3QsIHt9KTtcblxuICAgICAgICAgICAgZGF0ZUF4aXNSZW5kZXJlci5sYWJlbHMudGVtcGxhdGUuc2V0QWxsKHtcbiAgICAgICAgICAgICAgICBtaW5Qb3NpdGlvbjogMC4wMSxcbiAgICAgICAgICAgICAgICBtYXhQb3NpdGlvbjogMC45OSxcbiAgICAgICAgICAgICAgICBmaWxsOiBib2R5Q29sb3JcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZGF0ZUF4aXMgPSBjaGFydC54QXhlcy5wdXNoKGFtNXh5LkRhdGVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgZ3JvdXBEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJhc2VJbnRlcnZhbDoge1xuICAgICAgICAgICAgICAgICAgICB0aW1lVW5pdDogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiBkYXRlQXhpc1JlbmRlcmVyXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGRhdGVBeGlzLnNldChcInRvb2x0aXBcIiwgYW01LlRvb2x0aXAubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICB0aGVtZVRhZ3M6IFtcImF4aXNcIl1cbiAgICAgICAgICAgIH0pKTtcblxuXG4gICAgICAgICAgICAvLyBBZGQgc2VyaWVzXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvc2VyaWVzL1xuICAgICAgICAgICAgdmFyIHZhbHVlU2VyaWVzMSA9IGNoYXJ0LnNlcmllcy5wdXNoKGFtNXh5LkxpbmVTZXJpZXMubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlhURFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlWUZpZWxkOiBcInByaWNlMVwiLFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUFnZ3JlZ2F0ZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWVZU2hvdzogXCJ2YWx1ZVlDaGFuZ2VTZWxlY3Rpb25QZXJjZW50XCIsXG4gICAgICAgICAgICAgICAgdmFsdWVYRmllbGQ6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhBeGlzOiBkYXRlQXhpcyxcbiAgICAgICAgICAgICAgICB5QXhpczogdmFsdWVBeGlzLFxuICAgICAgICAgICAgICAgIGxlZ2VuZFZhbHVlVGV4dDogXCJ7dmFsdWVZfVwiXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZVNlcmllczIgPSBjaGFydC5zZXJpZXMucHVzaChhbTV4eS5MaW5lU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCVERcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJwcmljZTJcIixcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVBZ2dyZWdhdGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlWVNob3c6IFwidmFsdWVZQ2hhbmdlU2VsZWN0aW9uUGVyY2VudFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlWEZpZWxkOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4QXhpczogZGF0ZUF4aXMsXG4gICAgICAgICAgICAgICAgeUF4aXM6IHZhbHVlQXhpcyxcbiAgICAgICAgICAgICAgICBsZWdlbmRWYWx1ZVRleHQ6IFwie3ZhbHVlWX1cIlxuICAgICAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgICAgIC8vIEFkZCBzZXJpZXMgdG9vbHRpcHNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9zZXJpZXMvI1Rvb2x0aXBzXG4gICAgICAgICAgICB2YXIgdmFsdWVUb29sdGlwID0gdmFsdWVTZXJpZXMxLnNldChcInRvb2x0aXBcIiwgYW01LlRvb2x0aXAubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBnZXRGaWxsRnJvbVNwcml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0U3Ryb2tlRnJvbVNwcml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXRMYWJlbEZpbGxGcm9tU3ByaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF1dG9UZXh0Q29sb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJPcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0OiBcIntuYW1lfToge3ZhbHVlWX0ge3ZhbHVlWUNoYW5nZVBlcmNlbnQuZm9ybWF0TnVtYmVyKCdbIzAwZmYwMF0rIywjIyMuIyN8WyNmZjAwMDBdIywjIyMuIyN8WyM5OTk5OTldMCcpfSVcIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFsdWVUb29sdGlwLmdldChcImJhY2tncm91bmRcIikuc2V0KFwiZmlsbFwiLCBiZ0NvbG9yKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlVG9vbHRpcDIgPSB2YWx1ZVNlcmllczIuc2V0KFwidG9vbHRpcFwiLCBhbTUuVG9vbHRpcC5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIGdldEZpbGxGcm9tU3ByaXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBnZXRTdHJva2VGcm9tU3ByaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldExhYmVsRmlsbEZyb21TcHJpdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYXV0b1RleHRDb2xvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcG9pbnRlck9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICBsYWJlbFRleHQ6IFwie25hbWV9OiB7dmFsdWVZfSB7dmFsdWVZQ2hhbmdlUGVyY2VudC5mb3JtYXROdW1iZXIoJ1sjMDBmZjAwXSsjLCMjIy4jI3xbI2ZmMDAwMF0jLCMjIy4jI3xbIzk5OTk5OV0wJyl9JVwiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YWx1ZVRvb2x0aXAyLmdldChcImJhY2tncm91bmRcIikuc2V0KFwiZmlsbFwiLCBiZ0NvbG9yKTtcblxuICAgICAgICAgICAgdmFyIGZpcnN0Q29sb3IgPSBjaGFydC5nZXQoXCJjb2xvcnNcIikuZ2V0SW5kZXgoMCk7XG4gICAgICAgICAgICB2YXIgdm9sdW1lU2VyaWVzID0gY2hhcnQuc2VyaWVzLnB1c2goYW01eHkuQ29sdW1uU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJYVERcIixcbiAgICAgICAgICAgICAgICBmaWxsOiBmaXJzdENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogZmlyc3RDb2xvcixcbiAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJxdWFudGl0eVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlWEZpZWxkOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVlHcm91cGVkOiBcInN1bVwiLFxuICAgICAgICAgICAgICAgIHhBeGlzOiBkYXRlQXhpcyxcbiAgICAgICAgICAgICAgICB5QXhpczogdm9sdW1lQXhpcyxcbiAgICAgICAgICAgICAgICBsZWdlbmRWYWx1ZVRleHQ6IFwie3ZhbHVlWX1cIixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBhbTUuVG9vbHRpcC5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFRleHQ6IFwie3ZhbHVlWX1cIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2b2x1bWVTZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiBhbTUucGVyY2VudCg0MCksXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDAuMixcbiAgICAgICAgICAgICAgICBzdHJva2VPcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogYW01LmNvbG9yKDB4ZmZmZmZmKVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgLy8gQWRkIGxlZ2VuZCB0byBheGlzIGhlYWRlclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L2F4ZXMvYXhpcy1oZWFkZXJzL1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L2xlZ2VuZC14eS1zZXJpZXMvXG4gICAgICAgICAgICB2YXIgbGVnZW5kID0gY2hhcnQucGxvdENvbnRhaW5lci5jaGlsZHJlbi5wdXNoKGFtNS5MZWdlbmQubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICB1c2VEZWZhdWx0TWFya2VyOiB0cnVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBsZWdlbmQubGFiZWxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgZmlsbDogYm9keUNvbG9yXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGVnZW5kLnZhbHVlTGFiZWxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgZmlsbDogYm9keUNvbG9yXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGVnZW5kLmRhdGEuc2V0QWxsKFt2YWx1ZVNlcmllczEsIHZhbHVlU2VyaWVzMl0pO1xuXG5cbiAgICAgICAgICAgIC8vIEFkZCBjdXJzb3JcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9jdXJzb3IvXG4gICAgICAgICAgICBjaGFydC5zZXQoXCJjdXJzb3JcIiwgYW01eHkuWFlDdXJzb3IubmV3KHJvb3QsIHt9KSlcblxuXG4gICAgICAgICAgICAvLyBBZGQgc2Nyb2xsYmFyXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvc2Nyb2xsYmFycy9cbiAgICAgICAgICAgIHZhciBzY3JvbGxiYXIgPSBjaGFydC5zZXQoXCJzY3JvbGxiYXJYXCIsIGFtNXh5LlhZQ2hhcnRTY3JvbGxiYXIubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2YXIgc2JEYXRlQXhpcyA9IHNjcm9sbGJhci5jaGFydC54QXhlcy5wdXNoKGFtNXh5LkRhdGVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgZ3JvdXBEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyb3VwSW50ZXJ2YWxzOiBbe1xuICAgICAgICAgICAgICAgICAgICB0aW1lVW5pdDogXCJ3ZWVrXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgYmFzZUludGVydmFsOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVVbml0OiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IGFtNXh5LkF4aXNSZW5kZXJlclgubmV3KHJvb3QsIHt9KVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2YXIgc2JWYWx1ZUF4aXMgPSBzY3JvbGxiYXIuY2hhcnQueUF4ZXMucHVzaChhbTV4eS5WYWx1ZUF4aXMubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogYW01eHkuQXhpc1JlbmRlcmVyWS5uZXcocm9vdCwge30pXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHZhciBzYlNlcmllcyA9IHNjcm9sbGJhci5jaGFydC5zZXJpZXMucHVzaChhbTV4eS5MaW5lU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgdmFsdWVZRmllbGQ6IFwicHJpY2UxXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVYRmllbGQ6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhBeGlzOiBzYkRhdGVBeGlzLFxuICAgICAgICAgICAgICAgIHlBeGlzOiBzYlZhbHVlQXhpc1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBzYlNlcmllcy5maWxscy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuM1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIGRhdGEgYW5kIHNldCBvbiBzZXJpZXNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9zZXJpZXMvI1NldHRpbmdfZGF0YVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIHZhciBwcmljZTEgPSAxMDAwO1xuICAgICAgICAgICAgdmFyIHByaWNlMiA9IDIwMDA7XG4gICAgICAgICAgICB2YXIgcXVhbnRpdHkgPSAxMDAwMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1MDAwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcmljZTEgKz0gTWF0aC5yb3VuZCgoTWF0aC5yYW5kb20oKSA8IDAuNSA/IDEgOiAtMSkgKiBNYXRoLnJhbmRvbSgpICogMjApO1xuICAgICAgICAgICAgICAgIHByaWNlMiArPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKSAqIE1hdGgucmFuZG9tKCkgKiAyMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJpY2UxIDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlMSA9IDEwMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocHJpY2UyIDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlMiA9IDEwMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBxdWFudGl0eSArPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpIDwgMC41ID8gMSA6IC0xKSAqIE1hdGgucmFuZG9tKCkgKiA1MDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKHF1YW50aXR5IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBxdWFudGl0eSAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoMjAxMCwgMCwgaSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAgICAgICBwcmljZTE6IHByaWNlMSxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UyOiBwcmljZTIsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBxdWFudGl0eVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZVNlcmllczEuZGF0YS5zZXRBbGwoZGF0YSk7XG4gICAgICAgICAgICB2YWx1ZVNlcmllczIuZGF0YS5zZXRBbGwoZGF0YSk7XG5cbiAgICAgICAgICAgIHZvbHVtZVNlcmllcy5kYXRhLnNldEFsbChkYXRhKTtcbiAgICAgICAgICAgIHNiU2VyaWVzLmRhdGEuc2V0QWxsKGRhdGEpO1xuXG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3R1ZmYgYW5pbWF0ZSBvbiBsb2FkXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jb25jZXB0cy9hbmltYXRpb25zL1xuICAgICAgICAgICAgY2hhcnQuYXBwZWFyKDEwMDAsIDEwMCk7XG5cbiAgICAgICAgfSk7IC8vIGVuZCBhbTUucmVhZHkoKVxuICAgIH1cblxuICAgIHZhciBfZGVtbzMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEluaXQgQW1DaGFydCAtLSBmb3IgbW9yZSBpbmZvLCBwbGVhc2UgdmlzaXQgdGhlIG9mZmljaWFsIGRvY3VtZW50aWF0aW9uOiBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9nZXR0aW5nLXN0YXJ0ZWQvXG4gICAgICAgIGFtNS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSByb290IGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2dldHRpbmctc3RhcnRlZC8jUm9vdF9lbGVtZW50XG4gICAgICAgICAgICB2YXIgcm9vdCA9IGFtNS5Sb290Lm5ldyhcImt0X2FtY2hhcnRzXzNcIik7XG5cblxuICAgICAgICAgICAgLy8gU2V0IHRoZW1lc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY29uY2VwdHMvdGhlbWVzL1xuICAgICAgICAgICAgcm9vdC5zZXRUaGVtZXMoW1xuICAgICAgICAgICAgICAgIGFtNXRoZW1lc19BbmltYXRlZC5uZXcocm9vdClcbiAgICAgICAgICAgIF0pO1xuXG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBjaGFydFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L1xuICAgICAgICAgICAgdmFyIGNoYXJ0ID0gcm9vdC5jb250YWluZXIuY2hpbGRyZW4ucHVzaChhbTV4eS5YWUNoYXJ0Lm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcGFuWDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYW5ZOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3aGVlbFg6IFwicGFuWFwiLFxuICAgICAgICAgICAgICAgIHdoZWVsWTogXCJ6b29tWFwiLFxuICAgICAgICAgICAgICAgIGxheW91dDogcm9vdC52ZXJ0aWNhbExheW91dFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBjaGFydC5nZXQoXCJjb2xvcnNcIikuc2V0KFwic3RlcFwiLCAyKTtcblxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYXhlc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L2F4ZXMvXG4gICAgICAgICAgICB2YXIgdmFsdWVBeGlzUmVuZGVyZXIgPSBhbTV4eS5BeGlzUmVuZGVyZXJZLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgaW5zaWRlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhbHVlQXhpc1JlbmRlcmVyLmxhYmVscy50ZW1wbGF0ZS5zZXRBbGwoe1xuICAgICAgICAgICAgICAgIGNlbnRlclk6IGFtNS5wZXJjZW50KDEwMCksXG4gICAgICAgICAgICAgICAgbWF4UG9zaXRpb246IDAuOTgsXG4gICAgICAgICAgICAgICAgZmlsbDogYm9keUNvbG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB2YWx1ZUF4aXMgPSBjaGFydC55QXhlcy5wdXNoKGFtNXh5LlZhbHVlQXhpcy5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiB2YWx1ZUF4aXNSZW5kZXJlcixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGFtNS5wZXJjZW50KDcwKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFsdWVBeGlzLmF4aXNIZWFkZXIuY2hpbGRyZW4ucHVzaChhbTUuTGFiZWwubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogNSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA1XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHZhciB2b2x1bWVBeGlzUmVuZGVyZXIgPSBhbTV4eS5BeGlzUmVuZGVyZXJZLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgaW5zaWRlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZvbHVtZUF4aXNSZW5kZXJlci5sYWJlbHMudGVtcGxhdGUuc2V0QWxsKHtcbiAgICAgICAgICAgICAgICBjZW50ZXJZOiBhbTUucGVyY2VudCgxMDApLFxuICAgICAgICAgICAgICAgIG1heFBvc2l0aW9uOiAwLjk4LFxuICAgICAgICAgICAgICAgIGZpbGw6IGJvZHlDb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdm9sdW1lQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2goYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHZvbHVtZUF4aXNSZW5kZXJlcixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGFtNS5wZXJjZW50KDMwKSxcbiAgICAgICAgICAgICAgICBsYXllcjogNSxcbiAgICAgICAgICAgICAgICBudW1iZXJGb3JtYXQ6IFwiI2FcIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdm9sdW1lQXhpcy5heGlzSGVhZGVyLnNldChcInBhZGRpbmdUb3BcIiwgMTApO1xuICAgICAgICAgICAgdm9sdW1lQXhpcy5heGlzSGVhZGVyLmNoaWxkcmVuLnB1c2goYW01LkxhYmVsLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJWb2x1bWVcIixcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiA1LFxuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDVcbiAgICAgICAgICAgIH0pKTtcblxuXG4gICAgICAgICAgICB2YXIgZGF0ZUF4aXNSZW5kZXJlciA9IGFtNXh5LkF4aXNSZW5kZXJlclgubmV3KHJvb3QsIHt9KTtcbiAgICAgICAgICAgIGRhdGVBeGlzUmVuZGVyZXIubGFiZWxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgbWluUG9zaXRpb246IDAuMDEsXG4gICAgICAgICAgICAgICAgbWF4UG9zaXRpb246IDAuOTksXG4gICAgICAgICAgICAgICAgbWluR3JpZERpc3RhbmNlOiA0MCxcbiAgICAgICAgICAgICAgICBmaWxsOiBib2R5Q29sb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGRhdGVBeGlzID0gY2hhcnQueEF4ZXMucHVzaChhbTV4eS5EYXRlQXhpcy5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIGdyb3VwRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvL2dyb3VwQ291bnQ6IDIwLFxuICAgICAgICAgICAgICAgIGJhc2VJbnRlcnZhbDogeyB0aW1lVW5pdDogXCJkYXlcIiwgY291bnQ6IDEgfSxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogZGF0ZUF4aXNSZW5kZXJlclxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZGF0ZUF4aXMuc2V0KFwidG9vbHRpcFwiLCBhbTUuVG9vbHRpcC5uZXcocm9vdCwge30pKTtcblxuICAgICAgICAgICAgdmFyIGNvbG9yID0gYmdDb2xvcjtcblxuICAgICAgICAgICAgLy8gQWRkIHNlcmllc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L3Nlcmllcy9cbiAgICAgICAgICAgIHZhciB2YWx1ZVNlcmllcyA9IGNoYXJ0LnNlcmllcy5wdXNoKFxuICAgICAgICAgICAgICAgIGFtNXh5LkNhbmRsZXN0aWNrU2VyaWVzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVBZ2dyZWdhdGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1TRlRcIixcbiAgICAgICAgICAgICAgICAgICAgeEF4aXM6IGRhdGVBeGlzLFxuICAgICAgICAgICAgICAgICAgICB5QXhpczogdmFsdWVBeGlzLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJDbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICBvcGVuVmFsdWVZRmllbGQ6IFwiT3BlblwiLFxuICAgICAgICAgICAgICAgICAgICBsb3dWYWx1ZVlGaWVsZDogXCJMb3dcIixcbiAgICAgICAgICAgICAgICAgICAgaGlnaFZhbHVlWUZpZWxkOiBcIkhpZ2hcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVYRmllbGQ6IFwiRGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBsb3dWYWx1ZVlHcm91cGVkOiBcImxvd1wiLFxuICAgICAgICAgICAgICAgICAgICBoaWdoVmFsdWVZR3JvdXBlZDogXCJoaWdoXCIsXG4gICAgICAgICAgICAgICAgICAgIG9wZW5WYWx1ZVlHcm91cGVkOiBcIm9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVZR3JvdXBlZDogXCJjbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmRWYWx1ZVRleHQ6IFwib3Blbjoge29wZW5WYWx1ZVl9IGxvdzoge2xvd1ZhbHVlWX0gaGlnaDoge2hpZ2hWYWx1ZVl9IGNsb3NlOiB7dmFsdWVZfVwiLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmRSYW5nZVZhbHVlVGV4dDogXCJ7dmFsdWVZQ2xvc2V9XCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlVG9vbHRpcCA9IHZhbHVlU2VyaWVzLnNldChcInRvb2x0aXBcIiwgYW01LlRvb2x0aXAubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICBnZXRGaWxsRnJvbVNwcml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0U3Ryb2tlRnJvbVNwcml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXRMYWJlbEZpbGxGcm9tU3ByaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF1dG9UZXh0Q29sb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJPcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0OiBcIntuYW1lfToge3ZhbHVlWX0ge3ZhbHVlWUNoYW5nZVByZXZpb3VzUGVyY2VudC5mb3JtYXROdW1iZXIoJ1sjMDBmZjAwXSsjLCMjIy4jI3xbI2ZmMDAwMF0jLCMjIy4jI3xbIzk5OTk5OV0wJyl9JVwiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YWx1ZVRvb2x0aXAuZ2V0KFwiYmFja2dyb3VuZFwiKS5zZXQoXCJmaWxsXCIsIGJnQ29sb3IpO1xuXG5cbiAgICAgICAgICAgIHZhciBmaXJzdENvbG9yID0gY2hhcnQuZ2V0KFwiY29sb3JzXCIpLmdldEluZGV4KDApO1xuICAgICAgICAgICAgdmFyIHZvbHVtZVNlcmllcyA9IGNoYXJ0LnNlcmllcy5wdXNoKGFtNXh5LkNvbHVtblNlcmllcy5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTVNGVFwiLFxuICAgICAgICAgICAgICAgIGNsdXN0ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZmlsbDogZmlyc3RDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2U6IGZpcnN0Q29sb3IsXG4gICAgICAgICAgICAgICAgdmFsdWVZRmllbGQ6IFwiVm9sdW1lXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVYRmllbGQ6IFwiRGF0ZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlWUdyb3VwZWQ6IFwic3VtXCIsXG4gICAgICAgICAgICAgICAgeEF4aXM6IGRhdGVBeGlzLFxuICAgICAgICAgICAgICAgIHlBeGlzOiB2b2x1bWVBeGlzLFxuICAgICAgICAgICAgICAgIGxlZ2VuZFZhbHVlVGV4dDogXCJ7dmFsdWVZfVwiLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IGFtNS5Ub29sdGlwLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsVGV4dDogXCJ7dmFsdWVZfVwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdm9sdW1lU2VyaWVzLmNvbHVtbnMudGVtcGxhdGUuc2V0QWxsKHtcbiAgICAgICAgICAgICAgICAvL3N0cm9rZVdpZHRoOiAwLjUsXG4gICAgICAgICAgICAgICAgLy9zdHJva2VPcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIC8vc3Ryb2tlOiBhbTUuY29sb3IoMHhmZmZmZmYpXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAvLyBBZGQgbGVnZW5kIHRvIGF4aXMgaGVhZGVyXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvYXhlcy9heGlzLWhlYWRlcnMvXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvbGVnZW5kLXh5LXNlcmllcy9cbiAgICAgICAgICAgIHZhciB2YWx1ZUxlZ2VuZCA9IHZhbHVlQXhpcy5heGlzSGVhZGVyLmNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgYW01LkxlZ2VuZC5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgICAgICB1c2VEZWZhdWx0TWFya2VyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB2YWx1ZUxlZ2VuZC5kYXRhLnNldEFsbChbdmFsdWVTZXJpZXNdKTtcblxuICAgICAgICAgICAgdmFyIHZvbHVtZUxlZ2VuZCA9IHZvbHVtZUF4aXMuYXhpc0hlYWRlci5jaGlsZHJlbi5wdXNoKFxuICAgICAgICAgICAgICAgIGFtNS5MZWdlbmQubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlRGVmYXVsdE1hcmtlcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdm9sdW1lTGVnZW5kLmRhdGEuc2V0QWxsKFt2b2x1bWVTZXJpZXNdKTtcblxuXG4gICAgICAgICAgICAvLyBTdGFjayBheGVzIHZlcnRpY2FsbHlcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9heGVzLyNTdGFja2VkX2F4ZXNcbiAgICAgICAgICAgIGNoYXJ0LmxlZnRBeGVzQ29udGFpbmVyLnNldChcImxheW91dFwiLCByb290LnZlcnRpY2FsTGF5b3V0KTtcblxuXG4gICAgICAgICAgICAvLyBBZGQgY3Vyc29yXG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbWNoYXJ0cy5jb20vZG9jcy92NS9jaGFydHMveHktY2hhcnQvY3Vyc29yL1xuICAgICAgICAgICAgY2hhcnQuc2V0KFwiY3Vyc29yXCIsIGFtNXh5LlhZQ3Vyc29yLm5ldyhyb290LCB7fSkpXG5cblxuICAgICAgICAgICAgLy8gQWRkIHNjcm9sbGJhclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY2hhcnRzL3h5LWNoYXJ0L3Njcm9sbGJhcnMvXG4gICAgICAgICAgICB2YXIgc2Nyb2xsYmFyID0gY2hhcnQuc2V0KFwic2Nyb2xsYmFyWFwiLCBhbTV4eS5YWUNoYXJ0U2Nyb2xsYmFyLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTBcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdmFyIHNiRGF0ZUF4aXMgPSBzY3JvbGxiYXIuY2hhcnQueEF4ZXMucHVzaChhbTV4eS5EYXRlQXhpcy5uZXcocm9vdCwge1xuICAgICAgICAgICAgICAgIGdyb3VwRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncm91cEludGVydmFsczogW3tcbiAgICAgICAgICAgICAgICAgICAgdGltZVVuaXQ6IFwid2Vla1wiLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogMVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIGJhc2VJbnRlcnZhbDoge1xuICAgICAgICAgICAgICAgICAgICB0aW1lVW5pdDogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiBhbTV4eS5BeGlzUmVuZGVyZXJYLm5ldyhyb290LCB7fSlcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdmFyIHNiVmFsdWVBeGlzID0gc2Nyb2xsYmFyLmNoYXJ0LnlBeGVzLnB1c2goXG4gICAgICAgICAgICAgICAgYW01eHkuVmFsdWVBeGlzLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyOiBhbTV4eS5BeGlzUmVuZGVyZXJZLm5ldyhyb290LCB7fSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdmFyIHNiU2VyaWVzID0gc2Nyb2xsYmFyLmNoYXJ0LnNlcmllcy5wdXNoKGFtNXh5LkxpbmVTZXJpZXMubmV3KHJvb3QsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVlGaWVsZDogXCJBZGogQ2xvc2VcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVhGaWVsZDogXCJEYXRlXCIsXG4gICAgICAgICAgICAgICAgeEF4aXM6IHNiRGF0ZUF4aXMsXG4gICAgICAgICAgICAgICAgeUF4aXM6IHNiVmFsdWVBeGlzXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHNiU2VyaWVzLmZpbGxzLnRlbXBsYXRlLnNldEFsbCh7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC4zXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAvLyBMb2FkIGV4dGVybmFsIGRhdGFcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LmFtY2hhcnRzLmNvbS9kb2NzL3Y1L2NoYXJ0cy94eS1jaGFydC9zZXJpZXMvI1NldHRpbmdfZGF0YVxuICAgICAgICAgICAgYW01Lm5ldC5sb2FkKFwiaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy9hc3NldHMvc3RvY2svTVNGVC5jc3ZcIikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBsb2FkZWQgZGF0YVxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gYW01LkNTVlBhcnNlci5wYXJzZShyZXN1bHQucmVzcG9uc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyOiBcIixcIixcbiAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcEVtcHR5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VDb2x1bW5OYW1lczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBkYXRhIChjb252ZXJ0IGRhdGVzIGFuZCB2YWx1ZXMpXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NvciA9IGFtNS5EYXRhUHJvY2Vzc29yLm5ldyhyb290LCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGaWVsZHM6IFtcIkRhdGVcIl0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwieXl5eS1NTS1kZFwiLFxuICAgICAgICAgICAgICAgICAgICBudW1lcmljRmllbGRzOiBbXCJPcGVuXCIsIFwiSGlnaFwiLCBcIkxvd1wiLCBcIkNsb3NlXCIsIFwiQWRqIENsb3NlXCIsIFwiVm9sdW1lXCJdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLnByb2Nlc3NNYW55KGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcblxuICAgICAgICAgICAgICAgIC8vIFNldCBkYXRhXG4gICAgICAgICAgICAgICAgdmFsdWVTZXJpZXMuZGF0YS5zZXRBbGwoZGF0YSk7XG4gICAgICAgICAgICAgICAgdm9sdW1lU2VyaWVzLmRhdGEuc2V0QWxsKGRhdGEpO1xuICAgICAgICAgICAgICAgIHNiU2VyaWVzLmRhdGEuc2V0QWxsKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cblxuXG4gICAgICAgICAgICAvLyBNYWtlIHN0dWZmIGFuaW1hdGUgb24gbG9hZFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjUvY29uY2VwdHMvYW5pbWF0aW9ucy9cbiAgICAgICAgICAgIGNoYXJ0LmFwcGVhcigxMDAwLCAxMDApO1xuXG4gICAgICAgIH0pOyAvLyBlbmQgYW01LnJlYWR5KClcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9kZW1vMSgpO1xuICAgICAgICAgICAgX2RlbW8yKCk7XG4gICAgICAgICAgICBfZGVtbzMoKTtcbiAgICAgICAgfVxuICAgIH07XG59KCk7XG5cbi8vIE9uIGRvY3VtZW50IHJlYWR5XG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcbiAgICBLVEdlbmVyYWxBbUNoYXJ0c1N0b2NrLmluaXQoKTtcbn0pOyJdLCJuYW1lcyI6WyJLVEdlbmVyYWxBbUNoYXJ0c1N0b2NrIiwiY2hhcnQiLCJib2R5Q29sb3IiLCJnZXRDb21wdXRlZFN0eWxlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYmdDb2xvciIsIl9kZW1vMSIsImFtNSIsInJlYWR5Iiwicm9vdCIsIlJvb3QiLCJzZXRUaGVtZXMiLCJhbTV0aGVtZXNfQW5pbWF0ZWQiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsInB1c2giLCJhbTV4eSIsIlhZQ2hhcnQiLCJwYW5YIiwicGFuWSIsIndoZWVsWCIsIndoZWVsWSIsImxheW91dCIsInZlcnRpY2FsTGF5b3V0IiwiZ2V0Iiwic2V0Iiwidm9sdW1lQXhpc1JlbmRlcmVyIiwiQXhpc1JlbmRlcmVyWSIsIm9wcG9zaXRlIiwibGFiZWxzIiwidGVtcGxhdGUiLCJzZXRBbGwiLCJjZW50ZXJZIiwicGVyY2VudCIsIm1heFBvc2l0aW9uIiwiZmlsbCIsInZvbHVtZUF4aXMiLCJ5QXhlcyIsIlZhbHVlQXhpcyIsInJlbmRlcmVyIiwiaGVpZ2h0IiwibGF5ZXIiLCJheGlzSGVhZGVyIiwiTGFiZWwiLCJ0ZXh0IiwiZm9udFdlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwidmFsdWVBeGlzUmVuZGVyZXIiLCJwYW4iLCJ2YWx1ZUF4aXMiLCJtYXhEZXZpYXRpb24iLCJkYXRlQXhpc1JlbmRlcmVyIiwiQXhpc1JlbmRlcmVyWCIsIm1pblBvc2l0aW9uIiwiZGF0ZUF4aXMiLCJ4QXhlcyIsIkRhdGVBeGlzIiwiZ3JvdXBEYXRhIiwiYmFzZUludGVydmFsIiwidGltZVVuaXQiLCJjb3VudCIsIlRvb2x0aXAiLCJ2YWx1ZVNlcmllczEiLCJzZXJpZXMiLCJMaW5lU2VyaWVzIiwibmFtZSIsInZhbHVlWUZpZWxkIiwiY2FsY3VsYXRlQWdncmVnYXRlcyIsInZhbHVlWEZpZWxkIiwieEF4aXMiLCJ5QXhpcyIsImxlZ2VuZFZhbHVlVGV4dCIsInZhbHVlVG9vbHRpcCIsImdldEZpbGxGcm9tU3ByaXRlIiwiZ2V0U3Ryb2tlRnJvbVNwcml0ZSIsImdldExhYmVsRmlsbEZyb21TcHJpdGUiLCJhdXRvVGV4dENvbG9yIiwicG9pbnRlck9yaWVudGF0aW9uIiwibGFiZWxUZXh0IiwiZmlyc3RDb2xvciIsImdldEluZGV4Iiwidm9sdW1lU2VyaWVzIiwiQ29sdW1uU2VyaWVzIiwic3Ryb2tlIiwidmFsdWVZR3JvdXBlZCIsInRvb2x0aXAiLCJjb2x1bW5zIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VPcGFjaXR5IiwiY29sb3IiLCJ2YWx1ZUxlZ2VuZCIsIkxlZ2VuZCIsInVzZURlZmF1bHRNYXJrZXIiLCJkYXRhIiwidm9sdW1lTGVnZW5kIiwicmlnaHRBeGVzQ29udGFpbmVyIiwiWFlDdXJzb3IiLCJzY3JvbGxiYXIiLCJYWUNoYXJ0U2Nyb2xsYmFyIiwib3JpZW50YXRpb24iLCJzYkRhdGVBeGlzIiwiZ3JvdXBJbnRlcnZhbHMiLCJzYlZhbHVlQXhpcyIsInNiU2VyaWVzIiwiZmlsbHMiLCJ2aXNpYmxlIiwiZmlsbE9wYWNpdHkiLCJwcmljZTEiLCJxdWFudGl0eSIsImkiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJkYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJhcHBlYXIiLCJfZGVtbzIiLCJleHRyYU1pbiIsImZvcmNlSGlkZGVuIiwiZ3JpZCIsInAxMDAiLCJ5IiwidGhlbWVUYWdzIiwidmFsdWVZU2hvdyIsInZhbHVlU2VyaWVzMiIsInZhbHVlVG9vbHRpcDIiLCJ3aWR0aCIsImxlZ2VuZCIsInBsb3RDb250YWluZXIiLCJ2YWx1ZUxhYmVscyIsInByaWNlMiIsIl9kZW1vMyIsImluc2lkZSIsIm51bWJlckZvcm1hdCIsIm1pbkdyaWREaXN0YW5jZSIsInZhbHVlU2VyaWVzIiwiQ2FuZGxlc3RpY2tTZXJpZXMiLCJjbHVzdGVyZWQiLCJvcGVuVmFsdWVZRmllbGQiLCJsb3dWYWx1ZVlGaWVsZCIsImhpZ2hWYWx1ZVlGaWVsZCIsImxvd1ZhbHVlWUdyb3VwZWQiLCJoaWdoVmFsdWVZR3JvdXBlZCIsIm9wZW5WYWx1ZVlHcm91cGVkIiwibGVnZW5kUmFuZ2VWYWx1ZVRleHQiLCJsZWZ0QXhlc0NvbnRhaW5lciIsIm5ldCIsImxvYWQiLCJ0aGVuIiwicmVzdWx0IiwiQ1NWUGFyc2VyIiwicGFyc2UiLCJyZXNwb25zZSIsImRlbGltaXRlciIsInJldmVyc2UiLCJza2lwRW1wdHkiLCJ1c2VDb2x1bW5OYW1lcyIsInByb2Nlc3NvciIsIkRhdGFQcm9jZXNzb3IiLCJkYXRlRmllbGRzIiwiZGF0ZUZvcm1hdCIsIm51bWVyaWNGaWVsZHMiLCJwcm9jZXNzTWFueSIsImNvbnNvbGUiLCJsb2ciLCJpbml0IiwiS1RVdGlsIiwib25ET01Db250ZW50TG9hZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js ***!
  \****************************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js\": (\n    /*!***************************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js ***!\n      \\***************************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsAmchartsStockChartsJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralAmChartsStock = function () {\\n  // Shared variables\\n  var chart;\\n  var bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');\\n  var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-bg'); // Private functions\\n\\n  var _demo1 = function _demo1() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_1\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create chart\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\\n\\n      var chart = root.container.children.push(am5xy.XYChart[\\\"new\\\"](root, {\\n        panX: true,\\n        panY: false,\\n        wheelX: \\\"panX\\\",\\n        wheelY: \\\"zoomX\\\",\\n        layout: root.verticalLayout\\n      }));\\n      chart.get(\\\"colors\\\").set(\\\"step\\\", 2); // Create axes\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\\n      // when axes are in opposite side, they should be added in reverse order\\n\\n      var volumeAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        opposite: true\\n      });\\n      volumeAxisRenderer.labels.template.setAll({\\n        centerY: am5.percent(100),\\n        maxPosition: 0.98,\\n        fill: bodyColor\\n      });\\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: volumeAxisRenderer,\\n        height: am5.percent(30),\\n        layer: 5\\n      }));\\n      volumeAxis.axisHeader.set(\\\"paddingTop\\\", 10);\\n      volumeAxis.axisHeader.children.push(am5.Label[\\\"new\\\"](root, {\\n        text: \\\"Volume\\\",\\n        fontWeight: \\\"bold\\\",\\n        paddingTop: 5,\\n        paddingBottom: 5\\n      }));\\n      var valueAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        opposite: true,\\n        pan: \\\"zoom\\\"\\n      });\\n      valueAxisRenderer.labels.template.setAll({\\n        centerY: am5.percent(100),\\n        maxPosition: 0.98,\\n        fill: bodyColor\\n      });\\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: valueAxisRenderer,\\n        height: am5.percent(70),\\n        maxDeviation: 1\\n      }));\\n      valueAxis.axisHeader.children.push(am5.Label[\\\"new\\\"](root, {\\n        text: \\\"Value\\\",\\n        fontWeight: \\\"bold\\\",\\n        paddingBottom: 5,\\n        paddingTop: 5\\n      }));\\n      var dateAxisRenderer = am5xy.AxisRendererX[\\\"new\\\"](root, {\\n        pan: \\\"zoom\\\"\\n      });\\n      dateAxisRenderer.labels.template.setAll({\\n        minPosition: 0.01,\\n        maxPosition: 0.99,\\n        fill: bodyColor\\n      });\\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        maxDeviation: 0.5,\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: dateAxisRenderer\\n      }));\\n      dateAxis.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {})); // Add series\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\\n\\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        name: \\\"XTD\\\",\\n        valueYField: \\\"price1\\\",\\n        calculateAggregates: true,\\n        valueXField: \\\"date\\\",\\n        xAxis: dateAxis,\\n        yAxis: valueAxis,\\n        legendValueText: \\\"{valueY}\\\"\\n      }));\\n      var valueTooltip = valueSeries1.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {\\n        getFillFromSprite: false,\\n        getStrokeFromSprite: true,\\n        getLabelFillFromSprite: true,\\n        autoTextColor: false,\\n        pointerOrientation: \\\"horizontal\\\",\\n        labelText: \\\"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\\\"\\n      }));\\n      valueTooltip.get(\\\"background\\\").set(\\\"fill\\\", bgColor);\\n      var firstColor = chart.get(\\\"colors\\\").getIndex(0);\\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\\\"new\\\"](root, {\\n        name: \\\"XTD\\\",\\n        fill: firstColor,\\n        stroke: firstColor,\\n        valueYField: \\\"quantity\\\",\\n        valueXField: \\\"date\\\",\\n        valueYGrouped: \\\"sum\\\",\\n        xAxis: dateAxis,\\n        yAxis: volumeAxis,\\n        legendValueText: \\\"{valueY}\\\",\\n        tooltip: am5.Tooltip[\\\"new\\\"](root, {\\n          labelText: \\\"{valueY}\\\"\\n        })\\n      }));\\n      volumeSeries.columns.template.setAll({\\n        strokeWidth: 0.2,\\n        strokeOpacity: 1,\\n        stroke: am5.color(0xffffff)\\n      }); // Add legend to axis header\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\\n\\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\\\"new\\\"](root, {\\n        useDefaultMarker: true\\n      }));\\n      valueLegend.data.setAll([valueSeries1]);\\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\\\"new\\\"](root, {\\n        useDefaultMarker: true\\n      }));\\n      volumeLegend.data.setAll([volumeSeries]); // Stack axes vertically\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\\n\\n      chart.rightAxesContainer.set(\\\"layout\\\", root.verticalLayout); // Add cursor\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\\n\\n      chart.set(\\\"cursor\\\", am5xy.XYCursor[\\\"new\\\"](root, {})); // Add scrollbar\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\\n\\n      var scrollbar = chart.set(\\\"scrollbarX\\\", am5xy.XYChartScrollbar[\\\"new\\\"](root, {\\n        orientation: \\\"horizontal\\\",\\n        height: 50\\n      }));\\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        groupIntervals: [{\\n          timeUnit: \\\"week\\\",\\n          count: 1\\n        }],\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: am5xy.AxisRendererX[\\\"new\\\"](root, {})\\n      }));\\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: am5xy.AxisRendererY[\\\"new\\\"](root, {})\\n      }));\\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        valueYField: \\\"price1\\\",\\n        valueXField: \\\"date\\\",\\n        xAxis: sbDateAxis,\\n        yAxis: sbValueAxis\\n      }));\\n      sbSeries.fills.template.setAll({\\n        visible: true,\\n        fillOpacity: 0.3\\n      }); // Generate random data and set on series\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\\n\\n      var data = [];\\n      var price1 = 1000;\\n      var quantity = 10000;\\n\\n      for (var i = 1; i < 5000; i++) {\\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\\n\\n        if (price1 < 100) {\\n          price1 = 100;\\n        }\\n\\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\\n\\n        if (quantity < 0) {\\n          quantity *= -1;\\n        }\\n\\n        data.push({\\n          date: new Date(2010, 0, i).getTime(),\\n          price1: price1,\\n          quantity: quantity\\n        });\\n      }\\n\\n      valueSeries1.data.setAll(data);\\n      volumeSeries.data.setAll(data);\\n      sbSeries.data.setAll(data); // Make stuff animate on load\\n      // https://www.amcharts.com/docs/v5/concepts/animations/\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  var _demo2 = function _demo2() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_2\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create chart\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\\n\\n      var chart = root.container.children.push(am5xy.XYChart[\\\"new\\\"](root, {\\n        panX: true,\\n        panY: false,\\n        wheelX: \\\"panX\\\",\\n        wheelY: \\\"zoomX\\\",\\n        layout: root.verticalLayout\\n      }));\\n      chart.get(\\\"colors\\\").set(\\\"step\\\", 2); // Create axes\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\\n      // Y axis #1\\n\\n      var valueAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        opposite: true,\\n        pan: \\\"zoom\\\"\\n      });\\n      valueAxisRenderer.labels.template.setAll({\\n        centerY: am5.percent(100),\\n        maxPosition: 0.98,\\n        fill: bodyColor\\n      });\\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: valueAxisRenderer,\\n        maxDeviation: 1,\\n        extraMin: 0.2 // gives some extra space\\n\\n      })); // Y axis #2\\n\\n      var volumeAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        opposite: true\\n      });\\n      volumeAxisRenderer.labels.template.setAll({\\n        forceHidden: true,\\n        fill: bodyColor\\n      });\\n      volumeAxisRenderer.grid.template.setAll({\\n        forceHidden: true\\n      });\\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: volumeAxisRenderer,\\n        height: am5.percent(25),\\n        layer: 5,\\n        centerY: am5.p100,\\n        y: am5.p100\\n      }));\\n      volumeAxis.axisHeader.set(\\\"paddingTop\\\", 10); // X axis\\n\\n      var dateAxisRenderer = am5xy.AxisRendererX[\\\"new\\\"](root, {});\\n      dateAxisRenderer.labels.template.setAll({\\n        minPosition: 0.01,\\n        maxPosition: 0.99,\\n        fill: bodyColor\\n      });\\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: dateAxisRenderer\\n      }));\\n      dateAxis.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {\\n        themeTags: [\\\"axis\\\"]\\n      })); // Add series\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\\n\\n      var valueSeries1 = chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        name: \\\"XTD\\\",\\n        valueYField: \\\"price1\\\",\\n        calculateAggregates: true,\\n        valueYShow: \\\"valueYChangeSelectionPercent\\\",\\n        valueXField: \\\"date\\\",\\n        xAxis: dateAxis,\\n        yAxis: valueAxis,\\n        legendValueText: \\\"{valueY}\\\"\\n      }));\\n      var valueSeries2 = chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        name: \\\"BTD\\\",\\n        valueYField: \\\"price2\\\",\\n        calculateAggregates: true,\\n        valueYShow: \\\"valueYChangeSelectionPercent\\\",\\n        valueXField: \\\"date\\\",\\n        xAxis: dateAxis,\\n        yAxis: valueAxis,\\n        legendValueText: \\\"{valueY}\\\"\\n      })); // Add series tooltips\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Tooltips\\n\\n      var valueTooltip = valueSeries1.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {\\n        getFillFromSprite: false,\\n        getStrokeFromSprite: true,\\n        getLabelFillFromSprite: true,\\n        autoTextColor: false,\\n        pointerOrientation: \\\"horizontal\\\",\\n        labelText: \\\"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\\\"\\n      }));\\n      valueTooltip.get(\\\"background\\\").set(\\\"fill\\\", bgColor);\\n      var valueTooltip2 = valueSeries2.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {\\n        getFillFromSprite: false,\\n        getStrokeFromSprite: true,\\n        getLabelFillFromSprite: true,\\n        autoTextColor: false,\\n        pointerOrientation: \\\"horizontal\\\",\\n        labelText: \\\"{name}: {valueY} {valueYChangePercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\\\"\\n      }));\\n      valueTooltip2.get(\\\"background\\\").set(\\\"fill\\\", bgColor);\\n      var firstColor = chart.get(\\\"colors\\\").getIndex(0);\\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\\\"new\\\"](root, {\\n        name: \\\"XTD\\\",\\n        fill: firstColor,\\n        stroke: firstColor,\\n        valueYField: \\\"quantity\\\",\\n        valueXField: \\\"date\\\",\\n        valueYGrouped: \\\"sum\\\",\\n        xAxis: dateAxis,\\n        yAxis: volumeAxis,\\n        legendValueText: \\\"{valueY}\\\",\\n        tooltip: am5.Tooltip[\\\"new\\\"](root, {\\n          labelText: \\\"{valueY}\\\"\\n        })\\n      }));\\n      volumeSeries.columns.template.setAll({\\n        width: am5.percent(40),\\n        strokeWidth: 0.2,\\n        strokeOpacity: 1,\\n        stroke: am5.color(0xffffff)\\n      }); // Add legend to axis header\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\\n\\n      var legend = chart.plotContainer.children.push(am5.Legend[\\\"new\\\"](root, {\\n        useDefaultMarker: true\\n      }));\\n      legend.labels.template.setAll({\\n        fill: bodyColor\\n      });\\n      legend.valueLabels.template.setAll({\\n        fill: bodyColor\\n      });\\n      legend.data.setAll([valueSeries1, valueSeries2]); // Add cursor\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\\n\\n      chart.set(\\\"cursor\\\", am5xy.XYCursor[\\\"new\\\"](root, {})); // Add scrollbar\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\\n\\n      var scrollbar = chart.set(\\\"scrollbarX\\\", am5xy.XYChartScrollbar[\\\"new\\\"](root, {\\n        orientation: \\\"horizontal\\\",\\n        height: 50\\n      }));\\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        groupIntervals: [{\\n          timeUnit: \\\"week\\\",\\n          count: 1\\n        }],\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: am5xy.AxisRendererX[\\\"new\\\"](root, {})\\n      }));\\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: am5xy.AxisRendererY[\\\"new\\\"](root, {})\\n      }));\\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        valueYField: \\\"price1\\\",\\n        valueXField: \\\"date\\\",\\n        xAxis: sbDateAxis,\\n        yAxis: sbValueAxis\\n      }));\\n      sbSeries.fills.template.setAll({\\n        visible: true,\\n        fillOpacity: 0.3\\n      }); // Generate random data and set on series\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\\n\\n      var data = [];\\n      var price1 = 1000;\\n      var price2 = 2000;\\n      var quantity = 10000;\\n\\n      for (var i = 1; i < 5000; i++) {\\n        price1 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\\n        price2 += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 20);\\n\\n        if (price1 < 100) {\\n          price1 = 100;\\n        }\\n\\n        if (price2 < 100) {\\n          price2 = 100;\\n        }\\n\\n        quantity += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 500);\\n\\n        if (quantity < 0) {\\n          quantity *= -1;\\n        }\\n\\n        data.push({\\n          date: new Date(2010, 0, i).getTime(),\\n          price1: price1,\\n          price2: price2,\\n          quantity: quantity\\n        });\\n      }\\n\\n      valueSeries1.data.setAll(data);\\n      valueSeries2.data.setAll(data);\\n      volumeSeries.data.setAll(data);\\n      sbSeries.data.setAll(data); // Make stuff animate on load\\n      // https://www.amcharts.com/docs/v5/concepts/animations/\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  var _demo3 = function _demo3() {\\n    // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\\n    am5.ready(function () {\\n      // Create root element\\n      // https://www.amcharts.com/docs/v5/getting-started/#Root_element\\n      var root = am5.Root[\\\"new\\\"](\\\"kt_amcharts_3\\\"); // Set themes\\n      // https://www.amcharts.com/docs/v5/concepts/themes/\\n\\n      root.setThemes([am5themes_Animated[\\\"new\\\"](root)]); // Create chart\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/\\n\\n      var chart = root.container.children.push(am5xy.XYChart[\\\"new\\\"](root, {\\n        panX: true,\\n        panY: false,\\n        wheelX: \\\"panX\\\",\\n        wheelY: \\\"zoomX\\\",\\n        layout: root.verticalLayout\\n      }));\\n      chart.get(\\\"colors\\\").set(\\\"step\\\", 2); // Create axes\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\\n\\n      var valueAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        inside: true\\n      });\\n      valueAxisRenderer.labels.template.setAll({\\n        centerY: am5.percent(100),\\n        maxPosition: 0.98,\\n        fill: bodyColor\\n      });\\n      var valueAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: valueAxisRenderer,\\n        height: am5.percent(70)\\n      }));\\n      valueAxis.axisHeader.children.push(am5.Label[\\\"new\\\"](root, {\\n        text: \\\"Value\\\",\\n        fontWeight: \\\"bold\\\",\\n        paddingBottom: 5,\\n        paddingTop: 5\\n      }));\\n      var volumeAxisRenderer = am5xy.AxisRendererY[\\\"new\\\"](root, {\\n        inside: true\\n      });\\n      volumeAxisRenderer.labels.template.setAll({\\n        centerY: am5.percent(100),\\n        maxPosition: 0.98,\\n        fill: bodyColor\\n      });\\n      var volumeAxis = chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: volumeAxisRenderer,\\n        height: am5.percent(30),\\n        layer: 5,\\n        numberFormat: \\\"#a\\\"\\n      }));\\n      volumeAxis.axisHeader.set(\\\"paddingTop\\\", 10);\\n      volumeAxis.axisHeader.children.push(am5.Label[\\\"new\\\"](root, {\\n        text: \\\"Volume\\\",\\n        fontWeight: \\\"bold\\\",\\n        paddingTop: 5,\\n        paddingBottom: 5\\n      }));\\n      var dateAxisRenderer = am5xy.AxisRendererX[\\\"new\\\"](root, {});\\n      dateAxisRenderer.labels.template.setAll({\\n        minPosition: 0.01,\\n        maxPosition: 0.99,\\n        minGridDistance: 40,\\n        fill: bodyColor\\n      });\\n      var dateAxis = chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        //groupCount: 20,\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: dateAxisRenderer\\n      }));\\n      dateAxis.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {}));\\n      var color = bgColor; // Add series\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\\n\\n      var valueSeries = chart.series.push(am5xy.CandlestickSeries[\\\"new\\\"](root, {\\n        fill: color,\\n        clustered: false,\\n        calculateAggregates: true,\\n        stroke: color,\\n        name: \\\"MSFT\\\",\\n        xAxis: dateAxis,\\n        yAxis: valueAxis,\\n        valueYField: \\\"Close\\\",\\n        openValueYField: \\\"Open\\\",\\n        lowValueYField: \\\"Low\\\",\\n        highValueYField: \\\"High\\\",\\n        valueXField: \\\"Date\\\",\\n        lowValueYGrouped: \\\"low\\\",\\n        highValueYGrouped: \\\"high\\\",\\n        openValueYGrouped: \\\"open\\\",\\n        valueYGrouped: \\\"close\\\",\\n        legendValueText: \\\"open: {openValueY} low: {lowValueY} high: {highValueY} close: {valueY}\\\",\\n        legendRangeValueText: \\\"{valueYClose}\\\"\\n      }));\\n      var valueTooltip = valueSeries.set(\\\"tooltip\\\", am5.Tooltip[\\\"new\\\"](root, {\\n        getFillFromSprite: false,\\n        getStrokeFromSprite: true,\\n        getLabelFillFromSprite: true,\\n        autoTextColor: false,\\n        pointerOrientation: \\\"horizontal\\\",\\n        labelText: \\\"{name}: {valueY} {valueYChangePreviousPercent.formatNumber('[#00ff00]+#,###.##|[#ff0000]#,###.##|[#999999]0')}%\\\"\\n      }));\\n      valueTooltip.get(\\\"background\\\").set(\\\"fill\\\", bgColor);\\n      var firstColor = chart.get(\\\"colors\\\").getIndex(0);\\n      var volumeSeries = chart.series.push(am5xy.ColumnSeries[\\\"new\\\"](root, {\\n        name: \\\"MSFT\\\",\\n        clustered: false,\\n        fill: firstColor,\\n        stroke: firstColor,\\n        valueYField: \\\"Volume\\\",\\n        valueXField: \\\"Date\\\",\\n        valueYGrouped: \\\"sum\\\",\\n        xAxis: dateAxis,\\n        yAxis: volumeAxis,\\n        legendValueText: \\\"{valueY}\\\",\\n        tooltip: am5.Tooltip[\\\"new\\\"](root, {\\n          labelText: \\\"{valueY}\\\"\\n        })\\n      }));\\n      volumeSeries.columns.template.setAll({//strokeWidth: 0.5,\\n        //strokeOpacity: 1,\\n        //stroke: am5.color(0xffffff)\\n      }); // Add legend to axis header\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\\n\\n      var valueLegend = valueAxis.axisHeader.children.push(am5.Legend[\\\"new\\\"](root, {\\n        useDefaultMarker: true\\n      }));\\n      valueLegend.data.setAll([valueSeries]);\\n      var volumeLegend = volumeAxis.axisHeader.children.push(am5.Legend[\\\"new\\\"](root, {\\n        useDefaultMarker: true\\n      }));\\n      volumeLegend.data.setAll([volumeSeries]); // Stack axes vertically\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Stacked_axes\\n\\n      chart.leftAxesContainer.set(\\\"layout\\\", root.verticalLayout); // Add cursor\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\\n\\n      chart.set(\\\"cursor\\\", am5xy.XYCursor[\\\"new\\\"](root, {})); // Add scrollbar\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/\\n\\n      var scrollbar = chart.set(\\\"scrollbarX\\\", am5xy.XYChartScrollbar[\\\"new\\\"](root, {\\n        orientation: \\\"horizontal\\\",\\n        height: 50\\n      }));\\n      var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.DateAxis[\\\"new\\\"](root, {\\n        groupData: true,\\n        groupIntervals: [{\\n          timeUnit: \\\"week\\\",\\n          count: 1\\n        }],\\n        baseInterval: {\\n          timeUnit: \\\"day\\\",\\n          count: 1\\n        },\\n        renderer: am5xy.AxisRendererX[\\\"new\\\"](root, {})\\n      }));\\n      var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis[\\\"new\\\"](root, {\\n        renderer: am5xy.AxisRendererY[\\\"new\\\"](root, {})\\n      }));\\n      var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries[\\\"new\\\"](root, {\\n        valueYField: \\\"Adj Close\\\",\\n        valueXField: \\\"Date\\\",\\n        xAxis: sbDateAxis,\\n        yAxis: sbValueAxis\\n      }));\\n      sbSeries.fills.template.setAll({\\n        visible: true,\\n        fillOpacity: 0.3\\n      }); // Load external data\\n      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Setting_data\\n\\n      am5.net.load(\\\"https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv\\\").then(function (result) {\\n        // Parse loaded data\\n        var data = am5.CSVParser.parse(result.response, {\\n          delimiter: \\\",\\\",\\n          reverse: true,\\n          skipEmpty: true,\\n          useColumnNames: true\\n        }); // Process data (convert dates and values)\\n\\n        var processor = am5.DataProcessor[\\\"new\\\"](root, {\\n          dateFields: [\\\"Date\\\"],\\n          dateFormat: \\\"yyyy-MM-dd\\\",\\n          numericFields: [\\\"Open\\\", \\\"High\\\", \\\"Low\\\", \\\"Close\\\", \\\"Adj Close\\\", \\\"Volume\\\"]\\n        });\\n        processor.processMany(data);\\n        console.log(data); // Set data\\n\\n        valueSeries.data.setAll(data);\\n        volumeSeries.data.setAll(data);\\n        sbSeries.data.setAll(data);\\n      }); // Make stuff animate on load\\n      // https://www.amcharts.com/docs/v5/concepts/animations/\\n\\n      chart.appear(1000, 100);\\n    }); // end am5.ready()\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      _demo1();\\n\\n      _demo2();\\n\\n      _demo3();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralAmChartsStock.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/amcharts/stock-charts.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/charts/amcharts/stock-charts.js"]();
/******/ 	
/******/ })()
;