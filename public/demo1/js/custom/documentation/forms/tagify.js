/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/forms/tagify.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/forms/tagify.js ***!
  \***********************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTFormsTagifyDemos = function () {\n  // Private functions\n  var example1 = function example1(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_1\");\n    var input2 = document.querySelector(\"#kt_tagify_2\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1, {\n      placeholder: \"Type something\"\n    });\n    new Tagify(input2, {\n      placeholder: \"Type something\"\n    });\n  };\n\n  var example2 = function example2(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_3\");\n    var input2 = document.querySelector(\"#kt_tagify_4\");\n    var input3 = document.querySelector(\"#kt_tagify_5\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1);\n    new Tagify(input2);\n    new Tagify(input3);\n  };\n\n  var example3 = function example3(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_6\");\n    var input2 = document.querySelector(\"#kt_tagify_7\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1, {\n      whitelist: [\"A# .NET\", \"A# (Axiom)\", \"A-0 System\", \"A+\", \"A++\", \"ABAP\", \"ABC\", \"ABC ALGOL\", \"ABSET\", \"ABSYS\", \"ACC\", \"Accent\", \"Ace DASL\", \"ACL2\", \"Avicsoft\", \"ACT-III\", \"Action!\", \"ActionScript\", \"Ada\", \"Adenine\", \"Agda\", \"Agilent VEE\", \"Agora\", \"AIMMS\", \"Alef\", \"ALF\", \"ALGOL 58\", \"ALGOL 60\", \"ALGOL 68\", \"ALGOL W\", \"Alice\", \"Alma-0\", \"AmbientTalk\", \"Amiga E\", \"AMOS\", \"AMPL\", \"Apex (Salesforce.com)\", \"APL\", \"AppleScript\", \"Arc\", \"ARexx\", \"Argus\", \"AspectJ\", \"Assembly language\", \"ATS\", \"Ateji PX\", \"AutoHotkey\", \"Autocoder\", \"AutoIt\", \"AutoLISP / Visual LISP\", \"Averest\", \"AWK\", \"Axum\", \"Active Server Pages\", \"ASP.NET\", \"B\", \"Babbage\", \"Bash\", \"BASIC\", \"bc\", \"BCPL\", \"BeanShell\", \"Batch (Windows/Dos)\", \"Bertrand\", \"BETA\", \"Bigwig\", \"Bistro\", \"BitC\", \"BLISS\", \"Blockly\", \"BlooP\", \"Blue\", \"Boo\", \"Boomerang\", \"Bourne shell (including bash and ksh)\", \"BREW\", \"BPEL\", \"B\", \"C--\", \"C++ – ISO/IEC 14882\", \"C# – ISO/IEC 23270\", \"C/AL\", \"Caché ObjectScript\", \"C Shell\", \"Caml\", \"Cayenne\", \"CDuce\", \"Cecil\", \"Cesil\", \"Céu\", \"Ceylon\", \"CFEngine\", \"CFML\", \"Cg\", \"Ch\", \"Chapel\", \"Charity\", \"Charm\", \"Chef\", \"CHILL\", \"CHIP-8\", \"chomski\", \"ChucK\", \"CICS\", \"Cilk\", \"Citrine (programming language)\", \"CL (IBM)\", \"Claire\", \"Clarion\", \"Clean\", \"Clipper\", \"CLIPS\", \"CLIST\", \"Clojure\", \"CLU\", \"CMS-2\", \"COBOL – ISO/IEC 1989\", \"CobolScript – COBOL Scripting language\", \"Cobra\", \"CODE\", \"CoffeeScript\", \"ColdFusion\", \"COMAL\", \"Combined Programming Language (CPL)\", \"COMIT\", \"Common Intermediate Language (CIL)\", \"Common Lisp (also known as CL)\", \"COMPASS\", \"Component Pascal\", \"Constraint Handling Rules (CHR)\", \"COMTRAN\", \"Converge\", \"Cool\", \"Coq\", \"Coral 66\", \"Corn\", \"CorVision\", \"COWSEL\", \"CPL\", \"CPL\", \"Cryptol\", \"csh\", \"Csound\", \"CSP\", \"CUDA\", \"Curl\", \"Curry\", \"Cybil\", \"Cyclone\", \"Cython\", \"Java\", \"Javascript\", \"M2001\", \"M4\", \"M#\", \"Machine code\", \"MAD (Michigan Algorithm Decoder)\", \"MAD/I\", \"Magik\", \"Magma\", \"make\", \"Maple\", \"MAPPER now part of BIS\", \"MARK-IV now VISION:BUILDER\", \"Mary\", \"MASM Microsoft Assembly x86\", \"MATH-MATIC\", \"Mathematica\", \"MATLAB\", \"Maxima (see also Macsyma)\", \"Max (Max Msp – Graphical Programming Environment)\", \"Maya (MEL)\", \"MDL\", \"Mercury\", \"Mesa\", \"Metafont\", \"Microcode\", \"MicroScript\", \"MIIS\", \"Milk (programming language)\", \"MIMIC\", \"Mirah\", \"Miranda\", \"MIVA Script\", \"ML\", \"Model 204\", \"Modelica\", \"Modula\", \"Modula-2\", \"Modula-3\", \"Mohol\", \"MOO\", \"Mortran\", \"Mouse\", \"MPD\", \"Mathcad\", \"MSIL – deprecated name for CIL\", \"MSL\", \"MUMPS\", \"Mystic Programming L\"],\n      maxTags: 10,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"tagify__inline__suggestions\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    });\n    new Tagify(input2, {\n      whitelist: [\"A# .NET\", \"A# (Axiom)\", \"A-0 System\", \"A+\", \"A++\", \"ABAP\", \"ABC\", \"ABC ALGOL\", \"ABSET\", \"ABSYS\", \"ACC\", \"Accent\", \"Ace DASL\", \"ACL2\", \"Avicsoft\", \"ACT-III\", \"Action!\", \"ActionScript\", \"Ada\", \"Adenine\", \"Agda\", \"Agilent VEE\", \"Agora\", \"AIMMS\", \"Alef\", \"ALF\", \"ALGOL 58\", \"ALGOL 60\", \"ALGOL 68\", \"ALGOL W\", \"Alice\", \"Alma-0\", \"AmbientTalk\", \"Amiga E\", \"AMOS\", \"AMPL\", \"Apex (Salesforce.com)\", \"APL\", \"AppleScript\", \"Arc\", \"ARexx\", \"Argus\", \"AspectJ\", \"Assembly language\", \"ATS\", \"Ateji PX\", \"AutoHotkey\", \"Autocoder\", \"AutoIt\", \"AutoLISP / Visual LISP\", \"Averest\", \"AWK\", \"Axum\", \"Active Server Pages\", \"ASP.NET\", \"B\", \"Babbage\", \"Bash\", \"BASIC\", \"bc\", \"BCPL\", \"BeanShell\", \"Batch (Windows/Dos)\", \"Bertrand\", \"BETA\", \"Bigwig\", \"Bistro\", \"BitC\", \"BLISS\", \"Blockly\", \"BlooP\", \"Blue\", \"Boo\", \"Boomerang\", \"Bourne shell (including bash and ksh)\", \"BREW\", \"BPEL\", \"B\", \"C--\", \"C++ – ISO/IEC 14882\", \"C# – ISO/IEC 23270\", \"C/AL\", \"Caché ObjectScript\", \"C Shell\", \"Caml\", \"Cayenne\", \"CDuce\", \"Cecil\", \"Cesil\", \"Céu\", \"Ceylon\", \"CFEngine\", \"CFML\", \"Cg\", \"Ch\", \"Chapel\", \"Charity\", \"Charm\", \"Chef\", \"CHILL\", \"CHIP-8\", \"chomski\", \"ChucK\", \"CICS\", \"Cilk\", \"Citrine (programming language)\", \"CL (IBM)\", \"Claire\", \"Clarion\", \"Clean\", \"Clipper\", \"CLIPS\", \"CLIST\", \"Clojure\", \"CLU\", \"CMS-2\", \"COBOL – ISO/IEC 1989\", \"CobolScript – COBOL Scripting language\", \"Cobra\", \"CODE\", \"CoffeeScript\", \"ColdFusion\", \"COMAL\", \"Combined Programming Language (CPL)\", \"COMIT\", \"Common Intermediate Language (CIL)\", \"Common Lisp (also known as CL)\", \"COMPASS\", \"Component Pascal\", \"Constraint Handling Rules (CHR)\", \"COMTRAN\", \"Converge\", \"Cool\", \"Coq\", \"Coral 66\", \"Corn\", \"CorVision\", \"COWSEL\", \"CPL\", \"CPL\", \"Cryptol\", \"csh\", \"Csound\", \"CSP\", \"CUDA\", \"Curl\", \"Curry\", \"Cybil\", \"Cyclone\", \"Cython\", \"Java\", \"Javascript\", \"M2001\", \"M4\", \"M#\", \"Machine code\", \"MAD (Michigan Algorithm Decoder)\", \"MAD/I\", \"Magik\", \"Magma\", \"make\", \"Maple\", \"MAPPER now part of BIS\", \"MARK-IV now VISION:BUILDER\", \"Mary\", \"MASM Microsoft Assembly x86\", \"MATH-MATIC\", \"Mathematica\", \"MATLAB\", \"Maxima (see also Macsyma)\", \"Max (Max Msp – Graphical Programming Environment)\", \"Maya (MEL)\", \"MDL\", \"Mercury\", \"Mesa\", \"Metafont\", \"Microcode\", \"MicroScript\", \"MIIS\", \"Milk (programming language)\", \"MIMIC\", \"Mirah\", \"Miranda\", \"MIVA Script\", \"ML\", \"Model 204\", \"Modelica\", \"Modula\", \"Modula-2\", \"Modula-3\", \"Mohol\", \"MOO\", \"Mortran\", \"Mouse\", \"MPD\", \"Mathcad\", \"MSIL – deprecated name for CIL\", \"MSL\", \"MUMPS\", \"Mystic Programming L\"],\n      maxTags: 10,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    });\n  };\n\n  var example4 = function example4(element) {\n    // The DOM elements you wish to replace with Tagify\n    var input1 = document.querySelector(\"#kt_tagify_8\"); // Initialize Tagify components on the above inputs\n\n    new Tagify(input1);\n  };\n\n  var exampleCustomSuggestions = function exampleCustomSuggestions() {\n    var input = document.querySelector('#kt_tagify_custom'),\n        // Init Tagify script on the above inputs\n    tagify = new Tagify(input, {\n      whitelist: [\"Bootstrap\", \"Angular\", \"React\", \"Vue\"],\n      placeholder: \"Type something\",\n      enforceWhitelist: true\n    }); // Suggestions\n\n    var suggestions = document.querySelector('#kt_tagify_custom_suggestions'); // Suggestion item click\n\n    KTUtil.on(suggestions, '[data-kt-suggestion=\"true\"]', 'click', function (e) {\n      tagify.addTags([this.innerText]);\n    });\n  };\n\n  var exampleCountry = function exampleCountry() {\n    var tagify = new Tagify(document.querySelector('#kt_tagify_country'), {\n      delimiters: null,\n      templates: {\n        tag: function tag(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<tag title='\".concat(tagData.value, \"' contenteditable='false' spellcheck=\\\"false\\\" class='tagify__tag \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"' \").concat(this.getAttributes(tagData), \">\\n                                <x title='remove tag' class='tagify__tag__removeBtn'></x>\\n                                <div class=\\\"d-flex align-items-center\\\">\\n                                    \").concat(tagData.code ? \"<img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\" src='\".concat(countryPath, \"' />\") : '', \"\\n                                    <span class='tagify__tag-text'>\").concat(tagData.value, \"</span>\\n                                </div>\\n                            </tag>\"); // _ESCAPE_END_\n          } catch (err) {}\n        },\n        dropdownItem: function dropdownItem(tagData) {\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\s+/g, '-') + '.svg';\n\n          try {\n            // _ESCAPE_START_\n            return \"<div class='tagify__dropdown__item \".concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'>\\n                                    <img onerror=\\\"this.style.visibility = 'hidden'\\\" class=\\\"w-25px rounded-circle me-2\\\"\\n                                         src='\").concat(countryPath, \"' />\\n                                    <span>\").concat(tagData.value, \"</span>\\n                                </div>\"); // _ESCAPE_END_\n          } catch (err) {}\n        }\n      },\n      enforceWhitelist: true,\n      whitelist: [{\n        value: 'Argentina',\n        code: 'AR'\n      }, {\n        value: 'Australia',\n        code: 'AU',\n        searchBy: 'beach, sub-tropical'\n      }, {\n        value: 'Austria',\n        code: 'AT'\n      }, {\n        value: 'Brazil',\n        code: 'BR'\n      }, {\n        value: 'China',\n        code: 'CN'\n      }, {\n        value: 'Egypt',\n        code: 'EG'\n      }, {\n        value: 'Finland',\n        code: 'FI'\n      }, {\n        value: 'France',\n        code: 'FR'\n      }, {\n        value: 'Germany',\n        code: 'DE'\n      }, {\n        value: 'Hong Kong',\n        code: 'HK'\n      }, {\n        value: 'Hungary',\n        code: 'HU'\n      }, {\n        value: 'Iceland',\n        code: 'IS'\n      }, {\n        value: 'India',\n        code: 'IN'\n      }, {\n        value: 'Indonesia',\n        code: 'ID'\n      }, {\n        value: 'Italy',\n        code: 'IT'\n      }, {\n        value: 'Jamaica',\n        code: 'JM'\n      }, {\n        value: 'Japan',\n        code: 'JP'\n      }, {\n        value: 'Jersey',\n        code: 'JE'\n      }, {\n        value: 'Luxembourg',\n        code: 'LU'\n      }, {\n        value: 'Mexico',\n        code: 'MX'\n      }, {\n        value: 'Netherlands',\n        code: 'NL'\n      }, {\n        value: 'New Zealand',\n        code: 'NZ'\n      }, {\n        value: 'Norway',\n        code: 'NO'\n      }, {\n        value: 'Philippines',\n        code: 'PH'\n      }, {\n        value: 'Singapore',\n        code: 'SG'\n      }, {\n        value: 'South Korea',\n        code: 'KR'\n      }, {\n        value: 'Sweden',\n        code: 'SE'\n      }, {\n        value: 'Switzerland',\n        code: 'CH'\n      }, {\n        value: 'Thailand',\n        code: 'TH'\n      }, {\n        value: 'Ukraine',\n        code: 'UA'\n      }, {\n        value: 'United Kingdom',\n        code: 'GB'\n      }, {\n        value: 'United States',\n        code: 'US'\n      }, {\n        value: 'Vietnam',\n        code: 'VN'\n      }],\n      dropdown: {\n        enabled: 1,\n        // suggest tags after a single character input\n        classname: 'extra-properties' // custom class for the suggestions dropdown\n\n      } // map tags' values to this property name, so this property will be the actual value and not the printed value on the screen\n\n    }); // add the first 2 tags and makes them readonly\n\n    var tagsToAdd = tagify.settings.whitelist.slice(0, 2);\n    tagify.addTags(tagsToAdd);\n  };\n\n  var exampleUsers = function exampleUsers() {\n    var inputElm = document.querySelector('#kt_tagify_users');\n    var usersList = [{\n      value: 1,\n      name: 'Emma Smith',\n      avatar: 'avatars/300-6.jpg',\n      email: 'e.smith@kpmg.com.au'\n    }, {\n      value: 2,\n      name: 'Max Smith',\n      avatar: 'avatars/300-1.jpg',\n      email: 'max@kt.com'\n    }, {\n      value: 3,\n      name: 'Sean Bean',\n      avatar: 'avatars/300-5.jpg',\n      email: 'sean@dellito.com'\n    }, {\n      value: 4,\n      name: 'Brian Cox',\n      avatar: 'avatars/300-25.jpg',\n      email: 'brian@exchange.com'\n    }, {\n      value: 5,\n      name: 'Francis Mitcham',\n      avatar: 'avatars/300-9.jpg',\n      email: 'f.mitcham@kpmg.com.au'\n    }, {\n      value: 6,\n      name: 'Dan Wilson',\n      avatar: 'avatars/300-23.jpg',\n      email: 'dam@consilting.com'\n    }, {\n      value: 7,\n      name: 'Ana Crown',\n      avatar: 'avatars/300-12.jpg',\n      email: 'ana.cf@limtel.com'\n    }, {\n      value: 8,\n      name: 'John Miller',\n      avatar: 'avatars/300-13.jpg',\n      email: 'miller@mapple.com'\n    }];\n\n    function tagTemplate(tagData) {\n      return \"\\n                <tag title=\\\"\".concat(tagData.title || tagData.email, \"\\\"\\n                        contenteditable='false'\\n                        spellcheck='false'\\n                        tabIndex=\\\"-1\\\"\\n                        class=\\\"\").concat(this.settings.classNames.tag, \" \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"\\\"\\n                        \").concat(this.getAttributes(tagData), \">\\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <div class='tagify__tag__avatar-wrap ps-0'>\\n                            <img onerror=\\\"this.style.visibility='hidden'\\\" class=\\\"rounded-circle w-25px me-2\\\" src=\\\"\").concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                        </div>\\n                        <span class='tagify__tag-text'>\").concat(tagData.name, \"</span>\\n                    </div>\\n                </tag>\\n            \");\n    }\n\n    function suggestionItemTemplate(tagData) {\n      return \"\\n                <div \".concat(this.getAttributes(tagData), \"\\n                    class='tagify__dropdown__item d-flex align-items-center \").concat(tagData[\"class\"] ? tagData[\"class\"] : \"\", \"'\\n                    tabindex=\\\"0\\\"\\n                    role=\\\"option\\\">\\n\\n                    \").concat(tagData.avatar ? \"\\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\\n                                <img onerror=\\\"this.style.visibility='hidden'\\\"  class=\\\"rounded-circle w-50px me-2\\\" src=\\\"\".concat(hostUrl, \"media/\").concat(tagData.avatar, \"\\\">\\n                            </div>\") : '', \"\\n\\n                    <div class=\\\"d-flex flex-column\\\">\\n                        <strong>\").concat(tagData.name, \"</strong>\\n                        <span>\").concat(tagData.email, \"</span>\\n                    </div>\\n                </div>\\n            \");\n    } // initialize Tagify on the above input node reference\n\n\n    var tagify = new Tagify(inputElm, {\n      tagTextProp: 'name',\n      // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\n      enforceWhitelist: true,\n      skipInvalid: true,\n      // do not remporarily add invalid tags\n      dropdown: {\n        closeOnSelect: false,\n        enabled: 0,\n        classname: 'users-list',\n        searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\n\n      },\n      templates: {\n        tag: tagTemplate,\n        dropdownItem: suggestionItemTemplate\n      },\n      whitelist: usersList\n    });\n    tagify.on('dropdown:show dropdown:updated', onDropdownShow);\n    tagify.on('dropdown:select', onSelectSuggestion);\n    var addAllSuggestionsElm;\n\n    function onDropdownShow(e) {\n      var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\n\n      if (tagify.suggestedListItems.length > 1) {\n        addAllSuggestionsElm = getAddAllSuggestionsElm(); // insert \"addAllSuggestionsElm\" as the first element in the suggestions list\n\n        dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild);\n      }\n    }\n\n    function onSelectSuggestion(e) {\n      if (e.detail.elm == addAllSuggestionsElm) tagify.dropdown.selectAll.call(tagify);\n    } // create a \"add all\" custom suggestion element every time the dropdown changes\n\n\n    function getAddAllSuggestionsElm() {\n      // suggestions items should be based on \"dropdownItem\" template\n      return tagify.parseTemplate('dropdownItem', [{\n        \"class\": \"addAll\",\n        name: \"Add all\",\n        email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\n          return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1;\n        }, 0) + \" Members\"\n      }]);\n    }\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      example1();\n      example2();\n      example3();\n      example4();\n      exampleCustomSuggestions();\n      exampleCountry();\n      exampleUsers();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFormsTagifyDemos.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/tagify.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/forms/tagify.js":
/*!************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/forms/tagify.js ***!
  \************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/forms/tagify.js\":\n    /*!***********************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/forms/tagify.js ***!\r\n      \\***********************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationFormsTagifyJs() {\n      eval(\" // Class definition\\n\\nvar KTFormsTagifyDemos = function () {\\n  // Private functions\\n  var example1 = function example1(element) {\\n    // The DOM elements you wish to replace with Tagify\\n    var input1 = document.querySelector(\\\"#kt_tagify_1\\\");\\n    var input2 = document.querySelector(\\\"#kt_tagify_2\\\"); // Initialize Tagify components on the above inputs\\n\\n    new Tagify(input1, {\\n      placeholder: \\\"Type something\\\"\\n    });\\n    new Tagify(input2, {\\n      placeholder: \\\"Type something\\\"\\n    });\\n  };\\n\\n  var example2 = function example2(element) {\\n    // The DOM elements you wish to replace with Tagify\\n    var input1 = document.querySelector(\\\"#kt_tagify_3\\\");\\n    var input2 = document.querySelector(\\\"#kt_tagify_4\\\");\\n    var input3 = document.querySelector(\\\"#kt_tagify_5\\\"); // Initialize Tagify components on the above inputs\\n\\n    new Tagify(input1);\\n    new Tagify(input2);\\n    new Tagify(input3);\\n  };\\n\\n  var example3 = function example3(element) {\\n    // The DOM elements you wish to replace with Tagify\\n    var input1 = document.querySelector(\\\"#kt_tagify_6\\\");\\n    var input2 = document.querySelector(\\\"#kt_tagify_7\\\"); // Initialize Tagify components on the above inputs\\n\\n    new Tagify(input1, {\\n      whitelist: [\\\"A# .NET\\\", \\\"A# (Axiom)\\\", \\\"A-0 System\\\", \\\"A+\\\", \\\"A++\\\", \\\"ABAP\\\", \\\"ABC\\\", \\\"ABC ALGOL\\\", \\\"ABSET\\\", \\\"ABSYS\\\", \\\"ACC\\\", \\\"Accent\\\", \\\"Ace DASL\\\", \\\"ACL2\\\", \\\"Avicsoft\\\", \\\"ACT-III\\\", \\\"Action!\\\", \\\"ActionScript\\\", \\\"Ada\\\", \\\"Adenine\\\", \\\"Agda\\\", \\\"Agilent VEE\\\", \\\"Agora\\\", \\\"AIMMS\\\", \\\"Alef\\\", \\\"ALF\\\", \\\"ALGOL 58\\\", \\\"ALGOL 60\\\", \\\"ALGOL 68\\\", \\\"ALGOL W\\\", \\\"Alice\\\", \\\"Alma-0\\\", \\\"AmbientTalk\\\", \\\"Amiga E\\\", \\\"AMOS\\\", \\\"AMPL\\\", \\\"Apex (Salesforce.com)\\\", \\\"APL\\\", \\\"AppleScript\\\", \\\"Arc\\\", \\\"ARexx\\\", \\\"Argus\\\", \\\"AspectJ\\\", \\\"Assembly language\\\", \\\"ATS\\\", \\\"Ateji PX\\\", \\\"AutoHotkey\\\", \\\"Autocoder\\\", \\\"AutoIt\\\", \\\"AutoLISP / Visual LISP\\\", \\\"Averest\\\", \\\"AWK\\\", \\\"Axum\\\", \\\"Active Server Pages\\\", \\\"ASP.NET\\\", \\\"B\\\", \\\"Babbage\\\", \\\"Bash\\\", \\\"BASIC\\\", \\\"bc\\\", \\\"BCPL\\\", \\\"BeanShell\\\", \\\"Batch (Windows/Dos)\\\", \\\"Bertrand\\\", \\\"BETA\\\", \\\"Bigwig\\\", \\\"Bistro\\\", \\\"BitC\\\", \\\"BLISS\\\", \\\"Blockly\\\", \\\"BlooP\\\", \\\"Blue\\\", \\\"Boo\\\", \\\"Boomerang\\\", \\\"Bourne shell (including bash and ksh)\\\", \\\"BREW\\\", \\\"BPEL\\\", \\\"B\\\", \\\"C--\\\", \\\"C++ – ISO/IEC 14882\\\", \\\"C# – ISO/IEC 23270\\\", \\\"C/AL\\\", \\\"Caché ObjectScript\\\", \\\"C Shell\\\", \\\"Caml\\\", \\\"Cayenne\\\", \\\"CDuce\\\", \\\"Cecil\\\", \\\"Cesil\\\", \\\"Céu\\\", \\\"Ceylon\\\", \\\"CFEngine\\\", \\\"CFML\\\", \\\"Cg\\\", \\\"Ch\\\", \\\"Chapel\\\", \\\"Charity\\\", \\\"Charm\\\", \\\"Chef\\\", \\\"CHILL\\\", \\\"CHIP-8\\\", \\\"chomski\\\", \\\"ChucK\\\", \\\"CICS\\\", \\\"Cilk\\\", \\\"Citrine (programming language)\\\", \\\"CL (IBM)\\\", \\\"Claire\\\", \\\"Clarion\\\", \\\"Clean\\\", \\\"Clipper\\\", \\\"CLIPS\\\", \\\"CLIST\\\", \\\"Clojure\\\", \\\"CLU\\\", \\\"CMS-2\\\", \\\"COBOL – ISO/IEC 1989\\\", \\\"CobolScript – COBOL Scripting language\\\", \\\"Cobra\\\", \\\"CODE\\\", \\\"CoffeeScript\\\", \\\"ColdFusion\\\", \\\"COMAL\\\", \\\"Combined Programming Language (CPL)\\\", \\\"COMIT\\\", \\\"Common Intermediate Language (CIL)\\\", \\\"Common Lisp (also known as CL)\\\", \\\"COMPASS\\\", \\\"Component Pascal\\\", \\\"Constraint Handling Rules (CHR)\\\", \\\"COMTRAN\\\", \\\"Converge\\\", \\\"Cool\\\", \\\"Coq\\\", \\\"Coral 66\\\", \\\"Corn\\\", \\\"CorVision\\\", \\\"COWSEL\\\", \\\"CPL\\\", \\\"CPL\\\", \\\"Cryptol\\\", \\\"csh\\\", \\\"Csound\\\", \\\"CSP\\\", \\\"CUDA\\\", \\\"Curl\\\", \\\"Curry\\\", \\\"Cybil\\\", \\\"Cyclone\\\", \\\"Cython\\\", \\\"Java\\\", \\\"Javascript\\\", \\\"M2001\\\", \\\"M4\\\", \\\"M#\\\", \\\"Machine code\\\", \\\"MAD (Michigan Algorithm Decoder)\\\", \\\"MAD/I\\\", \\\"Magik\\\", \\\"Magma\\\", \\\"make\\\", \\\"Maple\\\", \\\"MAPPER now part of BIS\\\", \\\"MARK-IV now VISION:BUILDER\\\", \\\"Mary\\\", \\\"MASM Microsoft Assembly x86\\\", \\\"MATH-MATIC\\\", \\\"Mathematica\\\", \\\"MATLAB\\\", \\\"Maxima (see also Macsyma)\\\", \\\"Max (Max Msp – Graphical Programming Environment)\\\", \\\"Maya (MEL)\\\", \\\"MDL\\\", \\\"Mercury\\\", \\\"Mesa\\\", \\\"Metafont\\\", \\\"Microcode\\\", \\\"MicroScript\\\", \\\"MIIS\\\", \\\"Milk (programming language)\\\", \\\"MIMIC\\\", \\\"Mirah\\\", \\\"Miranda\\\", \\\"MIVA Script\\\", \\\"ML\\\", \\\"Model 204\\\", \\\"Modelica\\\", \\\"Modula\\\", \\\"Modula-2\\\", \\\"Modula-3\\\", \\\"Mohol\\\", \\\"MOO\\\", \\\"Mortran\\\", \\\"Mouse\\\", \\\"MPD\\\", \\\"Mathcad\\\", \\\"MSIL – deprecated name for CIL\\\", \\\"MSL\\\", \\\"MUMPS\\\", \\\"Mystic Programming L\\\"],\\n      maxTags: 10,\\n      dropdown: {\\n        maxItems: 20,\\n        // <- mixumum allowed rendered suggestions\\n        classname: \\\"tagify__inline__suggestions\\\",\\n        // <- custom classname for this dropdown, so it could be targeted\\n        enabled: 0,\\n        // <- show suggestions on focus\\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\\n\\n      }\\n    });\\n    new Tagify(input2, {\\n      whitelist: [\\\"A# .NET\\\", \\\"A# (Axiom)\\\", \\\"A-0 System\\\", \\\"A+\\\", \\\"A++\\\", \\\"ABAP\\\", \\\"ABC\\\", \\\"ABC ALGOL\\\", \\\"ABSET\\\", \\\"ABSYS\\\", \\\"ACC\\\", \\\"Accent\\\", \\\"Ace DASL\\\", \\\"ACL2\\\", \\\"Avicsoft\\\", \\\"ACT-III\\\", \\\"Action!\\\", \\\"ActionScript\\\", \\\"Ada\\\", \\\"Adenine\\\", \\\"Agda\\\", \\\"Agilent VEE\\\", \\\"Agora\\\", \\\"AIMMS\\\", \\\"Alef\\\", \\\"ALF\\\", \\\"ALGOL 58\\\", \\\"ALGOL 60\\\", \\\"ALGOL 68\\\", \\\"ALGOL W\\\", \\\"Alice\\\", \\\"Alma-0\\\", \\\"AmbientTalk\\\", \\\"Amiga E\\\", \\\"AMOS\\\", \\\"AMPL\\\", \\\"Apex (Salesforce.com)\\\", \\\"APL\\\", \\\"AppleScript\\\", \\\"Arc\\\", \\\"ARexx\\\", \\\"Argus\\\", \\\"AspectJ\\\", \\\"Assembly language\\\", \\\"ATS\\\", \\\"Ateji PX\\\", \\\"AutoHotkey\\\", \\\"Autocoder\\\", \\\"AutoIt\\\", \\\"AutoLISP / Visual LISP\\\", \\\"Averest\\\", \\\"AWK\\\", \\\"Axum\\\", \\\"Active Server Pages\\\", \\\"ASP.NET\\\", \\\"B\\\", \\\"Babbage\\\", \\\"Bash\\\", \\\"BASIC\\\", \\\"bc\\\", \\\"BCPL\\\", \\\"BeanShell\\\", \\\"Batch (Windows/Dos)\\\", \\\"Bertrand\\\", \\\"BETA\\\", \\\"Bigwig\\\", \\\"Bistro\\\", \\\"BitC\\\", \\\"BLISS\\\", \\\"Blockly\\\", \\\"BlooP\\\", \\\"Blue\\\", \\\"Boo\\\", \\\"Boomerang\\\", \\\"Bourne shell (including bash and ksh)\\\", \\\"BREW\\\", \\\"BPEL\\\", \\\"B\\\", \\\"C--\\\", \\\"C++ – ISO/IEC 14882\\\", \\\"C# – ISO/IEC 23270\\\", \\\"C/AL\\\", \\\"Caché ObjectScript\\\", \\\"C Shell\\\", \\\"Caml\\\", \\\"Cayenne\\\", \\\"CDuce\\\", \\\"Cecil\\\", \\\"Cesil\\\", \\\"Céu\\\", \\\"Ceylon\\\", \\\"CFEngine\\\", \\\"CFML\\\", \\\"Cg\\\", \\\"Ch\\\", \\\"Chapel\\\", \\\"Charity\\\", \\\"Charm\\\", \\\"Chef\\\", \\\"CHILL\\\", \\\"CHIP-8\\\", \\\"chomski\\\", \\\"ChucK\\\", \\\"CICS\\\", \\\"Cilk\\\", \\\"Citrine (programming language)\\\", \\\"CL (IBM)\\\", \\\"Claire\\\", \\\"Clarion\\\", \\\"Clean\\\", \\\"Clipper\\\", \\\"CLIPS\\\", \\\"CLIST\\\", \\\"Clojure\\\", \\\"CLU\\\", \\\"CMS-2\\\", \\\"COBOL – ISO/IEC 1989\\\", \\\"CobolScript – COBOL Scripting language\\\", \\\"Cobra\\\", \\\"CODE\\\", \\\"CoffeeScript\\\", \\\"ColdFusion\\\", \\\"COMAL\\\", \\\"Combined Programming Language (CPL)\\\", \\\"COMIT\\\", \\\"Common Intermediate Language (CIL)\\\", \\\"Common Lisp (also known as CL)\\\", \\\"COMPASS\\\", \\\"Component Pascal\\\", \\\"Constraint Handling Rules (CHR)\\\", \\\"COMTRAN\\\", \\\"Converge\\\", \\\"Cool\\\", \\\"Coq\\\", \\\"Coral 66\\\", \\\"Corn\\\", \\\"CorVision\\\", \\\"COWSEL\\\", \\\"CPL\\\", \\\"CPL\\\", \\\"Cryptol\\\", \\\"csh\\\", \\\"Csound\\\", \\\"CSP\\\", \\\"CUDA\\\", \\\"Curl\\\", \\\"Curry\\\", \\\"Cybil\\\", \\\"Cyclone\\\", \\\"Cython\\\", \\\"Java\\\", \\\"Javascript\\\", \\\"M2001\\\", \\\"M4\\\", \\\"M#\\\", \\\"Machine code\\\", \\\"MAD (Michigan Algorithm Decoder)\\\", \\\"MAD/I\\\", \\\"Magik\\\", \\\"Magma\\\", \\\"make\\\", \\\"Maple\\\", \\\"MAPPER now part of BIS\\\", \\\"MARK-IV now VISION:BUILDER\\\", \\\"Mary\\\", \\\"MASM Microsoft Assembly x86\\\", \\\"MATH-MATIC\\\", \\\"Mathematica\\\", \\\"MATLAB\\\", \\\"Maxima (see also Macsyma)\\\", \\\"Max (Max Msp – Graphical Programming Environment)\\\", \\\"Maya (MEL)\\\", \\\"MDL\\\", \\\"Mercury\\\", \\\"Mesa\\\", \\\"Metafont\\\", \\\"Microcode\\\", \\\"MicroScript\\\", \\\"MIIS\\\", \\\"Milk (programming language)\\\", \\\"MIMIC\\\", \\\"Mirah\\\", \\\"Miranda\\\", \\\"MIVA Script\\\", \\\"ML\\\", \\\"Model 204\\\", \\\"Modelica\\\", \\\"Modula\\\", \\\"Modula-2\\\", \\\"Modula-3\\\", \\\"Mohol\\\", \\\"MOO\\\", \\\"Mortran\\\", \\\"Mouse\\\", \\\"MPD\\\", \\\"Mathcad\\\", \\\"MSIL – deprecated name for CIL\\\", \\\"MSL\\\", \\\"MUMPS\\\", \\\"Mystic Programming L\\\"],\\n      maxTags: 10,\\n      dropdown: {\\n        maxItems: 20,\\n        // <- mixumum allowed rendered suggestions\\n        classname: \\\"\\\",\\n        // <- custom classname for this dropdown, so it could be targeted\\n        enabled: 0,\\n        // <- show suggestions on focus\\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\\n\\n      }\\n    });\\n  };\\n\\n  var example4 = function example4(element) {\\n    // The DOM elements you wish to replace with Tagify\\n    var input1 = document.querySelector(\\\"#kt_tagify_8\\\"); // Initialize Tagify components on the above inputs\\n\\n    new Tagify(input1);\\n  };\\n\\n  var exampleCustomSuggestions = function exampleCustomSuggestions() {\\n    var input = document.querySelector('#kt_tagify_custom'),\\n        // Init Tagify script on the above inputs\\n    tagify = new Tagify(input, {\\n      whitelist: [\\\"Bootstrap\\\", \\\"Angular\\\", \\\"React\\\", \\\"Vue\\\"],\\n      placeholder: \\\"Type something\\\",\\n      enforceWhitelist: true\\n    }); // Suggestions\\n\\n    var suggestions = document.querySelector('#kt_tagify_custom_suggestions'); // Suggestion item click\\n\\n    KTUtil.on(suggestions, '[data-kt-suggestion=\\\"true\\\"]', 'click', function (e) {\\n      tagify.addTags([this.innerText]);\\n    });\\n  };\\n\\n  var exampleCountry = function exampleCountry() {\\n    var tagify = new Tagify(document.querySelector('#kt_tagify_country'), {\\n      delimiters: null,\\n      templates: {\\n        tag: function tag(tagData) {\\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\\\s+/g, '-') + '.svg';\\n\\n          try {\\n            // _ESCAPE_START_\\n            return \\\"<tag title='\\\".concat(tagData.value, \\\"' contenteditable='false' spellcheck=\\\\\\\"false\\\\\\\" class='tagify__tag \\\").concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"' \\\").concat(this.getAttributes(tagData), \\\">\\\\n                                <x title='remove tag' class='tagify__tag__removeBtn'></x>\\\\n                                <div class=\\\\\\\"d-flex align-items-center\\\\\\\">\\\\n                                    \\\").concat(tagData.code ? \\\"<img onerror=\\\\\\\"this.style.visibility = 'hidden'\\\\\\\" class=\\\\\\\"w-25px rounded-circle me-2\\\\\\\" src='\\\".concat(countryPath, \\\"' />\\\") : '', \\\"\\\\n                                    <span class='tagify__tag-text'>\\\").concat(tagData.value, \\\"</span>\\\\n                                </div>\\\\n                            </tag>\\\"); // _ESCAPE_END_\\n          } catch (err) {}\\n        },\\n        dropdownItem: function dropdownItem(tagData) {\\n          var countryPath = hostUrl + 'media/flags/' + tagData.value.toLowerCase().replace(/\\\\s+/g, '-') + '.svg';\\n\\n          try {\\n            // _ESCAPE_START_\\n            return \\\"<div class='tagify__dropdown__item \\\".concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"'>\\\\n                                    <img onerror=\\\\\\\"this.style.visibility = 'hidden'\\\\\\\" class=\\\\\\\"w-25px rounded-circle me-2\\\\\\\"\\\\n                                         src='\\\").concat(countryPath, \\\"' />\\\\n                                    <span>\\\").concat(tagData.value, \\\"</span>\\\\n                                </div>\\\"); // _ESCAPE_END_\\n          } catch (err) {}\\n        }\\n      },\\n      enforceWhitelist: true,\\n      whitelist: [{\\n        value: 'Argentina',\\n        code: 'AR'\\n      }, {\\n        value: 'Australia',\\n        code: 'AU',\\n        searchBy: 'beach, sub-tropical'\\n      }, {\\n        value: 'Austria',\\n        code: 'AT'\\n      }, {\\n        value: 'Brazil',\\n        code: 'BR'\\n      }, {\\n        value: 'China',\\n        code: 'CN'\\n      }, {\\n        value: 'Egypt',\\n        code: 'EG'\\n      }, {\\n        value: 'Finland',\\n        code: 'FI'\\n      }, {\\n        value: 'France',\\n        code: 'FR'\\n      }, {\\n        value: 'Germany',\\n        code: 'DE'\\n      }, {\\n        value: 'Hong Kong',\\n        code: 'HK'\\n      }, {\\n        value: 'Hungary',\\n        code: 'HU'\\n      }, {\\n        value: 'Iceland',\\n        code: 'IS'\\n      }, {\\n        value: 'India',\\n        code: 'IN'\\n      }, {\\n        value: 'Indonesia',\\n        code: 'ID'\\n      }, {\\n        value: 'Italy',\\n        code: 'IT'\\n      }, {\\n        value: 'Jamaica',\\n        code: 'JM'\\n      }, {\\n        value: 'Japan',\\n        code: 'JP'\\n      }, {\\n        value: 'Jersey',\\n        code: 'JE'\\n      }, {\\n        value: 'Luxembourg',\\n        code: 'LU'\\n      }, {\\n        value: 'Mexico',\\n        code: 'MX'\\n      }, {\\n        value: 'Netherlands',\\n        code: 'NL'\\n      }, {\\n        value: 'New Zealand',\\n        code: 'NZ'\\n      }, {\\n        value: 'Norway',\\n        code: 'NO'\\n      }, {\\n        value: 'Philippines',\\n        code: 'PH'\\n      }, {\\n        value: 'Singapore',\\n        code: 'SG'\\n      }, {\\n        value: 'South Korea',\\n        code: 'KR'\\n      }, {\\n        value: 'Sweden',\\n        code: 'SE'\\n      }, {\\n        value: 'Switzerland',\\n        code: 'CH'\\n      }, {\\n        value: 'Thailand',\\n        code: 'TH'\\n      }, {\\n        value: 'Ukraine',\\n        code: 'UA'\\n      }, {\\n        value: 'United Kingdom',\\n        code: 'GB'\\n      }, {\\n        value: 'United States',\\n        code: 'US'\\n      }, {\\n        value: 'Vietnam',\\n        code: 'VN'\\n      }],\\n      dropdown: {\\n        enabled: 1,\\n        // suggest tags after a single character input\\n        classname: 'extra-properties' // custom class for the suggestions dropdown\\n\\n      } // map tags' values to this property name, so this property will be the actual value and not the printed value on the screen\\n\\n    }); // add the first 2 tags and makes them readonly\\n\\n    var tagsToAdd = tagify.settings.whitelist.slice(0, 2);\\n    tagify.addTags(tagsToAdd);\\n  };\\n\\n  var exampleUsers = function exampleUsers() {\\n    var inputElm = document.querySelector('#kt_tagify_users');\\n    var usersList = [{\\n      value: 1,\\n      name: 'Emma Smith',\\n      avatar: 'avatars/300-6.jpg',\\n      email: 'e.smith@kpmg.com.au'\\n    }, {\\n      value: 2,\\n      name: 'Max Smith',\\n      avatar: 'avatars/300-1.jpg',\\n      email: 'max@kt.com'\\n    }, {\\n      value: 3,\\n      name: 'Sean Bean',\\n      avatar: 'avatars/300-5.jpg',\\n      email: 'sean@dellito.com'\\n    }, {\\n      value: 4,\\n      name: 'Brian Cox',\\n      avatar: 'avatars/300-25.jpg',\\n      email: 'brian@exchange.com'\\n    }, {\\n      value: 5,\\n      name: 'Francis Mitcham',\\n      avatar: 'avatars/300-9.jpg',\\n      email: 'f.mitcham@kpmg.com.au'\\n    }, {\\n      value: 6,\\n      name: 'Dan Wilson',\\n      avatar: 'avatars/300-23.jpg',\\n      email: 'dam@consilting.com'\\n    }, {\\n      value: 7,\\n      name: 'Ana Crown',\\n      avatar: 'avatars/300-12.jpg',\\n      email: 'ana.cf@limtel.com'\\n    }, {\\n      value: 8,\\n      name: 'John Miller',\\n      avatar: 'avatars/300-13.jpg',\\n      email: 'miller@mapple.com'\\n    }];\\n\\n    function tagTemplate(tagData) {\\n      return \\\"\\\\n                <tag title=\\\\\\\"\\\".concat(tagData.title || tagData.email, \\\"\\\\\\\"\\\\n                        contenteditable='false'\\\\n                        spellcheck='false'\\\\n                        tabIndex=\\\\\\\"-1\\\\\\\"\\\\n                        class=\\\\\\\"\\\").concat(this.settings.classNames.tag, \\\" \\\").concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"\\\\\\\"\\\\n                        \\\").concat(this.getAttributes(tagData), \\\">\\\\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\\\n                    <div class=\\\\\\\"d-flex align-items-center\\\\\\\">\\\\n                        <div class='tagify__tag__avatar-wrap ps-0'>\\\\n                            <img onerror=\\\\\\\"this.style.visibility='hidden'\\\\\\\" class=\\\\\\\"rounded-circle w-25px me-2\\\\\\\" src=\\\\\\\"\\\").concat(hostUrl, \\\"media/\\\").concat(tagData.avatar, \\\"\\\\\\\">\\\\n                        </div>\\\\n                        <span class='tagify__tag-text'>\\\").concat(tagData.name, \\\"</span>\\\\n                    </div>\\\\n                </tag>\\\\n            \\\");\\n    }\\n\\n    function suggestionItemTemplate(tagData) {\\n      return \\\"\\\\n                <div \\\".concat(this.getAttributes(tagData), \\\"\\\\n                    class='tagify__dropdown__item d-flex align-items-center \\\").concat(tagData[\\\"class\\\"] ? tagData[\\\"class\\\"] : \\\"\\\", \\\"'\\\\n                    tabindex=\\\\\\\"0\\\\\\\"\\\\n                    role=\\\\\\\"option\\\\\\\">\\\\n\\\\n                    \\\").concat(tagData.avatar ? \\\"\\\\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\\\\n                                <img onerror=\\\\\\\"this.style.visibility='hidden'\\\\\\\"  class=\\\\\\\"rounded-circle w-50px me-2\\\\\\\" src=\\\\\\\"\\\".concat(hostUrl, \\\"media/\\\").concat(tagData.avatar, \\\"\\\\\\\">\\\\n                            </div>\\\") : '', \\\"\\\\n\\\\n                    <div class=\\\\\\\"d-flex flex-column\\\\\\\">\\\\n                        <strong>\\\").concat(tagData.name, \\\"</strong>\\\\n                        <span>\\\").concat(tagData.email, \\\"</span>\\\\n                    </div>\\\\n                </div>\\\\n            \\\");\\n    } // initialize Tagify on the above input node reference\\n\\n\\n    var tagify = new Tagify(inputElm, {\\n      tagTextProp: 'name',\\n      // very important since a custom template is used with this property as text. allows typing a \\\"value\\\" or a \\\"name\\\" to match input with whitelist\\n      enforceWhitelist: true,\\n      skipInvalid: true,\\n      // do not remporarily add invalid tags\\n      dropdown: {\\n        closeOnSelect: false,\\n        enabled: 0,\\n        classname: 'users-list',\\n        searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\\n\\n      },\\n      templates: {\\n        tag: tagTemplate,\\n        dropdownItem: suggestionItemTemplate\\n      },\\n      whitelist: usersList\\n    });\\n    tagify.on('dropdown:show dropdown:updated', onDropdownShow);\\n    tagify.on('dropdown:select', onSelectSuggestion);\\n    var addAllSuggestionsElm;\\n\\n    function onDropdownShow(e) {\\n      var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\\n\\n      if (tagify.suggestedListItems.length > 1) {\\n        addAllSuggestionsElm = getAddAllSuggestionsElm(); // insert \\\"addAllSuggestionsElm\\\" as the first element in the suggestions list\\n\\n        dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild);\\n      }\\n    }\\n\\n    function onSelectSuggestion(e) {\\n      if (e.detail.elm == addAllSuggestionsElm) tagify.dropdown.selectAll.call(tagify);\\n    } // create a \\\"add all\\\" custom suggestion element every time the dropdown changes\\n\\n\\n    function getAddAllSuggestionsElm() {\\n      // suggestions items should be based on \\\"dropdownItem\\\" template\\n      return tagify.parseTemplate('dropdownItem', [{\\n        \\\"class\\\": \\\"addAll\\\",\\n        name: \\\"Add all\\\",\\n        email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\\n          return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1;\\n        }, 0) + \\\" Members\\\"\\n      }]);\\n    }\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      example1();\\n      example2();\\n      example3();\\n      example4();\\n      exampleCustomSuggestions();\\n      exampleCountry();\\n      exampleUsers();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFormsTagifyDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/tagify.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/forms/tagify.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2RlbW8xL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL3RhZ2lmeS5qcz83ZWNkIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVzX18iLCJldmFsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFTLENBQUMsWUFBTTtBQUFFOztBQUNsQjtBQUFVO0FBQ1Y7O0FBQVUsTUFBSUEsbUJBQW1CLEdBQUk7QUFFckM7QUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFDQTtBQUFPLHFFQUFNO0FBRWJDLE1BQUFBLElBQUksQ0FBQywrb2lFQUFELENBQUo7QUFFQTtBQUFPO0FBRVA7O0FBWnFDLEdBQTNCO0FBYVY7O0FBQ0E7O0FBQ0E7QUFBVTs7QUFDVjtBQUFVOztBQUNWO0FBQVU7O0FBQ1Y7O0FBQVUsTUFBSUMsbUJBQW1CLEdBQUcsRUFBMUI7QUFDVjs7QUFBVUYsRUFBQUEsbUJBQW1CLENBQUMsaUVBQUQsQ0FBbkI7QUFDVjs7QUFDQTs7QUFBVSxDQXZCRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEFUVEVOVElPTjogQW4gXCJldmFsLXNvdXJjZS1tYXBcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQuXHJcbiAqIFRoaXMgZGV2dG9vbCBpcyBuZWl0aGVyIG1hZGUgZm9yIHByb2R1Y3Rpb24gbm9yIGZvciByZWFkYWJsZSBvdXRwdXQgZmlsZXMuXHJcbiAqIEl0IHVzZXMgXCJldmFsKClcIiBjYWxscyB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzb3VyY2UgZmlsZSB3aXRoIGF0dGFjaGVkIFNvdXJjZU1hcHMgaW4gdGhlIGJyb3dzZXIgZGV2dG9vbHMuXHJcbiAqIElmIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWQgdGhlIG91dHB1dCBmaWxlLCBzZWxlY3QgYSBkaWZmZXJlbnQgZGV2dG9vbCAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2wvKVxyXG4gKiBvciBkaXNhYmxlIHRoZSBkZWZhdWx0IGRldnRvb2wgd2l0aCBcImRldnRvb2w6IGZhbHNlXCIuXHJcbiAqIElmIHlvdSBhcmUgbG9va2luZyBmb3IgcHJvZHVjdGlvbi1yZWFkeSBvdXRwdXQgZmlsZXMsIHNlZSBtb2RlOiBcInByb2R1Y3Rpb25cIiAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL21vZGUvKS5cclxuICovXHJcbi8qKioqKiovICgoKSA9PiB7IC8vIHdlYnBhY2tCb290c3RyYXBcclxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcclxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XHJcblxyXG4vKioqLyBcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL3RhZ2lmeS5qc1wiOlxyXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcclxuICAhKioqIC4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL3RhZ2lmeS5qcyAqKiohXHJcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLyoqKi8gKCgpID0+IHtcclxuXHJcbmV2YWwoXCIgLy8gQ2xhc3MgZGVmaW5pdGlvblxcblxcbnZhciBLVEZvcm1zVGFnaWZ5RGVtb3MgPSBmdW5jdGlvbiAoKSB7XFxuICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xcbiAgdmFyIGV4YW1wbGUxID0gZnVuY3Rpb24gZXhhbXBsZTEoZWxlbWVudCkge1xcbiAgICAvLyBUaGUgRE9NIGVsZW1lbnRzIHlvdSB3aXNoIHRvIHJlcGxhY2Ugd2l0aCBUYWdpZnlcXG4gICAgdmFyIGlucHV0MSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIiNrdF90YWdpZnlfMVxcXCIpO1xcbiAgICB2YXIgaW5wdXQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiI2t0X3RhZ2lmeV8yXFxcIik7IC8vIEluaXRpYWxpemUgVGFnaWZ5IGNvbXBvbmVudHMgb24gdGhlIGFib3ZlIGlucHV0c1xcblxcbiAgICBuZXcgVGFnaWZ5KGlucHV0MSwge1xcbiAgICAgIHBsYWNlaG9sZGVyOiBcXFwiVHlwZSBzb21ldGhpbmdcXFwiXFxuICAgIH0pO1xcbiAgICBuZXcgVGFnaWZ5KGlucHV0Miwge1xcbiAgICAgIHBsYWNlaG9sZGVyOiBcXFwiVHlwZSBzb21ldGhpbmdcXFwiXFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHZhciBleGFtcGxlMiA9IGZ1bmN0aW9uIGV4YW1wbGUyKGVsZW1lbnQpIHtcXG4gICAgLy8gVGhlIERPTSBlbGVtZW50cyB5b3Ugd2lzaCB0byByZXBsYWNlIHdpdGggVGFnaWZ5XFxuICAgIHZhciBpbnB1dDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxcXCIja3RfdGFnaWZ5XzNcXFwiKTtcXG4gICAgdmFyIGlucHV0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIiNrdF90YWdpZnlfNFxcXCIpO1xcbiAgICB2YXIgaW5wdXQzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiI2t0X3RhZ2lmeV81XFxcIik7IC8vIEluaXRpYWxpemUgVGFnaWZ5IGNvbXBvbmVudHMgb24gdGhlIGFib3ZlIGlucHV0c1xcblxcbiAgICBuZXcgVGFnaWZ5KGlucHV0MSk7XFxuICAgIG5ldyBUYWdpZnkoaW5wdXQyKTtcXG4gICAgbmV3IFRhZ2lmeShpbnB1dDMpO1xcbiAgfTtcXG5cXG4gIHZhciBleGFtcGxlMyA9IGZ1bmN0aW9uIGV4YW1wbGUzKGVsZW1lbnQpIHtcXG4gICAgLy8gVGhlIERPTSBlbGVtZW50cyB5b3Ugd2lzaCB0byByZXBsYWNlIHdpdGggVGFnaWZ5XFxuICAgIHZhciBpbnB1dDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxcXCIja3RfdGFnaWZ5XzZcXFwiKTtcXG4gICAgdmFyIGlucHV0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIiNrdF90YWdpZnlfN1xcXCIpOyAvLyBJbml0aWFsaXplIFRhZ2lmeSBjb21wb25lbnRzIG9uIHRoZSBhYm92ZSBpbnB1dHNcXG5cXG4gICAgbmV3IFRhZ2lmeShpbnB1dDEsIHtcXG4gICAgICB3aGl0ZWxpc3Q6IFtcXFwiQSMgLk5FVFxcXCIsIFxcXCJBIyAoQXhpb20pXFxcIiwgXFxcIkEtMCBTeXN0ZW1cXFwiLCBcXFwiQStcXFwiLCBcXFwiQSsrXFxcIiwgXFxcIkFCQVBcXFwiLCBcXFwiQUJDXFxcIiwgXFxcIkFCQyBBTEdPTFxcXCIsIFxcXCJBQlNFVFxcXCIsIFxcXCJBQlNZU1xcXCIsIFxcXCJBQ0NcXFwiLCBcXFwiQWNjZW50XFxcIiwgXFxcIkFjZSBEQVNMXFxcIiwgXFxcIkFDTDJcXFwiLCBcXFwiQXZpY3NvZnRcXFwiLCBcXFwiQUNULUlJSVxcXCIsIFxcXCJBY3Rpb24hXFxcIiwgXFxcIkFjdGlvblNjcmlwdFxcXCIsIFxcXCJBZGFcXFwiLCBcXFwiQWRlbmluZVxcXCIsIFxcXCJBZ2RhXFxcIiwgXFxcIkFnaWxlbnQgVkVFXFxcIiwgXFxcIkFnb3JhXFxcIiwgXFxcIkFJTU1TXFxcIiwgXFxcIkFsZWZcXFwiLCBcXFwiQUxGXFxcIiwgXFxcIkFMR09MIDU4XFxcIiwgXFxcIkFMR09MIDYwXFxcIiwgXFxcIkFMR09MIDY4XFxcIiwgXFxcIkFMR09MIFdcXFwiLCBcXFwiQWxpY2VcXFwiLCBcXFwiQWxtYS0wXFxcIiwgXFxcIkFtYmllbnRUYWxrXFxcIiwgXFxcIkFtaWdhIEVcXFwiLCBcXFwiQU1PU1xcXCIsIFxcXCJBTVBMXFxcIiwgXFxcIkFwZXggKFNhbGVzZm9yY2UuY29tKVxcXCIsIFxcXCJBUExcXFwiLCBcXFwiQXBwbGVTY3JpcHRcXFwiLCBcXFwiQXJjXFxcIiwgXFxcIkFSZXh4XFxcIiwgXFxcIkFyZ3VzXFxcIiwgXFxcIkFzcGVjdEpcXFwiLCBcXFwiQXNzZW1ibHkgbGFuZ3VhZ2VcXFwiLCBcXFwiQVRTXFxcIiwgXFxcIkF0ZWppIFBYXFxcIiwgXFxcIkF1dG9Ib3RrZXlcXFwiLCBcXFwiQXV0b2NvZGVyXFxcIiwgXFxcIkF1dG9JdFxcXCIsIFxcXCJBdXRvTElTUCAvIFZpc3VhbCBMSVNQXFxcIiwgXFxcIkF2ZXJlc3RcXFwiLCBcXFwiQVdLXFxcIiwgXFxcIkF4dW1cXFwiLCBcXFwiQWN0aXZlIFNlcnZlciBQYWdlc1xcXCIsIFxcXCJBU1AuTkVUXFxcIiwgXFxcIkJcXFwiLCBcXFwiQmFiYmFnZVxcXCIsIFxcXCJCYXNoXFxcIiwgXFxcIkJBU0lDXFxcIiwgXFxcImJjXFxcIiwgXFxcIkJDUExcXFwiLCBcXFwiQmVhblNoZWxsXFxcIiwgXFxcIkJhdGNoIChXaW5kb3dzL0RvcylcXFwiLCBcXFwiQmVydHJhbmRcXFwiLCBcXFwiQkVUQVxcXCIsIFxcXCJCaWd3aWdcXFwiLCBcXFwiQmlzdHJvXFxcIiwgXFxcIkJpdENcXFwiLCBcXFwiQkxJU1NcXFwiLCBcXFwiQmxvY2tseVxcXCIsIFxcXCJCbG9vUFxcXCIsIFxcXCJCbHVlXFxcIiwgXFxcIkJvb1xcXCIsIFxcXCJCb29tZXJhbmdcXFwiLCBcXFwiQm91cm5lIHNoZWxsIChpbmNsdWRpbmcgYmFzaCBhbmQga3NoKVxcXCIsIFxcXCJCUkVXXFxcIiwgXFxcIkJQRUxcXFwiLCBcXFwiQlxcXCIsIFxcXCJDLS1cXFwiLCBcXFwiQysrIOKAkyBJU08vSUVDIDE0ODgyXFxcIiwgXFxcIkMjIOKAkyBJU08vSUVDIDIzMjcwXFxcIiwgXFxcIkMvQUxcXFwiLCBcXFwiQ2FjaMOpIE9iamVjdFNjcmlwdFxcXCIsIFxcXCJDIFNoZWxsXFxcIiwgXFxcIkNhbWxcXFwiLCBcXFwiQ2F5ZW5uZVxcXCIsIFxcXCJDRHVjZVxcXCIsIFxcXCJDZWNpbFxcXCIsIFxcXCJDZXNpbFxcXCIsIFxcXCJDw6l1XFxcIiwgXFxcIkNleWxvblxcXCIsIFxcXCJDRkVuZ2luZVxcXCIsIFxcXCJDRk1MXFxcIiwgXFxcIkNnXFxcIiwgXFxcIkNoXFxcIiwgXFxcIkNoYXBlbFxcXCIsIFxcXCJDaGFyaXR5XFxcIiwgXFxcIkNoYXJtXFxcIiwgXFxcIkNoZWZcXFwiLCBcXFwiQ0hJTExcXFwiLCBcXFwiQ0hJUC04XFxcIiwgXFxcImNob21za2lcXFwiLCBcXFwiQ2h1Y0tcXFwiLCBcXFwiQ0lDU1xcXCIsIFxcXCJDaWxrXFxcIiwgXFxcIkNpdHJpbmUgKHByb2dyYW1taW5nIGxhbmd1YWdlKVxcXCIsIFxcXCJDTCAoSUJNKVxcXCIsIFxcXCJDbGFpcmVcXFwiLCBcXFwiQ2xhcmlvblxcXCIsIFxcXCJDbGVhblxcXCIsIFxcXCJDbGlwcGVyXFxcIiwgXFxcIkNMSVBTXFxcIiwgXFxcIkNMSVNUXFxcIiwgXFxcIkNsb2p1cmVcXFwiLCBcXFwiQ0xVXFxcIiwgXFxcIkNNUy0yXFxcIiwgXFxcIkNPQk9MIOKAkyBJU08vSUVDIDE5ODlcXFwiLCBcXFwiQ29ib2xTY3JpcHQg4oCTIENPQk9MIFNjcmlwdGluZyBsYW5ndWFnZVxcXCIsIFxcXCJDb2JyYVxcXCIsIFxcXCJDT0RFXFxcIiwgXFxcIkNvZmZlZVNjcmlwdFxcXCIsIFxcXCJDb2xkRnVzaW9uXFxcIiwgXFxcIkNPTUFMXFxcIiwgXFxcIkNvbWJpbmVkIFByb2dyYW1taW5nIExhbmd1YWdlIChDUEwpXFxcIiwgXFxcIkNPTUlUXFxcIiwgXFxcIkNvbW1vbiBJbnRlcm1lZGlhdGUgTGFuZ3VhZ2UgKENJTClcXFwiLCBcXFwiQ29tbW9uIExpc3AgKGFsc28ga25vd24gYXMgQ0wpXFxcIiwgXFxcIkNPTVBBU1NcXFwiLCBcXFwiQ29tcG9uZW50IFBhc2NhbFxcXCIsIFxcXCJDb25zdHJhaW50IEhhbmRsaW5nIFJ1bGVzIChDSFIpXFxcIiwgXFxcIkNPTVRSQU5cXFwiLCBcXFwiQ29udmVyZ2VcXFwiLCBcXFwiQ29vbFxcXCIsIFxcXCJDb3FcXFwiLCBcXFwiQ29yYWwgNjZcXFwiLCBcXFwiQ29yblxcXCIsIFxcXCJDb3JWaXNpb25cXFwiLCBcXFwiQ09XU0VMXFxcIiwgXFxcIkNQTFxcXCIsIFxcXCJDUExcXFwiLCBcXFwiQ3J5cHRvbFxcXCIsIFxcXCJjc2hcXFwiLCBcXFwiQ3NvdW5kXFxcIiwgXFxcIkNTUFxcXCIsIFxcXCJDVURBXFxcIiwgXFxcIkN1cmxcXFwiLCBcXFwiQ3VycnlcXFwiLCBcXFwiQ3liaWxcXFwiLCBcXFwiQ3ljbG9uZVxcXCIsIFxcXCJDeXRob25cXFwiLCBcXFwiSmF2YVxcXCIsIFxcXCJKYXZhc2NyaXB0XFxcIiwgXFxcIk0yMDAxXFxcIiwgXFxcIk00XFxcIiwgXFxcIk0jXFxcIiwgXFxcIk1hY2hpbmUgY29kZVxcXCIsIFxcXCJNQUQgKE1pY2hpZ2FuIEFsZ29yaXRobSBEZWNvZGVyKVxcXCIsIFxcXCJNQUQvSVxcXCIsIFxcXCJNYWdpa1xcXCIsIFxcXCJNYWdtYVxcXCIsIFxcXCJtYWtlXFxcIiwgXFxcIk1hcGxlXFxcIiwgXFxcIk1BUFBFUiBub3cgcGFydCBvZiBCSVNcXFwiLCBcXFwiTUFSSy1JViBub3cgVklTSU9OOkJVSUxERVJcXFwiLCBcXFwiTWFyeVxcXCIsIFxcXCJNQVNNIE1pY3Jvc29mdCBBc3NlbWJseSB4ODZcXFwiLCBcXFwiTUFUSC1NQVRJQ1xcXCIsIFxcXCJNYXRoZW1hdGljYVxcXCIsIFxcXCJNQVRMQUJcXFwiLCBcXFwiTWF4aW1hIChzZWUgYWxzbyBNYWNzeW1hKVxcXCIsIFxcXCJNYXggKE1heCBNc3Ag4oCTIEdyYXBoaWNhbCBQcm9ncmFtbWluZyBFbnZpcm9ubWVudClcXFwiLCBcXFwiTWF5YSAoTUVMKVxcXCIsIFxcXCJNRExcXFwiLCBcXFwiTWVyY3VyeVxcXCIsIFxcXCJNZXNhXFxcIiwgXFxcIk1ldGFmb250XFxcIiwgXFxcIk1pY3JvY29kZVxcXCIsIFxcXCJNaWNyb1NjcmlwdFxcXCIsIFxcXCJNSUlTXFxcIiwgXFxcIk1pbGsgKHByb2dyYW1taW5nIGxhbmd1YWdlKVxcXCIsIFxcXCJNSU1JQ1xcXCIsIFxcXCJNaXJhaFxcXCIsIFxcXCJNaXJhbmRhXFxcIiwgXFxcIk1JVkEgU2NyaXB0XFxcIiwgXFxcIk1MXFxcIiwgXFxcIk1vZGVsIDIwNFxcXCIsIFxcXCJNb2RlbGljYVxcXCIsIFxcXCJNb2R1bGFcXFwiLCBcXFwiTW9kdWxhLTJcXFwiLCBcXFwiTW9kdWxhLTNcXFwiLCBcXFwiTW9ob2xcXFwiLCBcXFwiTU9PXFxcIiwgXFxcIk1vcnRyYW5cXFwiLCBcXFwiTW91c2VcXFwiLCBcXFwiTVBEXFxcIiwgXFxcIk1hdGhjYWRcXFwiLCBcXFwiTVNJTCDigJMgZGVwcmVjYXRlZCBuYW1lIGZvciBDSUxcXFwiLCBcXFwiTVNMXFxcIiwgXFxcIk1VTVBTXFxcIiwgXFxcIk15c3RpYyBQcm9ncmFtbWluZyBMXFxcIl0sXFxuICAgICAgbWF4VGFnczogMTAsXFxuICAgICAgZHJvcGRvd246IHtcXG4gICAgICAgIG1heEl0ZW1zOiAyMCxcXG4gICAgICAgIC8vIDwtIG1peHVtdW0gYWxsb3dlZCByZW5kZXJlZCBzdWdnZXN0aW9uc1xcbiAgICAgICAgY2xhc3NuYW1lOiBcXFwidGFnaWZ5X19pbmxpbmVfX3N1Z2dlc3Rpb25zXFxcIixcXG4gICAgICAgIC8vIDwtIGN1c3RvbSBjbGFzc25hbWUgZm9yIHRoaXMgZHJvcGRvd24sIHNvIGl0IGNvdWxkIGJlIHRhcmdldGVkXFxuICAgICAgICBlbmFibGVkOiAwLFxcbiAgICAgICAgLy8gPC0gc2hvdyBzdWdnZXN0aW9ucyBvbiBmb2N1c1xcbiAgICAgICAgY2xvc2VPblNlbGVjdDogZmFsc2UgLy8gPC0gZG8gbm90IGhpZGUgdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duIG9uY2UgYW4gaXRlbSBoYXMgYmVlbiBzZWxlY3RlZFxcblxcbiAgICAgIH1cXG4gICAgfSk7XFxuICAgIG5ldyBUYWdpZnkoaW5wdXQyLCB7XFxuICAgICAgd2hpdGVsaXN0OiBbXFxcIkEjIC5ORVRcXFwiLCBcXFwiQSMgKEF4aW9tKVxcXCIsIFxcXCJBLTAgU3lzdGVtXFxcIiwgXFxcIkErXFxcIiwgXFxcIkErK1xcXCIsIFxcXCJBQkFQXFxcIiwgXFxcIkFCQ1xcXCIsIFxcXCJBQkMgQUxHT0xcXFwiLCBcXFwiQUJTRVRcXFwiLCBcXFwiQUJTWVNcXFwiLCBcXFwiQUNDXFxcIiwgXFxcIkFjY2VudFxcXCIsIFxcXCJBY2UgREFTTFxcXCIsIFxcXCJBQ0wyXFxcIiwgXFxcIkF2aWNzb2Z0XFxcIiwgXFxcIkFDVC1JSUlcXFwiLCBcXFwiQWN0aW9uIVxcXCIsIFxcXCJBY3Rpb25TY3JpcHRcXFwiLCBcXFwiQWRhXFxcIiwgXFxcIkFkZW5pbmVcXFwiLCBcXFwiQWdkYVxcXCIsIFxcXCJBZ2lsZW50IFZFRVxcXCIsIFxcXCJBZ29yYVxcXCIsIFxcXCJBSU1NU1xcXCIsIFxcXCJBbGVmXFxcIiwgXFxcIkFMRlxcXCIsIFxcXCJBTEdPTCA1OFxcXCIsIFxcXCJBTEdPTCA2MFxcXCIsIFxcXCJBTEdPTCA2OFxcXCIsIFxcXCJBTEdPTCBXXFxcIiwgXFxcIkFsaWNlXFxcIiwgXFxcIkFsbWEtMFxcXCIsIFxcXCJBbWJpZW50VGFsa1xcXCIsIFxcXCJBbWlnYSBFXFxcIiwgXFxcIkFNT1NcXFwiLCBcXFwiQU1QTFxcXCIsIFxcXCJBcGV4IChTYWxlc2ZvcmNlLmNvbSlcXFwiLCBcXFwiQVBMXFxcIiwgXFxcIkFwcGxlU2NyaXB0XFxcIiwgXFxcIkFyY1xcXCIsIFxcXCJBUmV4eFxcXCIsIFxcXCJBcmd1c1xcXCIsIFxcXCJBc3BlY3RKXFxcIiwgXFxcIkFzc2VtYmx5IGxhbmd1YWdlXFxcIiwgXFxcIkFUU1xcXCIsIFxcXCJBdGVqaSBQWFxcXCIsIFxcXCJBdXRvSG90a2V5XFxcIiwgXFxcIkF1dG9jb2RlclxcXCIsIFxcXCJBdXRvSXRcXFwiLCBcXFwiQXV0b0xJU1AgLyBWaXN1YWwgTElTUFxcXCIsIFxcXCJBdmVyZXN0XFxcIiwgXFxcIkFXS1xcXCIsIFxcXCJBeHVtXFxcIiwgXFxcIkFjdGl2ZSBTZXJ2ZXIgUGFnZXNcXFwiLCBcXFwiQVNQLk5FVFxcXCIsIFxcXCJCXFxcIiwgXFxcIkJhYmJhZ2VcXFwiLCBcXFwiQmFzaFxcXCIsIFxcXCJCQVNJQ1xcXCIsIFxcXCJiY1xcXCIsIFxcXCJCQ1BMXFxcIiwgXFxcIkJlYW5TaGVsbFxcXCIsIFxcXCJCYXRjaCAoV2luZG93cy9Eb3MpXFxcIiwgXFxcIkJlcnRyYW5kXFxcIiwgXFxcIkJFVEFcXFwiLCBcXFwiQmlnd2lnXFxcIiwgXFxcIkJpc3Ryb1xcXCIsIFxcXCJCaXRDXFxcIiwgXFxcIkJMSVNTXFxcIiwgXFxcIkJsb2NrbHlcXFwiLCBcXFwiQmxvb1BcXFwiLCBcXFwiQmx1ZVxcXCIsIFxcXCJCb29cXFwiLCBcXFwiQm9vbWVyYW5nXFxcIiwgXFxcIkJvdXJuZSBzaGVsbCAoaW5jbHVkaW5nIGJhc2ggYW5kIGtzaClcXFwiLCBcXFwiQlJFV1xcXCIsIFxcXCJCUEVMXFxcIiwgXFxcIkJcXFwiLCBcXFwiQy0tXFxcIiwgXFxcIkMrKyDigJMgSVNPL0lFQyAxNDg4MlxcXCIsIFxcXCJDIyDigJMgSVNPL0lFQyAyMzI3MFxcXCIsIFxcXCJDL0FMXFxcIiwgXFxcIkNhY2jDqSBPYmplY3RTY3JpcHRcXFwiLCBcXFwiQyBTaGVsbFxcXCIsIFxcXCJDYW1sXFxcIiwgXFxcIkNheWVubmVcXFwiLCBcXFwiQ0R1Y2VcXFwiLCBcXFwiQ2VjaWxcXFwiLCBcXFwiQ2VzaWxcXFwiLCBcXFwiQ8OpdVxcXCIsIFxcXCJDZXlsb25cXFwiLCBcXFwiQ0ZFbmdpbmVcXFwiLCBcXFwiQ0ZNTFxcXCIsIFxcXCJDZ1xcXCIsIFxcXCJDaFxcXCIsIFxcXCJDaGFwZWxcXFwiLCBcXFwiQ2hhcml0eVxcXCIsIFxcXCJDaGFybVxcXCIsIFxcXCJDaGVmXFxcIiwgXFxcIkNISUxMXFxcIiwgXFxcIkNISVAtOFxcXCIsIFxcXCJjaG9tc2tpXFxcIiwgXFxcIkNodWNLXFxcIiwgXFxcIkNJQ1NcXFwiLCBcXFwiQ2lsa1xcXCIsIFxcXCJDaXRyaW5lIChwcm9ncmFtbWluZyBsYW5ndWFnZSlcXFwiLCBcXFwiQ0wgKElCTSlcXFwiLCBcXFwiQ2xhaXJlXFxcIiwgXFxcIkNsYXJpb25cXFwiLCBcXFwiQ2xlYW5cXFwiLCBcXFwiQ2xpcHBlclxcXCIsIFxcXCJDTElQU1xcXCIsIFxcXCJDTElTVFxcXCIsIFxcXCJDbG9qdXJlXFxcIiwgXFxcIkNMVVxcXCIsIFxcXCJDTVMtMlxcXCIsIFxcXCJDT0JPTCDigJMgSVNPL0lFQyAxOTg5XFxcIiwgXFxcIkNvYm9sU2NyaXB0IOKAkyBDT0JPTCBTY3JpcHRpbmcgbGFuZ3VhZ2VcXFwiLCBcXFwiQ29icmFcXFwiLCBcXFwiQ09ERVxcXCIsIFxcXCJDb2ZmZWVTY3JpcHRcXFwiLCBcXFwiQ29sZEZ1c2lvblxcXCIsIFxcXCJDT01BTFxcXCIsIFxcXCJDb21iaW5lZCBQcm9ncmFtbWluZyBMYW5ndWFnZSAoQ1BMKVxcXCIsIFxcXCJDT01JVFxcXCIsIFxcXCJDb21tb24gSW50ZXJtZWRpYXRlIExhbmd1YWdlIChDSUwpXFxcIiwgXFxcIkNvbW1vbiBMaXNwIChhbHNvIGtub3duIGFzIENMKVxcXCIsIFxcXCJDT01QQVNTXFxcIiwgXFxcIkNvbXBvbmVudCBQYXNjYWxcXFwiLCBcXFwiQ29uc3RyYWludCBIYW5kbGluZyBSdWxlcyAoQ0hSKVxcXCIsIFxcXCJDT01UUkFOXFxcIiwgXFxcIkNvbnZlcmdlXFxcIiwgXFxcIkNvb2xcXFwiLCBcXFwiQ29xXFxcIiwgXFxcIkNvcmFsIDY2XFxcIiwgXFxcIkNvcm5cXFwiLCBcXFwiQ29yVmlzaW9uXFxcIiwgXFxcIkNPV1NFTFxcXCIsIFxcXCJDUExcXFwiLCBcXFwiQ1BMXFxcIiwgXFxcIkNyeXB0b2xcXFwiLCBcXFwiY3NoXFxcIiwgXFxcIkNzb3VuZFxcXCIsIFxcXCJDU1BcXFwiLCBcXFwiQ1VEQVxcXCIsIFxcXCJDdXJsXFxcIiwgXFxcIkN1cnJ5XFxcIiwgXFxcIkN5YmlsXFxcIiwgXFxcIkN5Y2xvbmVcXFwiLCBcXFwiQ3l0aG9uXFxcIiwgXFxcIkphdmFcXFwiLCBcXFwiSmF2YXNjcmlwdFxcXCIsIFxcXCJNMjAwMVxcXCIsIFxcXCJNNFxcXCIsIFxcXCJNI1xcXCIsIFxcXCJNYWNoaW5lIGNvZGVcXFwiLCBcXFwiTUFEIChNaWNoaWdhbiBBbGdvcml0aG0gRGVjb2RlcilcXFwiLCBcXFwiTUFEL0lcXFwiLCBcXFwiTWFnaWtcXFwiLCBcXFwiTWFnbWFcXFwiLCBcXFwibWFrZVxcXCIsIFxcXCJNYXBsZVxcXCIsIFxcXCJNQVBQRVIgbm93IHBhcnQgb2YgQklTXFxcIiwgXFxcIk1BUkstSVYgbm93IFZJU0lPTjpCVUlMREVSXFxcIiwgXFxcIk1hcnlcXFwiLCBcXFwiTUFTTSBNaWNyb3NvZnQgQXNzZW1ibHkgeDg2XFxcIiwgXFxcIk1BVEgtTUFUSUNcXFwiLCBcXFwiTWF0aGVtYXRpY2FcXFwiLCBcXFwiTUFUTEFCXFxcIiwgXFxcIk1heGltYSAoc2VlIGFsc28gTWFjc3ltYSlcXFwiLCBcXFwiTWF4IChNYXggTXNwIOKAkyBHcmFwaGljYWwgUHJvZ3JhbW1pbmcgRW52aXJvbm1lbnQpXFxcIiwgXFxcIk1heWEgKE1FTClcXFwiLCBcXFwiTURMXFxcIiwgXFxcIk1lcmN1cnlcXFwiLCBcXFwiTWVzYVxcXCIsIFxcXCJNZXRhZm9udFxcXCIsIFxcXCJNaWNyb2NvZGVcXFwiLCBcXFwiTWljcm9TY3JpcHRcXFwiLCBcXFwiTUlJU1xcXCIsIFxcXCJNaWxrIChwcm9ncmFtbWluZyBsYW5ndWFnZSlcXFwiLCBcXFwiTUlNSUNcXFwiLCBcXFwiTWlyYWhcXFwiLCBcXFwiTWlyYW5kYVxcXCIsIFxcXCJNSVZBIFNjcmlwdFxcXCIsIFxcXCJNTFxcXCIsIFxcXCJNb2RlbCAyMDRcXFwiLCBcXFwiTW9kZWxpY2FcXFwiLCBcXFwiTW9kdWxhXFxcIiwgXFxcIk1vZHVsYS0yXFxcIiwgXFxcIk1vZHVsYS0zXFxcIiwgXFxcIk1vaG9sXFxcIiwgXFxcIk1PT1xcXCIsIFxcXCJNb3J0cmFuXFxcIiwgXFxcIk1vdXNlXFxcIiwgXFxcIk1QRFxcXCIsIFxcXCJNYXRoY2FkXFxcIiwgXFxcIk1TSUwg4oCTIGRlcHJlY2F0ZWQgbmFtZSBmb3IgQ0lMXFxcIiwgXFxcIk1TTFxcXCIsIFxcXCJNVU1QU1xcXCIsIFxcXCJNeXN0aWMgUHJvZ3JhbW1pbmcgTFxcXCJdLFxcbiAgICAgIG1heFRhZ3M6IDEwLFxcbiAgICAgIGRyb3Bkb3duOiB7XFxuICAgICAgICBtYXhJdGVtczogMjAsXFxuICAgICAgICAvLyA8LSBtaXh1bXVtIGFsbG93ZWQgcmVuZGVyZWQgc3VnZ2VzdGlvbnNcXG4gICAgICAgIGNsYXNzbmFtZTogXFxcIlxcXCIsXFxuICAgICAgICAvLyA8LSBjdXN0b20gY2xhc3NuYW1lIGZvciB0aGlzIGRyb3Bkb3duLCBzbyBpdCBjb3VsZCBiZSB0YXJnZXRlZFxcbiAgICAgICAgZW5hYmxlZDogMCxcXG4gICAgICAgIC8vIDwtIHNob3cgc3VnZ2VzdGlvbnMgb24gZm9jdXNcXG4gICAgICAgIGNsb3NlT25TZWxlY3Q6IGZhbHNlIC8vIDwtIGRvIG5vdCBoaWRlIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93biBvbmNlIGFuIGl0ZW0gaGFzIGJlZW4gc2VsZWN0ZWRcXG5cXG4gICAgICB9XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHZhciBleGFtcGxlNCA9IGZ1bmN0aW9uIGV4YW1wbGU0KGVsZW1lbnQpIHtcXG4gICAgLy8gVGhlIERPTSBlbGVtZW50cyB5b3Ugd2lzaCB0byByZXBsYWNlIHdpdGggVGFnaWZ5XFxuICAgIHZhciBpbnB1dDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxcXCIja3RfdGFnaWZ5XzhcXFwiKTsgLy8gSW5pdGlhbGl6ZSBUYWdpZnkgY29tcG9uZW50cyBvbiB0aGUgYWJvdmUgaW5wdXRzXFxuXFxuICAgIG5ldyBUYWdpZnkoaW5wdXQxKTtcXG4gIH07XFxuXFxuICB2YXIgZXhhbXBsZUN1c3RvbVN1Z2dlc3Rpb25zID0gZnVuY3Rpb24gZXhhbXBsZUN1c3RvbVN1Z2dlc3Rpb25zKCkge1xcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfdGFnaWZ5X2N1c3RvbScpLFxcbiAgICAgICAgLy8gSW5pdCBUYWdpZnkgc2NyaXB0IG9uIHRoZSBhYm92ZSBpbnB1dHNcXG4gICAgdGFnaWZ5ID0gbmV3IFRhZ2lmeShpbnB1dCwge1xcbiAgICAgIHdoaXRlbGlzdDogW1xcXCJCb290c3RyYXBcXFwiLCBcXFwiQW5ndWxhclxcXCIsIFxcXCJSZWFjdFxcXCIsIFxcXCJWdWVcXFwiXSxcXG4gICAgICBwbGFjZWhvbGRlcjogXFxcIlR5cGUgc29tZXRoaW5nXFxcIixcXG4gICAgICBlbmZvcmNlV2hpdGVsaXN0OiB0cnVlXFxuICAgIH0pOyAvLyBTdWdnZXN0aW9uc1xcblxcbiAgICB2YXIgc3VnZ2VzdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfdGFnaWZ5X2N1c3RvbV9zdWdnZXN0aW9ucycpOyAvLyBTdWdnZXN0aW9uIGl0ZW0gY2xpY2tcXG5cXG4gICAgS1RVdGlsLm9uKHN1Z2dlc3Rpb25zLCAnW2RhdGEta3Qtc3VnZ2VzdGlvbj1cXFwidHJ1ZVxcXCJdJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcXG4gICAgICB0YWdpZnkuYWRkVGFncyhbdGhpcy5pbm5lclRleHRdKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgdmFyIGV4YW1wbGVDb3VudHJ5ID0gZnVuY3Rpb24gZXhhbXBsZUNvdW50cnkoKSB7XFxuICAgIHZhciB0YWdpZnkgPSBuZXcgVGFnaWZ5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF90YWdpZnlfY291bnRyeScpLCB7XFxuICAgICAgZGVsaW1pdGVyczogbnVsbCxcXG4gICAgICB0ZW1wbGF0ZXM6IHtcXG4gICAgICAgIHRhZzogZnVuY3Rpb24gdGFnKHRhZ0RhdGEpIHtcXG4gICAgICAgICAgdmFyIGNvdW50cnlQYXRoID0gaG9zdFVybCArICdtZWRpYS9mbGFncy8nICsgdGFnRGF0YS52YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcXFxzKy9nLCAnLScpICsgJy5zdmcnO1xcblxcbiAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIC8vIF9FU0NBUEVfU1RBUlRfXFxuICAgICAgICAgICAgcmV0dXJuIFxcXCI8dGFnIHRpdGxlPSdcXFwiLmNvbmNhdCh0YWdEYXRhLnZhbHVlLCBcXFwiJyBjb250ZW50ZWRpdGFibGU9J2ZhbHNlJyBzcGVsbGNoZWNrPVxcXFxcXFwiZmFsc2VcXFxcXFxcIiBjbGFzcz0ndGFnaWZ5X190YWcgXFxcIikuY29uY2F0KHRhZ0RhdGFbXFxcImNsYXNzXFxcIl0gPyB0YWdEYXRhW1xcXCJjbGFzc1xcXCJdIDogXFxcIlxcXCIsIFxcXCInIFxcXCIpLmNvbmNhdCh0aGlzLmdldEF0dHJpYnV0ZXModGFnRGF0YSksIFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcXFwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclxcXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIikuY29uY2F0KHRhZ0RhdGEuY29kZSA/IFxcXCI8aW1nIG9uZXJyb3I9XFxcXFxcXCJ0aGlzLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xcXFxcXFwiIGNsYXNzPVxcXFxcXFwidy0yNXB4IHJvdW5kZWQtY2lyY2xlIG1lLTJcXFxcXFxcIiBzcmM9J1xcXCIuY29uY2F0KGNvdW50cnlQYXRoLCBcXFwiJyAvPlxcXCIpIDogJycsIFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0YWdpZnlfX3RhZy10ZXh0Jz5cXFwiKS5jb25jYXQodGFnRGF0YS52YWx1ZSwgXFxcIjwvc3Bhbj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWc+XFxcIik7IC8vIF9FU0NBUEVfRU5EX1xcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XFxuICAgICAgICB9LFxcbiAgICAgICAgZHJvcGRvd25JdGVtOiBmdW5jdGlvbiBkcm9wZG93bkl0ZW0odGFnRGF0YSkge1xcbiAgICAgICAgICB2YXIgY291bnRyeVBhdGggPSBob3N0VXJsICsgJ21lZGlhL2ZsYWdzLycgKyB0YWdEYXRhLnZhbHVlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxcXHMrL2csICctJykgKyAnLnN2Zyc7XFxuXFxuICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgLy8gX0VTQ0FQRV9TVEFSVF9cXG4gICAgICAgICAgICByZXR1cm4gXFxcIjxkaXYgY2xhc3M9J3RhZ2lmeV9fZHJvcGRvd25fX2l0ZW0gXFxcIi5jb25jYXQodGFnRGF0YVtcXFwiY2xhc3NcXFwiXSA/IHRhZ0RhdGFbXFxcImNsYXNzXFxcIl0gOiBcXFwiXFxcIiwgXFxcIic+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIG9uZXJyb3I9XFxcXFxcXCJ0aGlzLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xcXFxcXFwiIGNsYXNzPVxcXFxcXFwidy0yNXB4IHJvdW5kZWQtY2lyY2xlIG1lLTJcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9J1xcXCIpLmNvbmNhdChjb3VudHJ5UGF0aCwgXFxcIicgLz5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxcXCIpLmNvbmNhdCh0YWdEYXRhLnZhbHVlLCBcXFwiPC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFwiKTsgLy8gX0VTQ0FQRV9FTkRfXFxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cXG4gICAgICAgIH1cXG4gICAgICB9LFxcbiAgICAgIGVuZm9yY2VXaGl0ZWxpc3Q6IHRydWUsXFxuICAgICAgd2hpdGVsaXN0OiBbe1xcbiAgICAgICAgdmFsdWU6ICdBcmdlbnRpbmEnLFxcbiAgICAgICAgY29kZTogJ0FSJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnQXVzdHJhbGlhJyxcXG4gICAgICAgIGNvZGU6ICdBVScsXFxuICAgICAgICBzZWFyY2hCeTogJ2JlYWNoLCBzdWItdHJvcGljYWwnXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdBdXN0cmlhJyxcXG4gICAgICAgIGNvZGU6ICdBVCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0JyYXppbCcsXFxuICAgICAgICBjb2RlOiAnQlInXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdDaGluYScsXFxuICAgICAgICBjb2RlOiAnQ04nXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdFZ3lwdCcsXFxuICAgICAgICBjb2RlOiAnRUcnXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdGaW5sYW5kJyxcXG4gICAgICAgIGNvZGU6ICdGSSdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0ZyYW5jZScsXFxuICAgICAgICBjb2RlOiAnRlInXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdHZXJtYW55JyxcXG4gICAgICAgIGNvZGU6ICdERSdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0hvbmcgS29uZycsXFxuICAgICAgICBjb2RlOiAnSEsnXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdIdW5nYXJ5JyxcXG4gICAgICAgIGNvZGU6ICdIVSdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0ljZWxhbmQnLFxcbiAgICAgICAgY29kZTogJ0lTJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnSW5kaWEnLFxcbiAgICAgICAgY29kZTogJ0lOJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnSW5kb25lc2lhJyxcXG4gICAgICAgIGNvZGU6ICdJRCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0l0YWx5JyxcXG4gICAgICAgIGNvZGU6ICdJVCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0phbWFpY2EnLFxcbiAgICAgICAgY29kZTogJ0pNJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnSmFwYW4nLFxcbiAgICAgICAgY29kZTogJ0pQJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnSmVyc2V5JyxcXG4gICAgICAgIGNvZGU6ICdKRSdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ0x1eGVtYm91cmcnLFxcbiAgICAgICAgY29kZTogJ0xVJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnTWV4aWNvJyxcXG4gICAgICAgIGNvZGU6ICdNWCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ05ldGhlcmxhbmRzJyxcXG4gICAgICAgIGNvZGU6ICdOTCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ05ldyBaZWFsYW5kJyxcXG4gICAgICAgIGNvZGU6ICdOWidcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ05vcndheScsXFxuICAgICAgICBjb2RlOiAnTk8nXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdQaGlsaXBwaW5lcycsXFxuICAgICAgICBjb2RlOiAnUEgnXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdTaW5nYXBvcmUnLFxcbiAgICAgICAgY29kZTogJ1NHJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnU291dGggS29yZWEnLFxcbiAgICAgICAgY29kZTogJ0tSJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnU3dlZGVuJyxcXG4gICAgICAgIGNvZGU6ICdTRSdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ1N3aXR6ZXJsYW5kJyxcXG4gICAgICAgIGNvZGU6ICdDSCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ1RoYWlsYW5kJyxcXG4gICAgICAgIGNvZGU6ICdUSCdcXG4gICAgICB9LCB7XFxuICAgICAgICB2YWx1ZTogJ1VrcmFpbmUnLFxcbiAgICAgICAgY29kZTogJ1VBJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnVW5pdGVkIEtpbmdkb20nLFxcbiAgICAgICAgY29kZTogJ0dCJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIHZhbHVlOiAnVW5pdGVkIFN0YXRlcycsXFxuICAgICAgICBjb2RlOiAnVVMnXFxuICAgICAgfSwge1xcbiAgICAgICAgdmFsdWU6ICdWaWV0bmFtJyxcXG4gICAgICAgIGNvZGU6ICdWTidcXG4gICAgICB9XSxcXG4gICAgICBkcm9wZG93bjoge1xcbiAgICAgICAgZW5hYmxlZDogMSxcXG4gICAgICAgIC8vIHN1Z2dlc3QgdGFncyBhZnRlciBhIHNpbmdsZSBjaGFyYWN0ZXIgaW5wdXRcXG4gICAgICAgIGNsYXNzbmFtZTogJ2V4dHJhLXByb3BlcnRpZXMnIC8vIGN1c3RvbSBjbGFzcyBmb3IgdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duXFxuXFxuICAgICAgfSAvLyBtYXAgdGFncycgdmFsdWVzIHRvIHRoaXMgcHJvcGVydHkgbmFtZSwgc28gdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIHRoZSBhY3R1YWwgdmFsdWUgYW5kIG5vdCB0aGUgcHJpbnRlZCB2YWx1ZSBvbiB0aGUgc2NyZWVuXFxuXFxuICAgIH0pOyAvLyBhZGQgdGhlIGZpcnN0IDIgdGFncyBhbmQgbWFrZXMgdGhlbSByZWFkb25seVxcblxcbiAgICB2YXIgdGFnc1RvQWRkID0gdGFnaWZ5LnNldHRpbmdzLndoaXRlbGlzdC5zbGljZSgwLCAyKTtcXG4gICAgdGFnaWZ5LmFkZFRhZ3ModGFnc1RvQWRkKTtcXG4gIH07XFxuXFxuICB2YXIgZXhhbXBsZVVzZXJzID0gZnVuY3Rpb24gZXhhbXBsZVVzZXJzKCkge1xcbiAgICB2YXIgaW5wdXRFbG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfdGFnaWZ5X3VzZXJzJyk7XFxuICAgIHZhciB1c2Vyc0xpc3QgPSBbe1xcbiAgICAgIHZhbHVlOiAxLFxcbiAgICAgIG5hbWU6ICdFbW1hIFNtaXRoJyxcXG4gICAgICBhdmF0YXI6ICdhdmF0YXJzLzMwMC02LmpwZycsXFxuICAgICAgZW1haWw6ICdlLnNtaXRoQGtwbWcuY29tLmF1J1xcbiAgICB9LCB7XFxuICAgICAgdmFsdWU6IDIsXFxuICAgICAgbmFtZTogJ01heCBTbWl0aCcsXFxuICAgICAgYXZhdGFyOiAnYXZhdGFycy8zMDAtMS5qcGcnLFxcbiAgICAgIGVtYWlsOiAnbWF4QGt0LmNvbSdcXG4gICAgfSwge1xcbiAgICAgIHZhbHVlOiAzLFxcbiAgICAgIG5hbWU6ICdTZWFuIEJlYW4nLFxcbiAgICAgIGF2YXRhcjogJ2F2YXRhcnMvMzAwLTUuanBnJyxcXG4gICAgICBlbWFpbDogJ3NlYW5AZGVsbGl0by5jb20nXFxuICAgIH0sIHtcXG4gICAgICB2YWx1ZTogNCxcXG4gICAgICBuYW1lOiAnQnJpYW4gQ294JyxcXG4gICAgICBhdmF0YXI6ICdhdmF0YXJzLzMwMC0yNS5qcGcnLFxcbiAgICAgIGVtYWlsOiAnYnJpYW5AZXhjaGFuZ2UuY29tJ1xcbiAgICB9LCB7XFxuICAgICAgdmFsdWU6IDUsXFxuICAgICAgbmFtZTogJ0ZyYW5jaXMgTWl0Y2hhbScsXFxuICAgICAgYXZhdGFyOiAnYXZhdGFycy8zMDAtOS5qcGcnLFxcbiAgICAgIGVtYWlsOiAnZi5taXRjaGFtQGtwbWcuY29tLmF1J1xcbiAgICB9LCB7XFxuICAgICAgdmFsdWU6IDYsXFxuICAgICAgbmFtZTogJ0RhbiBXaWxzb24nLFxcbiAgICAgIGF2YXRhcjogJ2F2YXRhcnMvMzAwLTIzLmpwZycsXFxuICAgICAgZW1haWw6ICdkYW1AY29uc2lsdGluZy5jb20nXFxuICAgIH0sIHtcXG4gICAgICB2YWx1ZTogNyxcXG4gICAgICBuYW1lOiAnQW5hIENyb3duJyxcXG4gICAgICBhdmF0YXI6ICdhdmF0YXJzLzMwMC0xMi5qcGcnLFxcbiAgICAgIGVtYWlsOiAnYW5hLmNmQGxpbXRlbC5jb20nXFxuICAgIH0sIHtcXG4gICAgICB2YWx1ZTogOCxcXG4gICAgICBuYW1lOiAnSm9obiBNaWxsZXInLFxcbiAgICAgIGF2YXRhcjogJ2F2YXRhcnMvMzAwLTEzLmpwZycsXFxuICAgICAgZW1haWw6ICdtaWxsZXJAbWFwcGxlLmNvbSdcXG4gICAgfV07XFxuXFxuICAgIGZ1bmN0aW9uIHRhZ1RlbXBsYXRlKHRhZ0RhdGEpIHtcXG4gICAgICByZXR1cm4gXFxcIlxcXFxuICAgICAgICAgICAgICAgIDx0YWcgdGl0bGU9XFxcXFxcXCJcXFwiLmNvbmNhdCh0YWdEYXRhLnRpdGxlIHx8IHRhZ0RhdGEuZW1haWwsIFxcXCJcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudGVkaXRhYmxlPSdmYWxzZSdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWxsY2hlY2s9J2ZhbHNlJ1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9XFxcXFxcXCItMVxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFxcXFxcIlxcXCIpLmNvbmNhdCh0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnLCBcXFwiIFxcXCIpLmNvbmNhdCh0YWdEYXRhW1xcXCJjbGFzc1xcXCJdID8gdGFnRGF0YVtcXFwiY2xhc3NcXFwiXSA6IFxcXCJcXFwiLCBcXFwiXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCIpLmNvbmNhdCh0aGlzLmdldEF0dHJpYnV0ZXModGFnRGF0YSksIFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPScnIGNsYXNzPSd0YWdpZnlfX3RhZ19fcmVtb3ZlQnRuJyByb2xlPSdidXR0b24nIGFyaWEtbGFiZWw9J3JlbW92ZSB0YWcnPjwveD5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXFxcImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3RhZ2lmeV9fdGFnX19hdmF0YXItd3JhcCBwcy0wJz5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIG9uZXJyb3I9XFxcXFxcXCJ0aGlzLnN0eWxlLnZpc2liaWxpdHk9J2hpZGRlbidcXFxcXFxcIiBjbGFzcz1cXFxcXFxcInJvdW5kZWQtY2lyY2xlIHctMjVweCBtZS0yXFxcXFxcXCIgc3JjPVxcXFxcXFwiXFxcIikuY29uY2F0KGhvc3RVcmwsIFxcXCJtZWRpYS9cXFwiKS5jb25jYXQodGFnRGF0YS5hdmF0YXIsIFxcXCJcXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3RhZ2lmeV9fdGFnLXRleHQnPlxcXCIpLmNvbmNhdCh0YWdEYXRhLm5hbWUsIFxcXCI8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgIDwvdGFnPlxcXFxuICAgICAgICAgICAgXFxcIik7XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gc3VnZ2VzdGlvbkl0ZW1UZW1wbGF0ZSh0YWdEYXRhKSB7XFxuICAgICAgcmV0dXJuIFxcXCJcXFxcbiAgICAgICAgICAgICAgICA8ZGl2IFxcXCIuY29uY2F0KHRoaXMuZ2V0QXR0cmlidXRlcyh0YWdEYXRhKSwgXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz0ndGFnaWZ5X19kcm9wZG93bl9faXRlbSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIFxcXCIpLmNvbmNhdCh0YWdEYXRhW1xcXCJjbGFzc1xcXCJdID8gdGFnRGF0YVtcXFwiY2xhc3NcXFwiXSA6IFxcXCJcXFwiLCBcXFwiJ1xcXFxuICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFxcXFxcIjBcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICByb2xlPVxcXFxcXFwib3B0aW9uXFxcXFxcXCI+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIikuY29uY2F0KHRhZ0RhdGEuYXZhdGFyID8gXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3RhZ2lmeV9fZHJvcGRvd25fX2l0ZW1fX2F2YXRhci13cmFwIG1lLTInPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIG9uZXJyb3I9XFxcXFxcXCJ0aGlzLnN0eWxlLnZpc2liaWxpdHk9J2hpZGRlbidcXFxcXFxcIiAgY2xhc3M9XFxcXFxcXCJyb3VuZGVkLWNpcmNsZSB3LTUwcHggbWUtMlxcXFxcXFwiIHNyYz1cXFxcXFxcIlxcXCIuY29uY2F0KGhvc3RVcmwsIFxcXCJtZWRpYS9cXFwiKS5jb25jYXQodGFnRGF0YS5hdmF0YXIsIFxcXCJcXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFwiKSA6ICcnLCBcXFwiXFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXFxcImQtZmxleCBmbGV4LWNvbHVtblxcXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cXFwiKS5jb25jYXQodGFnRGF0YS5uYW1lLCBcXFwiPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cXFwiKS5jb25jYXQodGFnRGF0YS5lbWFpbCwgXFxcIjwvc3Bhbj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICBcXFwiKTtcXG4gICAgfSAvLyBpbml0aWFsaXplIFRhZ2lmeSBvbiB0aGUgYWJvdmUgaW5wdXQgbm9kZSByZWZlcmVuY2VcXG5cXG5cXG4gICAgdmFyIHRhZ2lmeSA9IG5ldyBUYWdpZnkoaW5wdXRFbG0sIHtcXG4gICAgICB0YWdUZXh0UHJvcDogJ25hbWUnLFxcbiAgICAgIC8vIHZlcnkgaW1wb3J0YW50IHNpbmNlIGEgY3VzdG9tIHRlbXBsYXRlIGlzIHVzZWQgd2l0aCB0aGlzIHByb3BlcnR5IGFzIHRleHQuIGFsbG93cyB0eXBpbmcgYSBcXFwidmFsdWVcXFwiIG9yIGEgXFxcIm5hbWVcXFwiIHRvIG1hdGNoIGlucHV0IHdpdGggd2hpdGVsaXN0XFxuICAgICAgZW5mb3JjZVdoaXRlbGlzdDogdHJ1ZSxcXG4gICAgICBza2lwSW52YWxpZDogdHJ1ZSxcXG4gICAgICAvLyBkbyBub3QgcmVtcG9yYXJpbHkgYWRkIGludmFsaWQgdGFnc1xcbiAgICAgIGRyb3Bkb3duOiB7XFxuICAgICAgICBjbG9zZU9uU2VsZWN0OiBmYWxzZSxcXG4gICAgICAgIGVuYWJsZWQ6IDAsXFxuICAgICAgICBjbGFzc25hbWU6ICd1c2Vycy1saXN0JyxcXG4gICAgICAgIHNlYXJjaEtleXM6IFsnbmFtZScsICdlbWFpbCddIC8vIHZlcnkgaW1wb3J0YW50IHRvIHNldCBieSB3aGljaCBrZXlzIHRvIHNlYXJjaCBmb3Igc3VnZ2VzdHRpb25zIHdoZW4gdHlwaW5nXFxuXFxuICAgICAgfSxcXG4gICAgICB0ZW1wbGF0ZXM6IHtcXG4gICAgICAgIHRhZzogdGFnVGVtcGxhdGUsXFxuICAgICAgICBkcm9wZG93bkl0ZW06IHN1Z2dlc3Rpb25JdGVtVGVtcGxhdGVcXG4gICAgICB9LFxcbiAgICAgIHdoaXRlbGlzdDogdXNlcnNMaXN0XFxuICAgIH0pO1xcbiAgICB0YWdpZnkub24oJ2Ryb3Bkb3duOnNob3cgZHJvcGRvd246dXBkYXRlZCcsIG9uRHJvcGRvd25TaG93KTtcXG4gICAgdGFnaWZ5Lm9uKCdkcm9wZG93bjpzZWxlY3QnLCBvblNlbGVjdFN1Z2dlc3Rpb24pO1xcbiAgICB2YXIgYWRkQWxsU3VnZ2VzdGlvbnNFbG07XFxuXFxuICAgIGZ1bmN0aW9uIG9uRHJvcGRvd25TaG93KGUpIHtcXG4gICAgICB2YXIgZHJvcGRvd25Db250ZW50RWxtID0gZS5kZXRhaWwudGFnaWZ5LkRPTS5kcm9wZG93bi5jb250ZW50O1xcblxcbiAgICAgIGlmICh0YWdpZnkuc3VnZ2VzdGVkTGlzdEl0ZW1zLmxlbmd0aCA+IDEpIHtcXG4gICAgICAgIGFkZEFsbFN1Z2dlc3Rpb25zRWxtID0gZ2V0QWRkQWxsU3VnZ2VzdGlvbnNFbG0oKTsgLy8gaW5zZXJ0IFxcXCJhZGRBbGxTdWdnZXN0aW9uc0VsbVxcXCIgYXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHN1Z2dlc3Rpb25zIGxpc3RcXG5cXG4gICAgICAgIGRyb3Bkb3duQ29udGVudEVsbS5pbnNlcnRCZWZvcmUoYWRkQWxsU3VnZ2VzdGlvbnNFbG0sIGRyb3Bkb3duQ29udGVudEVsbS5maXJzdENoaWxkKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gb25TZWxlY3RTdWdnZXN0aW9uKGUpIHtcXG4gICAgICBpZiAoZS5kZXRhaWwuZWxtID09IGFkZEFsbFN1Z2dlc3Rpb25zRWxtKSB0YWdpZnkuZHJvcGRvd24uc2VsZWN0QWxsLmNhbGwodGFnaWZ5KTtcXG4gICAgfSAvLyBjcmVhdGUgYSBcXFwiYWRkIGFsbFxcXCIgY3VzdG9tIHN1Z2dlc3Rpb24gZWxlbWVudCBldmVyeSB0aW1lIHRoZSBkcm9wZG93biBjaGFuZ2VzXFxuXFxuXFxuICAgIGZ1bmN0aW9uIGdldEFkZEFsbFN1Z2dlc3Rpb25zRWxtKCkge1xcbiAgICAgIC8vIHN1Z2dlc3Rpb25zIGl0ZW1zIHNob3VsZCBiZSBiYXNlZCBvbiBcXFwiZHJvcGRvd25JdGVtXFxcIiB0ZW1wbGF0ZVxcbiAgICAgIHJldHVybiB0YWdpZnkucGFyc2VUZW1wbGF0ZSgnZHJvcGRvd25JdGVtJywgW3tcXG4gICAgICAgIFxcXCJjbGFzc1xcXCI6IFxcXCJhZGRBbGxcXFwiLFxcbiAgICAgICAgbmFtZTogXFxcIkFkZCBhbGxcXFwiLFxcbiAgICAgICAgZW1haWw6IHRhZ2lmeS5zZXR0aW5ncy53aGl0ZWxpc3QucmVkdWNlKGZ1bmN0aW9uIChyZW1haW5pbmdTdWdnZXN0aW9ucywgaXRlbSkge1xcbiAgICAgICAgICByZXR1cm4gdGFnaWZ5LmlzVGFnRHVwbGljYXRlKGl0ZW0udmFsdWUpID8gcmVtYWluaW5nU3VnZ2VzdGlvbnMgOiByZW1haW5pbmdTdWdnZXN0aW9ucyArIDE7XFxuICAgICAgICB9LCAwKSArIFxcXCIgTWVtYmVyc1xcXCJcXG4gICAgICB9XSk7XFxuICAgIH1cXG4gIH07XFxuXFxuICByZXR1cm4ge1xcbiAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgZXhhbXBsZTEoKTtcXG4gICAgICBleGFtcGxlMigpO1xcbiAgICAgIGV4YW1wbGUzKCk7XFxuICAgICAgZXhhbXBsZTQoKTtcXG4gICAgICBleGFtcGxlQ3VzdG9tU3VnZ2VzdGlvbnMoKTtcXG4gICAgICBleGFtcGxlQ291bnRyeSgpO1xcbiAgICAgIGV4YW1wbGVVc2VycygpO1xcbiAgICB9XFxuICB9O1xcbn0oKTsgLy8gT24gZG9jdW1lbnQgcmVhZHlcXG5cXG5cXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcXG4gIEtURm9ybXNUYWdpZnlEZW1vcy5pbml0KCk7XFxufSk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5eVpYTnZkWEpqWlhNdllYTnpaWFJ6TDJOdmNtVXZhbk12WTNWemRHOXRMMlJ2WTNWdFpXNTBZWFJwYjI0dlptOXliWE12ZEdGbmFXWjVMbXB6TG1weklpd2liV0Z3Y0dsdVozTWlPaUpEUVVWQk96dEJRVU5CTEVsQlFVbEJMR3RDUVVGclFpeEhRVUZITEZsQlFWazdRVUZEYWtNN1FVRkRRU3hOUVVGSlF5eFJRVUZSTEVkQlFVY3NVMEZCV0VFc1VVRkJWeXhEUVVGVlF5eFBRVUZXTEVWQlFXMUNPMEZCUXpsQ08wRkJRMEVzVVVGQlNVTXNUVUZCVFN4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1kwRkJka0lzUTBGQllqdEJRVU5CTEZGQlFVbERMRTFCUVUwc1IwRkJSMFlzVVVGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xHTkJRWFpDTEVOQlFXSXNRMEZJT0VJc1EwRkxPVUk3TzBGQlEwRXNVVUZCU1VVc1RVRkJTaXhEUVVGWFNpeE5RVUZZTEVWQlFXMUNPMEZCUTJaTExFMUJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVUkZMRXRCUVc1Q08wRkJSMEVzVVVGQlNVUXNUVUZCU2l4RFFVRlhSQ3hOUVVGWUxFVkJRVzFDTzBGQlEyWkZMRTFCUVVGQkxGZEJRVmNzUlVGQlJUdEJRVVJGTEV0QlFXNUNPMEZCUjBnc1IwRmFSRHM3UVVGalFTeE5RVUZKUXl4UlFVRlJMRWRCUVVjc1UwRkJXRUVzVVVGQlZ5eERRVUZWVUN4UFFVRldMRVZCUVcxQ08wRkJRemxDTzBGQlEwRXNVVUZCU1VNc1RVRkJUU3hIUVVGSFF5eFJRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzWTBGQmRrSXNRMEZCWWp0QlFVTkJMRkZCUVVsRExFMUJRVTBzUjBGQlIwWXNVVUZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEdOQlFYWkNMRU5CUVdJN1FVRkRRU3hSUVVGSlN5eE5RVUZOTEVkQlFVZE9MRkZCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4alFVRjJRaXhEUVVGaUxFTkJTamhDTEVOQlRUbENPenRCUVVOQkxGRkJRVWxGTEUxQlFVb3NRMEZCVjBvc1RVRkJXRHRCUVVOQkxGRkJRVWxKTEUxQlFVb3NRMEZCVjBRc1RVRkJXRHRCUVVOQkxGRkJRVWxETEUxQlFVb3NRMEZCVjBjc1RVRkJXRHRCUVVOSUxFZEJWa1E3TzBGQldVRXNUVUZCU1VNc1VVRkJVU3hIUVVGSExGTkJRVmhCTEZGQlFWY3NRMEZCVlZRc1QwRkJWaXhGUVVGdFFqdEJRVU01UWp0QlFVTkJMRkZCUVVsRExFMUJRVTBzUjBGQlIwTXNVVUZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEdOQlFYWkNMRU5CUVdJN1FVRkRRU3hSUVVGSlF5eE5RVUZOTEVkQlFVZEdMRkZCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4alFVRjJRaXhEUVVGaUxFTkJTRGhDTEVOQlN6bENPenRCUVVOQkxGRkJRVWxGTEUxQlFVb3NRMEZCVjBvc1RVRkJXQ3hGUVVGdFFqdEJRVU5tVXl4TlFVRkJRU3hUUVVGVExFVkJRVVVzUTBGQlF5eFRRVUZFTEVWQlFWa3NXVUZCV2l4RlFVRXdRaXhaUVVFeFFpeEZRVUYzUXl4SlFVRjRReXhGUVVFNFF5eExRVUU1UXl4RlFVRnhSQ3hOUVVGeVJDeEZRVUUyUkN4TFFVRTNSQ3hGUVVGdlJTeFhRVUZ3UlN4RlFVRnBSaXhQUVVGcVJpeEZRVUV3Uml4UFFVRXhSaXhGUVVGdFJ5eExRVUZ1Unl4RlFVRXdSeXhSUVVFeFJ5eEZRVUZ2U0N4VlFVRndTQ3hGUVVGblNTeE5RVUZvU1N4RlFVRjNTU3hWUVVGNFNTeEZRVUZ2U2l4VFFVRndTaXhGUVVFclNpeFRRVUV2U2l4RlFVRXdTeXhqUVVFeFN5eEZRVUV3VEN4TFFVRXhUQ3hGUVVGcFRTeFRRVUZxVFN4RlFVRTBUU3hOUVVFMVRTeEZRVUZ2VGl4aFFVRndUaXhGUVVGdFR5eFBRVUZ1VHl4RlFVRTBUeXhQUVVFMVR5eEZRVUZ4VUN4TlFVRnlVQ3hGUVVFMlVDeExRVUUzVUN4RlFVRnZVU3hWUVVGd1VTeEZRVUZuVWl4VlFVRm9VaXhGUVVFMFVpeFZRVUUxVWl4RlFVRjNVeXhUUVVGNFV5eEZRVUZ0VkN4UFFVRnVWQ3hGUVVFMFZDeFJRVUUxVkN4RlFVRnpWU3hoUVVGMFZTeEZRVUZ4Vml4VFFVRnlWaXhGUVVGblZ5eE5RVUZvVnl4RlFVRjNWeXhOUVVGNFZ5eEZRVUZuV0N4MVFrRkJhRmdzUlVGQmVWa3NTMEZCZWxrc1JVRkJaMW9zWVVGQmFGb3NSVUZCSzFvc1MwRkJMMW9zUlVGQmMyRXNUMEZCZEdFc1JVRkJLMkVzVDBGQkwyRXNSVUZCZDJJc1UwRkJlR0lzUlVGQmJXTXNiVUpCUVc1akxFVkJRWGRrTEV0QlFYaGtMRVZCUVN0a0xGVkJRUzlrTEVWQlFUSmxMRmxCUVRObExFVkJRWGxtTEZkQlFYcG1MRVZCUVhOblFpeFJRVUYwWjBJc1JVRkJaMmhDTEhkQ1FVRm9hRUlzUlVGQk1HbENMRk5CUVRGcFFpeEZRVUZ4YWtJc1MwRkJjbXBDTEVWQlFUUnFRaXhOUVVFMWFrSXNSVUZCYjJ0Q0xIRkNRVUZ3YTBJc1JVRkJNbXhDTEZOQlFUTnNRaXhGUVVGemJVSXNSMEZCZEcxQ0xFVkJRVEp0UWl4VFFVRXpiVUlzUlVGQmMyNUNMRTFCUVhSdVFpeEZRVUU0YmtJc1QwRkJPVzVDTEVWQlFYVnZRaXhKUVVGMmIwSXNSVUZCTm05Q0xFMUJRVGR2UWl4RlFVRnhjRUlzVjBGQmNuQkNMRVZCUVd0eFFpeHhRa0ZCYkhGQ0xFVkJRWGx5UWl4VlFVRjZja0lzUlVGQmNYTkNMRTFCUVhKelFpeEZRVUUyYzBJc1VVRkJOM05DTEVWQlFYVjBRaXhSUVVGMmRFSXNSVUZCYVhWQ0xFMUJRV3AxUWl4RlFVRjVkVUlzVDBGQmVuVkNMRVZCUVd0MlFpeFRRVUZzZGtJc1JVRkJOblpDTEU5QlFUZDJRaXhGUVVGemQwSXNUVUZCZEhkQ0xFVkJRVGgzUWl4TFFVRTVkMElzUlVGQmNYaENMRmRCUVhKNFFpeEZRVUZyZVVJc2RVTkJRV3g1UWl4RlFVRXlNRUlzVFVGQk16QkNMRVZCUVcweFFpeE5RVUZ1TVVJc1JVRkJNakZDTEVkQlFUTXhRaXhGUVVGbk1rSXNTMEZCYURKQ0xFVkJRWFV5UWl4eFFrRkJkakpDTEVWQlFUZ3pRaXh2UWtGQk9UTkNMRVZCUVc4MVFpeE5RVUZ3TlVJc1JVRkJORFZDTEc5Q1FVRTFOVUlzUlVGQmF6ZENMRk5CUVd3M1FpeEZRVUUyTjBJc1RVRkJOemRDTEVWQlFYRTRRaXhUUVVGeU9FSXNSVUZCWnpsQ0xFOUJRV2c1UWl4RlFVRjVPVUlzVDBGQmVqbENMRVZCUVdzclFpeFBRVUZzSzBJc1JVRkJNaXRDTEV0QlFUTXJRaXhGUVVGckwwSXNVVUZCYkM5Q0xFVkJRVFF2UWl4VlFVRTFMMElzUlVGQmQyZERMRTFCUVhoblF5eEZRVUZuYUVNc1NVRkJhR2hETEVWQlFYTm9ReXhKUVVGMGFFTXNSVUZCTkdoRExGRkJRVFZvUXl4RlFVRnphVU1zVTBGQmRHbERMRVZCUVdscVF5eFBRVUZxYWtNc1JVRkJNR3BETEUxQlFURnFReXhGUVVGcmEwTXNUMEZCYkd0RExFVkJRVEpyUXl4UlFVRXphME1zUlVGQmNXeERMRk5CUVhKc1F5eEZRVUZuYlVNc1QwRkJhRzFETEVWQlFYbHRReXhOUVVGNmJVTXNSVUZCYVc1RExFMUJRV3B1UXl4RlFVRjVia01zWjBOQlFYcHVReXhGUVVFeWNFTXNWVUZCTTNCRExFVkJRWFZ4UXl4UlFVRjJjVU1zUlVGQmFYSkRMRk5CUVdweVF5eEZRVUUwY2tNc1QwRkJOWEpETEVWQlFYRnpReXhUUVVGeWMwTXNSVUZCWjNSRExFOUJRV2gwUXl4RlFVRjVkRU1zVDBGQmVuUkRMRVZCUVd0MVF5eFRRVUZzZFVNc1JVRkJOblZETEV0QlFUZDFReXhGUVVGdmRrTXNUMEZCY0haRExFVkJRVFoyUXl4elFrRkJOM1pETEVWQlFYRjRReXgzUTBGQmNuaERMRVZCUVN0NlF5eFBRVUV2ZWtNc1JVRkJkekJETEUxQlFYZ3dReXhGUVVGbk1VTXNZMEZCYURGRExFVkJRV2N5UXl4WlFVRm9Na01zUlVGQk9ESkRMRTlCUVRreVF5eEZRVUYxTTBNc2NVTkJRWFl6UXl4RlFVRTROVU1zVDBGQk9UVkRMRVZCUVhVMlF5eHZRMEZCZGpaRExFVkJRVFk0UXl4blEwRkJOemhETEVWQlFTc3JReXhUUVVFdkswTXNSVUZCTUM5RExHdENRVUV4TDBNc1JVRkJPR2RFTEdsRFFVRTVaMFFzUlVGQmFXcEVMRk5CUVdwcVJDeEZRVUUwYWtRc1ZVRkJOV3BFTEVWQlFYZHJSQ3hOUVVGNGEwUXNSVUZCWjJ4RUxFdEJRV2hzUkN4RlFVRjFiRVFzVlVGQmRteEVMRVZCUVcxdFJDeE5RVUZ1YlVRc1JVRkJNbTFFTEZkQlFUTnRSQ3hGUVVGM2JrUXNVVUZCZUc1RUxFVkJRV3R2UkN4TFFVRnNiMFFzUlVGQmVXOUVMRXRCUVhwdlJDeEZRVUZuY0VRc1UwRkJhSEJFTEVWQlFUSndSQ3hMUVVFemNFUXNSVUZCYTNGRUxGRkJRV3h4UkN4RlFVRTBjVVFzUzBGQk5YRkVMRVZCUVcxeVJDeE5RVUZ1Y2tRc1JVRkJNbkpFTEUxQlFUTnlSQ3hGUVVGdGMwUXNUMEZCYm5ORUxFVkJRVFJ6UkN4UFFVRTFjMFFzUlVGQmNYUkVMRk5CUVhKMFJDeEZRVUZuZFVRc1VVRkJhSFZFTEVWQlFUQjFSQ3hOUVVFeGRVUXNSVUZCYTNaRUxGbEJRV3gyUkN4RlFVRm5kMFFzVDBGQmFIZEVMRVZCUVhsM1JDeEpRVUY2ZDBRc1JVRkJLM2RFTEVsQlFTOTNSQ3hGUVVGeGVFUXNZMEZCY25oRUxFVkJRWEY1UkN4clEwRkJjbmxFTEVWQlFYa3dSQ3hQUVVGNk1FUXNSVUZCYXpGRUxFOUJRV3d4UkN4RlFVRXlNVVFzVDBGQk16RkVMRVZCUVc4eVJDeE5RVUZ3TWtRc1JVRkJOREpFTEU5QlFUVXlSQ3hGUVVGeE0wUXNkMEpCUVhJelJDeEZRVUVyTkVRc05FSkJRUzgwUkN4RlFVRTJOa1FzVFVGQk56WkVMRVZCUVhFM1JDdzJRa0ZCY2pkRUxFVkJRVzg1UkN4WlFVRndPVVFzUlVGQmF5dEVMR0ZCUVd3clJDeEZRVUZwTDBRc1VVRkJhaTlFTEVWQlFUSXZSQ3d5UWtGQk15OUVMRVZCUVhkb1JTeHRSRUZCZUdoRkxFVkJRVFpyUlN4WlFVRTNhMFVzUlVGQk1teEZMRXRCUVROc1JTeEZRVUZyYlVVc1UwRkJiRzFGTEVWQlFUWnRSU3hOUVVFM2JVVXNSVUZCY1c1RkxGVkJRWEp1UlN4RlFVRnBiMFVzVjBGQmFtOUZMRVZCUVRodlJTeGhRVUU1YjBVc1JVRkJObkJGTEUxQlFUZHdSU3hGUVVGeGNVVXNOa0pCUVhKeFJTeEZRVUZ2YzBVc1QwRkJjSE5GTEVWQlFUWnpSU3hQUVVFM2MwVXNSVUZCYzNSRkxGTkJRWFIwUlN4RlFVRnBkVVVzWVVGQmFuVkZMRVZCUVdkMlJTeEpRVUZvZGtVc1JVRkJjM1pGTEZkQlFYUjJSU3hGUVVGdGQwVXNWVUZCYm5kRkxFVkJRU3QzUlN4UlFVRXZkMFVzUlVGQmVYaEZMRlZCUVhwNFJTeEZRVUZ4ZVVVc1ZVRkJjbmxGTEVWQlFXbDZSU3hQUVVGcWVrVXNSVUZCTUhwRkxFdEJRVEY2UlN4RlFVRnBNRVVzVTBGQmFqQkZMRVZCUVRRd1JTeFBRVUUxTUVVc1JVRkJjVEZGTEV0QlFYSXhSU3hGUVVFME1VVXNVMEZCTlRGRkxFVkJRWFV5UlN4blEwRkJkakpGTEVWQlFYazBSU3hMUVVGNk5FVXNSVUZCWnpWRkxFOUJRV2cxUlN4RlFVRjVOVVVzYzBKQlFYbzFSU3hEUVVSSk8wRkJSV1pETEUxQlFVRkJMRTlCUVU4c1JVRkJSU3hGUVVaTk8wRkJSMlpETEUxQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVOT1F5eFJRVUZCUVN4UlFVRlJMRVZCUVVVc1JVRkVTanRCUVVOclFqdEJRVU40UWtNc1VVRkJRVUVzVTBGQlV5eEZRVUZGTERaQ1FVWk1PMEZCUlc5RE8wRkJRekZEUXl4UlFVRkJRU3hQUVVGUExFVkJRVVVzUTBGSVNEdEJRVWRyUWp0QlFVTjRRa01zVVVGQlFVRXNZVUZCWVN4RlFVRkZMRXRCU2xRc1EwRkphMEk3TzBGQlNteENPMEZCU0Vzc1MwRkJia0k3UVVGWFFTeFJRVUZKV0N4TlFVRktMRU5CUVZkRUxFMUJRVmdzUlVGQmJVSTdRVUZEWmswc1RVRkJRVUVzVTBGQlV5eEZRVUZGTEVOQlFVTXNVMEZCUkN4RlFVRlpMRmxCUVZvc1JVRkJNRUlzV1VGQk1VSXNSVUZCZDBNc1NVRkJlRU1zUlVGQk9FTXNTMEZCT1VNc1JVRkJjVVFzVFVGQmNrUXNSVUZCTmtRc1MwRkJOMFFzUlVGQmIwVXNWMEZCY0VVc1JVRkJhVVlzVDBGQmFrWXNSVUZCTUVZc1QwRkJNVVlzUlVGQmJVY3NTMEZCYmtjc1JVRkJNRWNzVVVGQk1VY3NSVUZCYjBnc1ZVRkJjRWdzUlVGQlowa3NUVUZCYUVrc1JVRkJkMGtzVlVGQmVFa3NSVUZCYjBvc1UwRkJjRW9zUlVGQkswb3NVMEZCTDBvc1JVRkJNRXNzWTBGQk1Vc3NSVUZCTUV3c1MwRkJNVXdzUlVGQmFVMHNVMEZCYWswc1JVRkJORTBzVFVGQk5VMHNSVUZCYjA0c1lVRkJjRTRzUlVGQmJVOHNUMEZCYms4c1JVRkJORThzVDBGQk5VOHNSVUZCY1ZBc1RVRkJjbEFzUlVGQk5sQXNTMEZCTjFBc1JVRkJiMUVzVlVGQmNGRXNSVUZCWjFJc1ZVRkJhRklzUlVGQk5GSXNWVUZCTlZJc1JVRkJkMU1zVTBGQmVGTXNSVUZCYlZRc1QwRkJibFFzUlVGQk5GUXNVVUZCTlZRc1JVRkJjMVVzWVVGQmRGVXNSVUZCY1ZZc1UwRkJjbFlzUlVGQloxY3NUVUZCYUZjc1JVRkJkMWNzVFVGQmVGY3NSVUZCWjFnc2RVSkJRV2hZTEVWQlFYbFpMRXRCUVhwWkxFVkJRV2RhTEdGQlFXaGFMRVZCUVN0YUxFdEJRUzlhTEVWQlFYTmhMRTlCUVhSaExFVkJRU3RoTEU5QlFTOWhMRVZCUVhkaUxGTkJRWGhpTEVWQlFXMWpMRzFDUVVGdVl5eEZRVUYzWkN4TFFVRjRaQ3hGUVVFclpDeFZRVUV2WkN4RlFVRXlaU3haUVVFelpTeEZRVUY1Wml4WFFVRjZaaXhGUVVGelowSXNVVUZCZEdkQ0xFVkJRV2RvUWl4M1FrRkJhR2hDTEVWQlFUQnBRaXhUUVVFeGFVSXNSVUZCY1dwQ0xFdEJRWEpxUWl4RlFVRTBha0lzVFVGQk5XcENMRVZCUVc5clFpeHhRa0ZCY0d0Q0xFVkJRVEpzUWl4VFFVRXpiRUlzUlVGQmMyMUNMRWRCUVhSdFFpeEZRVUV5YlVJc1UwRkJNMjFDTEVWQlFYTnVRaXhOUVVGMGJrSXNSVUZCT0c1Q0xFOUJRVGx1UWl4RlFVRjFiMElzU1VGQmRtOUNMRVZCUVRadlFpeE5RVUUzYjBJc1JVRkJjWEJDTEZkQlFYSndRaXhGUVVGcmNVSXNjVUpCUVd4eFFpeEZRVUY1Y2tJc1ZVRkJlbkpDTEVWQlFYRnpRaXhOUVVGeWMwSXNSVUZCTm5OQ0xGRkJRVGR6UWl4RlFVRjFkRUlzVVVGQmRuUkNMRVZCUVdsMVFpeE5RVUZxZFVJc1JVRkJlWFZDTEU5QlFYcDFRaXhGUVVGcmRrSXNVMEZCYkhaQ0xFVkJRVFoyUWl4UFFVRTNka0lzUlVGQmMzZENMRTFCUVhSM1FpeEZRVUU0ZDBJc1MwRkJPWGRDTEVWQlFYRjRRaXhYUVVGeWVFSXNSVUZCYTNsQ0xIVkRRVUZzZVVJc1JVRkJNakJDTEUxQlFUTXdRaXhGUVVGdE1VSXNUVUZCYmpGQ0xFVkJRVEl4UWl4SFFVRXpNVUlzUlVGQlp6SkNMRXRCUVdneVFpeEZRVUYxTWtJc2NVSkJRWFl5UWl4RlFVRTRNMElzYjBKQlFUa3pRaXhGUVVGdk5VSXNUVUZCY0RWQ0xFVkJRVFExUWl4dlFrRkJOVFZDTEVWQlFXczNRaXhUUVVGc04wSXNSVUZCTmpkQ0xFMUJRVGMzUWl4RlFVRnhPRUlzVTBGQmNqaENMRVZCUVdjNVFpeFBRVUZvT1VJc1JVRkJlVGxDTEU5QlFYbzVRaXhGUVVGckswSXNUMEZCYkN0Q0xFVkJRVElyUWl4TFFVRXpLMElzUlVGQmF5OUNMRkZCUVd3dlFpeEZRVUUwTDBJc1ZVRkJOUzlDTEVWQlFYZG5ReXhOUVVGNFowTXNSVUZCWjJoRExFbEJRV2hvUXl4RlFVRnphRU1zU1VGQmRHaERMRVZCUVRSb1F5eFJRVUUxYUVNc1JVRkJjMmxETEZOQlFYUnBReXhGUVVGcGFrTXNUMEZCYW1wRExFVkJRVEJxUXl4TlFVRXhha01zUlVGQmEydERMRTlCUVd4clF5eEZRVUV5YTBNc1VVRkJNMnRETEVWQlFYRnNReXhUUVVGeWJFTXNSVUZCWjIxRExFOUJRV2h0UXl4RlFVRjViVU1zVFVGQmVtMURMRVZCUVdsdVF5eE5RVUZxYmtNc1JVRkJlVzVETEdkRFFVRjZia01zUlVGQk1uQkRMRlZCUVROd1F5eEZRVUYxY1VNc1VVRkJkbkZETEVWQlFXbHlReXhUUVVGcWNrTXNSVUZCTkhKRExFOUJRVFZ5UXl4RlFVRnhjME1zVTBGQmNuTkRMRVZCUVdkMFF5eFBRVUZvZEVNc1JVRkJlWFJETEU5QlFYcDBReXhGUVVGcmRVTXNVMEZCYkhWRExFVkJRVFoxUXl4TFFVRTNkVU1zUlVGQmIzWkRMRTlCUVhCMlF5eEZRVUUyZGtNc2MwSkJRVGQyUXl4RlFVRnhlRU1zZDBOQlFYSjRReXhGUVVFcmVrTXNUMEZCTDNwRExFVkJRWGN3UXl4TlFVRjRNRU1zUlVGQlp6RkRMR05CUVdneFF5eEZRVUZuTWtNc1dVRkJhREpETEVWQlFUZ3lReXhQUVVFNU1rTXNSVUZCZFRORExIRkRRVUYyTTBNc1JVRkJPRFZETEU5QlFUazFReXhGUVVGMU5rTXNiME5CUVhZMlF5eEZRVUUyT0VNc1owTkJRVGM0UXl4RlFVRXJLME1zVTBGQkx5dERMRVZCUVRBdlF5eHJRa0ZCTVM5RExFVkJRVGhuUkN4cFEwRkJPV2RFTEVWQlFXbHFSQ3hUUVVGcWFrUXNSVUZCTkdwRUxGVkJRVFZxUkN4RlFVRjNhMFFzVFVGQmVHdEVMRVZCUVdkc1JDeExRVUZvYkVRc1JVRkJkV3hFTEZWQlFYWnNSQ3hGUVVGdGJVUXNUVUZCYm0xRUxFVkJRVEp0UkN4WFFVRXpiVVFzUlVGQmQyNUVMRkZCUVhodVJDeEZRVUZyYjBRc1MwRkJiRzlFTEVWQlFYbHZSQ3hMUVVGNmIwUXNSVUZCWjNCRUxGTkJRV2h3UkN4RlFVRXljRVFzUzBGQk0zQkVMRVZCUVd0eFJDeFJRVUZzY1VRc1JVRkJOSEZFTEV0QlFUVnhSQ3hGUVVGdGNrUXNUVUZCYm5KRUxFVkJRVEp5UkN4TlFVRXpja1FzUlVGQmJYTkVMRTlCUVc1elJDeEZRVUUwYzBRc1QwRkJOWE5FTEVWQlFYRjBSQ3hUUVVGeWRFUXNSVUZCWjNWRUxGRkJRV2gxUkN4RlFVRXdkVVFzVFVGQk1YVkVMRVZCUVd0MlJDeFpRVUZzZGtRc1JVRkJaM2RFTEU5QlFXaDNSQ3hGUVVGNWQwUXNTVUZCZW5kRUxFVkJRU3QzUkN4SlFVRXZkMFFzUlVGQmNYaEVMR05CUVhKNFJDeEZRVUZ4ZVVRc2EwTkJRWEo1UkN4RlFVRjVNRVFzVDBGQmVqQkVMRVZCUVdzeFJDeFBRVUZzTVVRc1JVRkJNakZFTEU5QlFUTXhSQ3hGUVVGdk1rUXNUVUZCY0RKRUxFVkJRVFF5UkN4UFFVRTFNa1FzUlVGQmNUTkVMSGRDUVVGeU0wUXNSVUZCS3pSRUxEUkNRVUV2TkVRc1JVRkJOalpFTEUxQlFUYzJSQ3hGUVVGeE4wUXNOa0pCUVhJM1JDeEZRVUZ2T1VRc1dVRkJjRGxFTEVWQlFXc3JSQ3hoUVVGc0swUXNSVUZCYVM5RUxGRkJRV292UkN4RlFVRXlMMFFzTWtKQlFUTXZSQ3hGUVVGM2FFVXNiVVJCUVhob1JTeEZRVUUyYTBVc1dVRkJOMnRGTEVWQlFUSnNSU3hMUVVFemJFVXNSVUZCYTIxRkxGTkJRV3h0UlN4RlFVRTJiVVVzVFVGQk4yMUZMRVZCUVhGdVJTeFZRVUZ5YmtVc1JVRkJhVzlGTEZkQlFXcHZSU3hGUVVFNGIwVXNZVUZCT1c5RkxFVkJRVFp3UlN4TlFVRTNjRVVzUlVGQmNYRkZMRFpDUVVGeWNVVXNSVUZCYjNORkxFOUJRWEJ6UlN4RlFVRTJjMFVzVDBGQk4zTkZMRVZCUVhOMFJTeFRRVUYwZEVVc1JVRkJhWFZGTEdGQlFXcDFSU3hGUVVGbmRrVXNTVUZCYUhaRkxFVkJRWE4yUlN4WFFVRjBka1VzUlVGQmJYZEZMRlZCUVc1M1JTeEZRVUVyZDBVc1VVRkJMM2RGTEVWQlFYbDRSU3hWUVVGNmVFVXNSVUZCY1hsRkxGVkJRWEo1UlN4RlFVRnBla1VzVDBGQmFucEZMRVZCUVRCNlJTeExRVUV4ZWtVc1JVRkJhVEJGTEZOQlFXb3dSU3hGUVVFME1FVXNUMEZCTlRCRkxFVkJRWEV4UlN4TFFVRnlNVVVzUlVGQk5ERkZMRk5CUVRVeFJTeEZRVUYxTWtVc1owTkJRWFl5UlN4RlFVRjVORVVzUzBGQmVqUkZMRVZCUVdjMVJTeFBRVUZvTlVVc1JVRkJlVFZGTEhOQ1FVRjZOVVVzUTBGRVNUdEJRVVZtUXl4TlFVRkJRU3hQUVVGUExFVkJRVVVzUlVGR1RUdEJRVWRtUXl4TlFVRkJRU3hSUVVGUkxFVkJRVVU3UVVGRFRrTXNVVUZCUVVFc1VVRkJVU3hGUVVGRkxFVkJSRW83UVVGRGEwSTdRVUZEZUVKRExGRkJRVUZCTEZOQlFWTXNSVUZCUlN4RlFVWk1PMEZCUlZNN1FVRkRaa01zVVVGQlFVRXNUMEZCVHl4RlFVRkZMRU5CU0VnN1FVRkhhMEk3UVVGRGVFSkRMRkZCUVVGQkxHRkJRV0VzUlVGQlJTeExRVXBVTEVOQlNXdENPenRCUVVwc1FqdEJRVWhMTEV0QlFXNUNPMEZCVlVnc1IwRXpRa1E3TzBGQk5rSkJMRTFCUVVsRExGRkJRVkVzUjBGQlJ5eFRRVUZZUVN4UlFVRlhMRU5CUVZWcVFpeFBRVUZXTEVWQlFXMUNPMEZCUXpsQ08wRkJRMEVzVVVGQlNVTXNUVUZCVFN4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1kwRkJka0lzUTBGQllpeERRVVk0UWl4RFFVazVRanM3UVVGRFFTeFJRVUZKUlN4TlFVRktMRU5CUVZkS0xFMUJRVmc3UVVGRFNDeEhRVTVFT3p0QlFWRkJMRTFCUVVscFFpeDNRa0ZCZDBJc1IwRkJSeXhUUVVFelFrRXNkMEpCUVRKQ0xFZEJRVmM3UVVGRGRFTXNVVUZCU1VNc1MwRkJTeXhIUVVGSGFrSXNVVUZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEcxQ1FVRjJRaXhEUVVGYU8wRkJRVUVzVVVGRlFUdEJRVU5CYVVJc1NVRkJRVUVzVFVGQlRTeEhRVUZITEVsQlFVbG1MRTFCUVVvc1EwRkJWMk1zUzBGQldDeEZRVUZyUWp0QlFVTjJRbFFzVFVGQlFVRXNVMEZCVXl4RlFVRkZMRU5CUVVNc1YwRkJSQ3hGUVVGakxGTkJRV1FzUlVGQmVVSXNUMEZCZWtJc1JVRkJhME1zUzBGQmJFTXNRMEZFV1R0QlFVVjJRa29zVFVGQlFVRXNWMEZCVnl4RlFVRkZMR2RDUVVaVk8wRkJSM1pDWlN4TlFVRkJRU3huUWtGQlowSXNSVUZCUlR0QlFVaExMRXRCUVd4Q0xFTkJTRlFzUTBGRWMwTXNRMEZWZEVNN08wRkJRMEVzVVVGQlNVTXNWMEZCVnl4SFFVRkhjRUlzVVVGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xDdENRVUYyUWl4RFFVRnNRaXhEUVZoelF5eERRV0YwUXpzN1FVRkRRVzlDTEVsQlFVRkJMRTFCUVUwc1EwRkJRME1zUlVGQlVDeERRVUZWUml4WFFVRldMRVZCUVhkQ0xEWkNRVUY0UWl4RlFVRjFSQ3hQUVVGMlJDeEZRVUZuUlN4VlFVRlRSeXhEUVVGVUxFVkJRVms3UVVGRGVFVk1MRTFCUVVGQkxFMUJRVTBzUTBGQlEwMHNUMEZCVUN4RFFVRmxMRU5CUVVNc1MwRkJTME1zVTBGQlRpeERRVUZtTzBGQlEwZ3NTMEZHUkR0QlFVZElMRWRCYWtKRU96dEJRVzFDUVN4TlFVRk5ReXhqUVVGakxFZEJRVWNzVTBGQmFrSkJMR05CUVdsQ0xFZEJRVTA3UVVGRGVrSXNVVUZCU1ZJc1RVRkJUU3hIUVVGSExFbEJRVWxtTEUxQlFVb3NRMEZCVjBnc1VVRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRzlDUVVGMlFpeERRVUZZTEVWQlFYbEVPMEZCUTJ4Rk1FSXNUVUZCUVVFc1ZVRkJWU3hGUVVGRkxFbEJSSE5FTzBGQlJXeEZReXhOUVVGQlFTeFRRVUZUTEVWQlFVVTdRVUZEVUVNc1VVRkJRVUVzUjBGQlJ5eEZRVUZGTEdGQlFWVkRMRTlCUVZZc1JVRkJiVUk3UVVGRGNFSXNZMEZCVFVNc1YwRkJWeXhIUVVGSFF5eFBRVUZQTEVkQlFVY3NZMEZCVml4SFFVRXlRa1lzVDBGQlR5eERRVUZEUnl4TFFVRlNMRU5CUVdORExGZEJRV1FzUjBGQk5FSkRMRTlCUVRWQ0xFTkJRVzlETEUxQlFYQkRMRVZCUVRSRExFZEJRVFZETEVOQlFUTkNMRWRCUVRoRkxFMUJRV3hIT3p0QlFVTkJMR05CUVVrN1FVRkRRVHRCUVVOQkxIbERRVUZ6UWt3c1QwRkJUeXhEUVVGRFJ5eExRVUU1UWl3clJVRkJjMGRJTEU5QlFVOHNVMEZCVUN4SFFVRm5Ra0VzVDBGQlR5eFRRVUYyUWl4SFFVRm5ReXhGUVVGMFNTeGxRVUUyU1N4TFFVRkxUU3hoUVVGTUxFTkJRVzFDVGl4UFFVRnVRaXhEUVVFM1NTd3dUa0ZIWTBFc1QwRkJUeXhEUVVGRFR5eEpRVUZTTEhsSFFVTnhSazRzVjBGRWNrWXNXVUZEZVVjc1JVRktka2dzYTBaQlRUWkRSQ3hQUVVGUExFTkJRVU5ITEV0QlRuSkVMSGxHUVVaQkxFTkJWMEU3UVVGRFNDeFhRVnBFTEVOQllVRXNUMEZCVDBzc1IwRkJVQ3hGUVVGWkxFTkJRVWM3UVVGRGJFSXNVMEZxUWswN1FVRnRRbEJETEZGQlFVRkJMRmxCUVZrc1JVRkJSU3h6UWtGQlZWUXNUMEZCVml4RlFVRnRRanRCUVVNM1FpeGpRVUZOUXl4WFFVRlhMRWRCUVVkRExFOUJRVThzUjBGQlJ5eGpRVUZXTEVkQlFUSkNSaXhQUVVGUExFTkJRVU5ITEV0QlFWSXNRMEZCWTBNc1YwRkJaQ3hIUVVFMFFrTXNUMEZCTlVJc1EwRkJiME1zVFVGQmNFTXNSVUZCTkVNc1IwRkJOVU1zUTBGQk0wSXNSMEZCT0VVc1RVRkJiRWM3TzBGQlEwRXNZMEZCU1R0QlFVTkJPMEZCUTBFc1owVkJRVFpEVEN4UFFVRlBMRk5CUVZBc1IwRkJaMEpCTEU5QlFVOHNVMEZCZGtJc1IwRkJaME1zUlVGQk4wVXNNa3hCUlhkQ1F5eFhRVVo0UWl3MlJFRkhiMEpFTEU5QlFVOHNRMEZCUTBjc1MwRklOVUlzY1VSQlJrRXNRMEZQUVR0QlFVTklMRmRCVWtRc1EwRlRRU3hQUVVGUFN5eEhRVUZRTEVWQlFWa3NRMEZCUnp0QlFVTnNRanRCUVM5Q1RTeFBRVVoxUkR0QlFXMURiRVZ1UWl4TlFVRkJRU3huUWtGQlowSXNSVUZCUlN4SlFXNURaMFE3UVVGdlEyeEZXQ3hOUVVGQlFTeFRRVUZUTEVWQlFVVXNRMEZEVUR0QlFVRkZlVUlzVVVGQlFVRXNTMEZCU3l4RlFVRkZMRmRCUVZRN1FVRkJjMEpKTEZGQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVFMVFpeFBRVVJQTEVWQlJWQTdRVUZCUlVvc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEZkQlFWUTdRVUZCYzBKSkxGRkJRVUZCTEVsQlFVa3NSVUZCUlN4SlFVRTFRanRCUVVGclEwY3NVVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRVFZETEU5QlJrOHNSVUZIVUR0QlFVRkZVQ3hSUVVGQlFTeExRVUZMTEVWQlFVVXNVMEZCVkR0QlFVRnZRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVRGQ0xFOUJTRThzUlVGSlVEdEJRVUZGU2l4UlFVRkJRU3hMUVVGTExFVkJRVVVzVVVGQlZEdEJRVUZ0UWtrc1VVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFYcENMRTlCU2s4c1JVRkxVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1QwRkJWRHRCUVVGclFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRWGhDTEU5QlRFOHNSVUZOVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNUMEZCVkR0QlFVRnJRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVhoQ0xFOUJUazhzUlVGUFVEdEJRVUZGU2l4UlFVRkJRU3hMUVVGTExFVkJRVVVzVTBGQlZEdEJRVUZ2UWtrc1VVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFURkNMRTlCVUU4c1JVRlJVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1VVRkJWRHRCUVVGdFFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRWHBDTEU5QlVrOHNSVUZUVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNVMEZCVkR0QlFVRnZRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVRGQ0xFOUJWRThzUlVGVlVEdEJRVUZGU2l4UlFVRkJRU3hMUVVGTExFVkJRVVVzVjBGQlZEdEJRVUZ6UWtrc1VVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFUVkNMRTlCVms4c1JVRlhVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1UwRkJWRHRCUVVGdlFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVEZDTEU5QldFOHNSVUZaVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNVMEZCVkR0QlFVRnZRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVRGQ0xFOUJXazhzUlVGaFVEdEJRVUZGU2l4UlFVRkJRU3hMUVVGTExFVkJRVVVzVDBGQlZEdEJRVUZyUWtrc1VVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFYaENMRTlCWWs4c1JVRmpVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1YwRkJWRHRCUVVGelFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVFZDTEU5QlpFOHNSVUZsVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNUMEZCVkR0QlFVRnJRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVhoQ0xFOUJaazhzUlVGblFsQTdRVUZCUlVvc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEZOQlFWUTdRVUZCYjBKSkxGRkJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVRXhRaXhQUVdoQ1R5eEZRV2xDVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNUMEZCVkR0QlFVRnJRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVhoQ0xFOUJha0pQTEVWQmEwSlFPMEZCUVVWS0xGRkJRVUZCTEV0QlFVc3NSVUZCUlN4UlFVRlVPMEZCUVcxQ1NTeFJRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJla0lzVDBGc1FrOHNSVUZ0UWxBN1FVRkJSVW9zVVVGQlFVRXNTMEZCU3l4RlFVRkZMRmxCUVZRN1FVRkJkVUpKTEZGQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVFM1FpeFBRVzVDVHl4RlFXOUNVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1VVRkJWRHRCUVVGdFFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRWHBDTEU5QmNFSlBMRVZCY1VKUU8wRkJRVVZLTEZGQlFVRkJMRXRCUVVzc1JVRkJSU3hoUVVGVU8wRkJRWGRDU1N4UlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGQk9VSXNUMEZ5UWs4c1JVRnpRbEE3UVVGQlJVb3NVVUZCUVVFc1MwRkJTeXhGUVVGRkxHRkJRVlE3UVVGQmQwSkpMRkZCUVVGQkxFbEJRVWtzUlVGQlJUdEJRVUU1UWl4UFFYUkNUeXhGUVhWQ1VEdEJRVUZGU2l4UlFVRkJRU3hMUVVGTExFVkJRVVVzVVVGQlZEdEJRVUZ0UWtrc1VVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFYcENMRTlCZGtKUExFVkJkMEpRTzBGQlFVVktMRkZCUVVGQkxFdEJRVXNzUlVGQlJTeGhRVUZVTzBGQlFYZENTU3hSUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZCT1VJc1QwRjRRazhzUlVGNVFsQTdRVUZCUlVvc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEZkQlFWUTdRVUZCYzBKSkxGRkJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVRTFRaXhQUVhwQ1R5eEZRVEJDVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNZVUZCVkR0QlFVRjNRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVRsQ0xFOUJNVUpQTEVWQk1rSlFPMEZCUVVWS0xGRkJRVUZCTEV0QlFVc3NSVUZCUlN4UlFVRlVPMEZCUVcxQ1NTeFJRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJla0lzVDBFelFrOHNSVUUwUWxBN1FVRkJSVW9zVVVGQlFVRXNTMEZCU3l4RlFVRkZMR0ZCUVZRN1FVRkJkMEpKTEZGQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVFNVFpeFBRVFZDVHl4RlFUWkNVRHRCUVVGRlNpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1ZVRkJWRHRCUVVGeFFra3NVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVE5DTEU5Qk4wSlBMRVZCT0VKUU8wRkJRVVZLTEZGQlFVRkJMRXRCUVVzc1JVRkJSU3hUUVVGVU8wRkJRVzlDU1N4UlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGQk1VSXNUMEU1UWs4c1JVRXJRbEE3UVVGQlJVb3NVVUZCUVVFc1MwRkJTeXhGUVVGRkxHZENRVUZVTzBGQlFUSkNTU3hSUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZCYWtNc1QwRXZRazhzUlVGblExQTdRVUZCUlVvc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEdWQlFWUTdRVUZCTUVKSkxGRkJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVRm9ReXhQUVdoRFR5eEZRV2xEVUR0QlFVRkZTaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNVMEZCVkR0QlFVRnZRa2tzVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVRGQ0xFOUJha05QTEVOQmNFTjFSRHRCUVhWRmJFVXpRaXhOUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZEVGtjc1VVRkJRVUVzVDBGQlR5eEZRVUZGTEVOQlJFZzdRVUZEVFR0QlFVTmFSQ3hSUVVGQlFTeFRRVUZUTEVWQlFVVXNhMEpCUmt3c1EwRkZkMEk3TzBGQlJuaENMRTlCZGtWM1JDeERRVEJGYUVVN08wRkJNVVZuUlN4TFFVRjZSQ3hEUVVGaUxFTkJSSGxDTEVOQk9FVjZRanM3UVVGRFFTeFJRVUZKTmtJc1UwRkJVeXhIUVVGSGRrSXNUVUZCVFN4RFFVRkRkMElzVVVGQlVDeERRVUZuUW14RExGTkJRV2hDTEVOQlFUQkNiVU1zUzBGQk1VSXNRMEZCWjBNc1EwRkJhRU1zUlVGQmJVTXNRMEZCYmtNc1EwRkJhRUk3UVVGRFFYcENMRWxCUVVGQkxFMUJRVTBzUTBGQlEwMHNUMEZCVUN4RFFVRmxhVUlzVTBGQlpqdEJRVU5JTEVkQmFrWkVPenRCUVcxR1FTeE5RVUZOUnl4WlFVRlpMRWRCUVVjc1UwRkJaa0VzV1VGQlpTeEhRVUZOTzBGQlEzWkNMRkZCUVVsRExGRkJRVkVzUjBGQlJ6ZERMRkZCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4clFrRkJka0lzUTBGQlpqdEJRVVZCTEZGQlFVMDJReXhUUVVGVExFZEJRVWNzUTBGRFpEdEJRVUZGWWl4TlFVRkJRU3hMUVVGTExFVkJRVVVzUTBGQlZEdEJRVUZaWXl4TlFVRkJRU3hKUVVGSkxFVkJRVVVzV1VGQmJFSTdRVUZCWjBORExFMUJRVUZCTEUxQlFVMHNSVUZCUlN4dFFrRkJlRU03UVVGQk5rUkRMRTFCUVVGQkxFdEJRVXNzUlVGQlJUdEJRVUZ3UlN4TFFVUmpMRVZCUldRN1FVRkJSV2hDTEUxQlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGVU8wRkJRVmxqTEUxQlFVRkJMRWxCUVVrc1JVRkJSU3hYUVVGc1FqdEJRVUVyUWtNc1RVRkJRVUVzVFVGQlRTeEZRVUZGTEcxQ1FVRjJRenRCUVVFMFJFTXNUVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJRVzVGTEV0QlJtTXNSVUZIWkR0QlFVRkZhRUlzVFVGQlFVRXNTMEZCU3l4RlFVRkZMRU5CUVZRN1FVRkJXV01zVFVGQlFVRXNTVUZCU1N4RlFVRkZMRmRCUVd4Q08wRkJRU3RDUXl4TlFVRkJRU3hOUVVGTkxFVkJRVVVzYlVKQlFYWkRPMEZCUVRSRVF5eE5RVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkJia1VzUzBGSVl5eEZRVWxrTzBGQlFVVm9RaXhOUVVGQlFTeExRVUZMTEVWQlFVVXNRMEZCVkR0QlFVRlpZeXhOUVVGQlFTeEpRVUZKTEVWQlFVVXNWMEZCYkVJN1FVRkJLMEpETEUxQlFVRkJMRTFCUVUwc1JVRkJSU3h2UWtGQmRrTTdRVUZCTmtSRExFMUJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVRndSU3hMUVVwakxFVkJTMlE3UVVGQlJXaENMRTFCUVVGQkxFdEJRVXNzUlVGQlJTeERRVUZVTzBGQlFWbGpMRTFCUVVGQkxFbEJRVWtzUlVGQlJTeHBRa0ZCYkVJN1FVRkJjVU5ETEUxQlFVRkJMRTFCUVUwc1JVRkJSU3h0UWtGQk4wTTdRVUZCYTBWRExFMUJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVRjZSU3hMUVV4akxFVkJUV1E3UVVGQlJXaENMRTFCUVVGQkxFdEJRVXNzUlVGQlJTeERRVUZVTzBGQlFWbGpMRTFCUVVGQkxFbEJRVWtzUlVGQlJTeFpRVUZzUWp0QlFVRm5RME1zVFVGQlFVRXNUVUZCVFN4RlFVRkZMRzlDUVVGNFF6dEJRVUU0UkVNc1RVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlFYSkZMRXRCVG1Nc1JVRlBaRHRCUVVGRmFFSXNUVUZCUVVFc1MwRkJTeXhGUVVGRkxFTkJRVlE3UVVGQldXTXNUVUZCUVVFc1NVRkJTU3hGUVVGRkxGZEJRV3hDTzBGQlFTdENReXhOUVVGQlFTeE5RVUZOTEVWQlFVVXNiMEpCUVhaRE8wRkJRVFpFUXl4TlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGQmNFVXNTMEZRWXl4RlFWRmtPMEZCUVVWb1FpeE5RVUZCUVN4TFFVRkxMRVZCUVVVc1EwRkJWRHRCUVVGWll5eE5RVUZCUVN4SlFVRkpMRVZCUVVVc1lVRkJiRUk3UVVGQmFVTkRMRTFCUVVGQkxFMUJRVTBzUlVGQlJTeHZRa0ZCZWtNN1FVRkJLMFJETEUxQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGMFJTeExRVkpqTEVOQlFXeENPenRCUVZkQkxHRkJRVk5ETEZkQlFWUXNRMEZCY1VKd1FpeFBRVUZ5UWl4RlFVRTRRanRCUVVNeFFpeHpSRUZEYlVKQkxFOUJRVThzUTBGQlEzRkNMRXRCUVZJc1NVRkJhVUp5UWl4UFFVRlBMRU5CUVVOdFFpeExRVVExUXl4MVRFRkxjVUlzUzBGQlMxQXNVVUZCVEN4RFFVRmpWU3hWUVVGa0xFTkJRWGxDZGtJc1IwRk1PVU1zWTBGTGNVUkRMRTlCUVU4c1UwRkJVQ3hIUVVGblFrRXNUMEZCVHl4VFFVRjJRaXhIUVVGblF5eEZRVXh5Uml4NVEwRk5ZeXhMUVVGTFRTeGhRVUZNTEVOQlFXMUNUaXhQUVVGdVFpeERRVTVrTEhOWVFWVjNSMFVzVDBGV2VFY3NiVUpCVlhkSVJpeFBRVUZQTEVOQlFVTnJRaXhOUVZab1NTeDVSMEZaTmtOc1FpeFBRVUZQTEVOQlFVTnBRaXhKUVZweVJEdEJRV2RDU0RzN1FVRkZSQ3hoUVVGVFRTeHpRa0ZCVkN4RFFVRm5RM1pDTEU5QlFXaERMRVZCUVhsRE8wRkJRM0pETERoRFFVTlhMRXRCUVV0TkxHRkJRVXdzUTBGQmJVSk9MRTlCUVc1Q0xFTkJSRmdzTWtaQlJXdEZRU3hQUVVGUExGTkJRVkFzUjBGQlowSkJMRTlCUVU4c1UwRkJka0lzUjBGQlowTXNSVUZHYkVjc1owaEJUVlZCTEU5QlFVOHNRMEZCUTJ0Q0xFMUJRVklzSzA1QlJXMUhhRUlzVDBGR2JrY3NiVUpCUlcxSVJpeFBRVUZQTEVOQlFVTnJRaXhOUVVZelNDd3JRMEZIWjBJc1JVRlVNVUlzZVVkQllYTkNiRUlzVDBGQlR5eERRVUZEYVVJc1NVRmlPVUlzYzBSQlkyOUNha0lzVDBGQlR5eERRVUZEYlVJc1MwRmtOVUk3UVVGclFrZ3NTMEZ3UkhOQ0xFTkJjMFIyUWpzN08wRkJRMEVzVVVGQlNTOUNMRTFCUVUwc1IwRkJSeXhKUVVGSlppeE5RVUZLTEVOQlFWY3dReXhSUVVGWUxFVkJRWEZDTzBGQlF6bENVeXhOUVVGQlFTeFhRVUZYTEVWQlFVVXNUVUZFYVVJN1FVRkRWRHRCUVVOeVFtNURMRTFCUVVGQkxHZENRVUZuUWl4RlFVRkZMRWxCUmxrN1FVRkhPVUp2UXl4TlFVRkJRU3hYUVVGWExFVkJRVVVzU1VGSWFVSTdRVUZIV0R0QlFVTnVRamRETEUxQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVOT1NTeFJRVUZCUVN4aFFVRmhMRVZCUVVVc1MwRkVWRHRCUVVWT1JDeFJRVUZCUVN4UFFVRlBMRVZCUVVVc1EwRkdTRHRCUVVkT1JDeFJRVUZCUVN4VFFVRlRMRVZCUVVVc1dVRklURHRCUVVsT05FTXNVVUZCUVVFc1ZVRkJWU3hGUVVGRkxFTkJRVU1zVFVGQlJDeEZRVUZUTEU5QlFWUXNRMEZLVGl4RFFVbDVRanM3UVVGS2VrSXNUMEZLYjBJN1FVRlZPVUkxUWl4TlFVRkJRU3hUUVVGVExFVkJRVVU3UVVGRFVFTXNVVUZCUVVFc1IwRkJSeXhGUVVGRmNVSXNWMEZFUlR0QlFVVlFXQ3hSUVVGQlFTeFpRVUZaTEVWQlFVVmpPMEZCUmxBc1QwRldiVUk3UVVGak9VSTNReXhOUVVGQlFTeFRRVUZUTEVWQlFVVnpRenRCUVdSdFFpeExRVUZ5UWl4RFFVRmlPMEZCYVVKQk5VSXNTVUZCUVVFc1RVRkJUU3hEUVVGRFNTeEZRVUZRTEVOQlFWVXNaME5CUVZZc1JVRkJORU50UXl4alFVRTFRenRCUVVOQmRrTXNTVUZCUVVFc1RVRkJUU3hEUVVGRFNTeEZRVUZRTEVOQlFWVXNhVUpCUVZZc1JVRkJOa0p2UXl4clFrRkJOMEk3UVVGRlFTeFJRVUZKUXl4dlFrRkJTanM3UVVGRlFTeGhRVUZUUml4alFVRlVMRU5CUVhkQ2JFTXNRMEZCZUVJc1JVRkJNa0k3UVVGRGRrSXNWVUZCU1hGRExHdENRVUZyUWl4SFFVRkhja01zUTBGQlF5eERRVUZEYzBNc1RVRkJSaXhEUVVGVE0wTXNUVUZCVkN4RFFVRm5RalJETEVkQlFXaENMRU5CUVc5Q2NFUXNVVUZCY0VJc1EwRkJOa0p4UkN4UFFVRjBSRHM3UVVGRlFTeFZRVUZKTjBNc1RVRkJUU3hEUVVGRE9FTXNhMEpCUVZBc1EwRkJNRUpETEUxQlFURkNMRWRCUVcxRExFTkJRWFpETEVWQlFUQkRPMEZCUTNSRFRpeFJRVUZCUVN4dlFrRkJiMElzUjBGQlIwOHNkVUpCUVhWQ0xFVkJRVGxETEVOQlJITkRMRU5CUjNSRE96dEJRVU5CVGl4UlFVRkJRU3hyUWtGQmEwSXNRMEZCUTA4c1dVRkJia0lzUTBGQlowTlNMRzlDUVVGb1F5eEZRVUZ6UkVNc2EwSkJRV3RDTEVOQlFVTlJMRlZCUVhwRk8wRkJRMGc3UVVGRFNqczdRVUZGUkN4aFFVRlRWaXhyUWtGQlZDeERRVUUwUW01RExFTkJRVFZDTEVWQlFTdENPMEZCUXpOQ0xGVkJRVWxCTEVOQlFVTXNRMEZCUTNORExFMUJRVVlzUTBGQlUxRXNSMEZCVkN4SlFVRm5RbFlzYjBKQlFYQkNMRVZCUTBsNlF5eE5RVUZOTEVOQlFVTlNMRkZCUVZBc1EwRkJaMEkwUkN4VFFVRm9RaXhEUVVFd1FrTXNTVUZCTVVJc1EwRkJLMEp5UkN4TlFVRXZRanRCUVVOUUxFdEJNMFp6UWl4RFFUWkdka0k3T3p0QlFVTkJMR0ZCUVZOblJDeDFRa0ZCVkN4SFFVRnRRenRCUVVNdlFqdEJRVU5CTEdGQlFVOW9SQ3hOUVVGTkxFTkJRVU56UkN4aFFVRlFMRU5CUVhGQ0xHTkJRWEpDTEVWQlFYRkRMRU5CUVVNN1FVRkRla01zYVVKQlFVOHNVVUZFYTBNN1FVRkZla042UWl4UlFVRkJRU3hKUVVGSkxFVkJRVVVzVTBGR2JVTTdRVUZIZWtORkxGRkJRVUZCTEV0QlFVc3NSVUZCUlM5Q0xFMUJRVTBzUTBGQlEzZENMRkZCUVZBc1EwRkJaMEpzUXl4VFFVRm9RaXhEUVVFd1FtbEZMRTFCUVRGQ0xFTkJRV2xETEZWQlFWVkRMRzlDUVVGV0xFVkJRV2REUXl4SlFVRm9ReXhGUVVGelF6dEJRVU14UlN4cFFrRkJUM3BFTEUxQlFVMHNRMEZCUXpCRUxHTkJRVkFzUTBGQmMwSkVMRWxCUVVrc1EwRkJRekZETEV0QlFUTkNMRWxCUVc5RGVVTXNiMEpCUVhCRExFZEJRVEpFUVN4dlFrRkJiMElzUjBGQlJ5eERRVUY2Ump0QlFVTklMRk5CUmswc1JVRkZTaXhEUVVaSkxFbEJSVU03UVVGTWFVTXNUMEZCUkN4RFFVRnlReXhEUVVGUU8wRkJVVWc3UVVGRFNpeEhRWHBIUkRzN1FVRXlSMEVzVTBGQlR6dEJRVU5JTzBGQlEwRkhMRWxCUVVGQkxFbEJRVWtzUlVGQlJTeG5Ra0ZCV1R0QlFVTmthRVlzVFVGQlFVRXNVVUZCVVR0QlFVTlNVU3hOUVVGQlFTeFJRVUZSTzBGQlExSkZMRTFCUVVGQkxGRkJRVkU3UVVGRFVsRXNUVUZCUVVFc1VVRkJVVHRCUVVOU1F5eE5RVUZCUVN4M1FrRkJkMEk3UVVGRGVFSlZMRTFCUVVGQkxHTkJRV003UVVGRFpHdENMRTFCUVVGQkxGbEJRVms3UVVGRFpqdEJRVlpGTEVkQlFWQTdRVUZaU0N4RFFUbFNkMElzUlVGQmVrSXNReXhEUVdkVFFUczdPMEZCUTBGMlFpeE5RVUZOTEVOQlFVTjVSQ3hyUWtGQlVDeERRVUV3UWl4WlFVRlpPMEZCUTJ4RGJFWXNSVUZCUVVFc2EwSkJRV3RDTEVOQlFVTnBSaXhKUVVGdVFqdEJRVU5JTEVOQlJrUWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXlaWE52ZFhKalpYTXZZWE56WlhSekwyTnZjbVV2YW5NdlkzVnpkRzl0TDJSdlkzVnRaVzUwWVhScGIyNHZabTl5YlhNdmRHRm5hV1o1TG1welB6YzJORGNpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEhKY2JseHlYRzR2THlCRGJHRnpjeUJrWldacGJtbDBhVzl1WEhKY2JuWmhjaUJMVkVadmNtMXpWR0ZuYVdaNVJHVnRiM01nUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQXZMeUJRY21sMllYUmxJR1oxYm1OMGFXOXVjMXh5WEc0Z0lDQWdkbUZ5SUdWNFlXMXdiR1V4SUQwZ1puVnVZM1JwYjI0Z0tHVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdSRTlOSUdWc1pXMWxiblJ6SUhsdmRTQjNhWE5vSUhSdklISmxjR3hoWTJVZ2QybDBhQ0JVWVdkcFpubGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNXdkWFF4SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWlOcmRGOTBZV2RwWm5sZk1Wd2lLVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhVzV3ZFhReUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpTnJkRjkwWVdkcFpubGZNbHdpS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NXNXBkR2xoYkdsNlpTQlVZV2RwWm5rZ1kyOXRjRzl1Wlc1MGN5QnZiaUIwYUdVZ1lXSnZkbVVnYVc1d2RYUnpYSEpjYmlBZ0lDQWdJQ0FnYm1WM0lGUmhaMmxtZVNocGJuQjFkREVzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJNklGd2lWSGx3WlNCemIyMWxkR2hwYm1kY0lseHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lHNWxkeUJVWVdkcFpua29hVzV3ZFhReUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlPaUJjSWxSNWNHVWdjMjl0WlhSb2FXNW5YQ0pjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1pYaGhiWEJzWlRJZ1BTQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0JFVDAwZ1pXeGxiV1Z1ZEhNZ2VXOTFJSGRwYzJnZ2RHOGdjbVZ3YkdGalpTQjNhWFJvSUZSaFoybG1lVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibkIxZERFZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkydDBYM1JoWjJsbWVWOHpYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYm5CMWRESWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lJMnQwWDNSaFoybG1lVjgwWENJcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCcGJuQjFkRE1nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpSTJ0MFgzUmhaMmxtZVY4MVhDSXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJKYm1sMGFXRnNhWHBsSUZSaFoybG1lU0JqYjIxd2IyNWxiblJ6SUc5dUlIUm9aU0JoWW05MlpTQnBibkIxZEhOY2NseHVJQ0FnSUNBZ0lDQnVaWGNnVkdGbmFXWjVLR2x1Y0hWME1TazdYSEpjYmlBZ0lDQWdJQ0FnYm1WM0lGUmhaMmxtZVNocGJuQjFkRElwTzF4eVhHNGdJQ0FnSUNBZ0lHNWxkeUJVWVdkcFpua29hVzV3ZFhRektUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1pYaGhiWEJzWlRNZ1BTQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0JFVDAwZ1pXeGxiV1Z1ZEhNZ2VXOTFJSGRwYzJnZ2RHOGdjbVZ3YkdGalpTQjNhWFJvSUZSaFoybG1lVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibkIxZERFZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkydDBYM1JoWjJsbWVWODJYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYm5CMWRESWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lJMnQwWDNSaFoybG1lVjgzWENJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkpibWwwYVdGc2FYcGxJRlJoWjJsbWVTQmpiMjF3YjI1bGJuUnpJRzl1SUhSb1pTQmhZbTkyWlNCcGJuQjFkSE5jY2x4dUlDQWdJQ0FnSUNCdVpYY2dWR0ZuYVdaNUtHbHVjSFYwTVN3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHbDBaV3hwYzNRNklGdGNJa0VqSUM1T1JWUmNJaXdnWENKQkl5QW9RWGhwYjIwcFhDSXNJRndpUVMwd0lGTjVjM1JsYlZ3aUxDQmNJa0VyWENJc0lGd2lRU3NyWENJc0lGd2lRVUpCVUZ3aUxDQmNJa0ZDUTF3aUxDQmNJa0ZDUXlCQlRFZFBURndpTENCY0lrRkNVMFZVWENJc0lGd2lRVUpUV1ZOY0lpd2dYQ0pCUTBOY0lpd2dYQ0pCWTJObGJuUmNJaXdnWENKQlkyVWdSRUZUVEZ3aUxDQmNJa0ZEVERKY0lpd2dYQ0pCZG1samMyOW1kRndpTENCY0lrRkRWQzFKU1VsY0lpd2dYQ0pCWTNScGIyNGhYQ0lzSUZ3aVFXTjBhVzl1VTJOeWFYQjBYQ0lzSUZ3aVFXUmhYQ0lzSUZ3aVFXUmxibWx1WlZ3aUxDQmNJa0ZuWkdGY0lpd2dYQ0pCWjJsc1pXNTBJRlpGUlZ3aUxDQmNJa0ZuYjNKaFhDSXNJRndpUVVsTlRWTmNJaXdnWENKQmJHVm1YQ0lzSUZ3aVFVeEdYQ0lzSUZ3aVFVeEhUMHdnTlRoY0lpd2dYQ0pCVEVkUFRDQTJNRndpTENCY0lrRk1SMDlNSURZNFhDSXNJRndpUVV4SFQwd2dWMXdpTENCY0lrRnNhV05sWENJc0lGd2lRV3h0WVMwd1hDSXNJRndpUVcxaWFXVnVkRlJoYkd0Y0lpd2dYQ0pCYldsbllTQkZYQ0lzSUZ3aVFVMVBVMXdpTENCY0lrRk5VRXhjSWl3Z1hDSkJjR1Y0SUNoVFlXeGxjMlp2Y21ObExtTnZiU2xjSWl3Z1hDSkJVRXhjSWl3Z1hDSkJjSEJzWlZOamNtbHdkRndpTENCY0lrRnlZMXdpTENCY0lrRlNaWGg0WENJc0lGd2lRWEpuZFhOY0lpd2dYQ0pCYzNCbFkzUktYQ0lzSUZ3aVFYTnpaVzFpYkhrZ2JHRnVaM1ZoWjJWY0lpd2dYQ0pCVkZOY0lpd2dYQ0pCZEdWcWFTQlFXRndpTENCY0lrRjFkRzlJYjNSclpYbGNJaXdnWENKQmRYUnZZMjlrWlhKY0lpd2dYQ0pCZFhSdlNYUmNJaXdnWENKQmRYUnZURWxUVUNBdklGWnBjM1ZoYkNCTVNWTlFYQ0lzSUZ3aVFYWmxjbVZ6ZEZ3aUxDQmNJa0ZYUzF3aUxDQmNJa0Y0ZFcxY0lpd2dYQ0pCWTNScGRtVWdVMlZ5ZG1WeUlGQmhaMlZ6WENJc0lGd2lRVk5RTGs1RlZGd2lMQ0JjSWtKY0lpd2dYQ0pDWVdKaVlXZGxYQ0lzSUZ3aVFtRnphRndpTENCY0lrSkJVMGxEWENJc0lGd2lZbU5jSWl3Z1hDSkNRMUJNWENJc0lGd2lRbVZoYmxOb1pXeHNYQ0lzSUZ3aVFtRjBZMmdnS0ZkcGJtUnZkM012Ukc5ektWd2lMQ0JjSWtKbGNuUnlZVzVrWENJc0lGd2lRa1ZVUVZ3aUxDQmNJa0pwWjNkcFoxd2lMQ0JjSWtKcGMzUnliMXdpTENCY0lrSnBkRU5jSWl3Z1hDSkNURWxUVTF3aUxDQmNJa0pzYjJOcmJIbGNJaXdnWENKQ2JHOXZVRndpTENCY0lrSnNkV1ZjSWl3Z1hDSkNiMjljSWl3Z1hDSkNiMjl0WlhKaGJtZGNJaXdnWENKQ2IzVnlibVVnYzJobGJHd2dLR2x1WTJ4MVpHbHVaeUJpWVhOb0lHRnVaQ0JyYzJncFhDSXNJRndpUWxKRlYxd2lMQ0JjSWtKUVJVeGNJaXdnWENKQ1hDSXNJRndpUXkwdFhDSXNJRndpUXlzcklPS0FreUJKVTA4dlNVVkRJREUwT0RneVhDSXNJRndpUXlNZzRvQ1RJRWxUVHk5SlJVTWdNak15TnpCY0lpd2dYQ0pETDBGTVhDSXNJRndpUTJGamFNT3BJRTlpYW1WamRGTmpjbWx3ZEZ3aUxDQmNJa01nVTJobGJHeGNJaXdnWENKRFlXMXNYQ0lzSUZ3aVEyRjVaVzV1WlZ3aUxDQmNJa05FZFdObFhDSXNJRndpUTJWamFXeGNJaXdnWENKRFpYTnBiRndpTENCY0lrUERxWFZjSWl3Z1hDSkRaWGxzYjI1Y0lpd2dYQ0pEUmtWdVoybHVaVndpTENCY0lrTkdUVXhjSWl3Z1hDSkRaMXdpTENCY0lrTm9YQ0lzSUZ3aVEyaGhjR1ZzWENJc0lGd2lRMmhoY21sMGVWd2lMQ0JjSWtOb1lYSnRYQ0lzSUZ3aVEyaGxabHdpTENCY0lrTklTVXhNWENJc0lGd2lRMGhKVUMwNFhDSXNJRndpWTJodmJYTnJhVndpTENCY0lrTm9kV05MWENJc0lGd2lRMGxEVTF3aUxDQmNJa05wYkd0Y0lpd2dYQ0pEYVhSeWFXNWxJQ2h3Y205bmNtRnRiV2x1WnlCc1lXNW5kV0ZuWlNsY0lpd2dYQ0pEVENBb1NVSk5LVndpTENCY0lrTnNZV2x5WlZ3aUxDQmNJa05zWVhKcGIyNWNJaXdnWENKRGJHVmhibHdpTENCY0lrTnNhWEJ3WlhKY0lpd2dYQ0pEVEVsUVUxd2lMQ0JjSWtOTVNWTlVYQ0lzSUZ3aVEyeHZhblZ5WlZ3aUxDQmNJa05NVlZ3aUxDQmNJa05OVXkweVhDSXNJRndpUTA5Q1Qwd2c0b0NUSUVsVFR5OUpSVU1nTVRrNE9Wd2lMQ0JjSWtOdlltOXNVMk55YVhCMElPS0FreUJEVDBKUFRDQlRZM0pwY0hScGJtY2diR0Z1WjNWaFoyVmNJaXdnWENKRGIySnlZVndpTENCY0lrTlBSRVZjSWl3Z1hDSkRiMlptWldWVFkzSnBjSFJjSWl3Z1hDSkRiMnhrUm5WemFXOXVYQ0lzSUZ3aVEwOU5RVXhjSWl3Z1hDSkRiMjFpYVc1bFpDQlFjbTluY21GdGJXbHVaeUJNWVc1bmRXRm5aU0FvUTFCTUtWd2lMQ0JjSWtOUFRVbFVYQ0lzSUZ3aVEyOXRiVzl1SUVsdWRHVnliV1ZrYVdGMFpTQk1ZVzVuZFdGblpTQW9RMGxNS1Z3aUxDQmNJa052YlcxdmJpQk1hWE53SUNoaGJITnZJR3R1YjNkdUlHRnpJRU5NS1Z3aUxDQmNJa05QVFZCQlUxTmNJaXdnWENKRGIyMXdiMjVsYm5RZ1VHRnpZMkZzWENJc0lGd2lRMjl1YzNSeVlXbHVkQ0JJWVc1a2JHbHVaeUJTZFd4bGN5QW9RMGhTS1Z3aUxDQmNJa05QVFZSU1FVNWNJaXdnWENKRGIyNTJaWEpuWlZ3aUxDQmNJa052YjJ4Y0lpd2dYQ0pEYjNGY0lpd2dYQ0pEYjNKaGJDQTJObHdpTENCY0lrTnZjbTVjSWl3Z1hDSkRiM0pXYVhOcGIyNWNJaXdnWENKRFQxZFRSVXhjSWl3Z1hDSkRVRXhjSWl3Z1hDSkRVRXhjSWl3Z1hDSkRjbmx3ZEc5c1hDSXNJRndpWTNOb1hDSXNJRndpUTNOdmRXNWtYQ0lzSUZ3aVExTlFYQ0lzSUZ3aVExVkVRVndpTENCY0lrTjFjbXhjSWl3Z1hDSkRkWEp5ZVZ3aUxDQmNJa041WW1sc1hDSXNJRndpUTNsamJHOXVaVndpTENCY0lrTjVkR2h2Ymx3aUxDQmNJa3BoZG1GY0lpd2dYQ0pLWVhaaGMyTnlhWEIwWENJc0lGd2lUVEl3TURGY0lpd2dYQ0pOTkZ3aUxDQmNJazBqWENJc0lGd2lUV0ZqYUdsdVpTQmpiMlJsWENJc0lGd2lUVUZFSUNoTmFXTm9hV2RoYmlCQmJHZHZjbWwwYUcwZ1JHVmpiMlJsY2lsY0lpd2dYQ0pOUVVRdlNWd2lMQ0JjSWsxaFoybHJYQ0lzSUZ3aVRXRm5iV0ZjSWl3Z1hDSnRZV3RsWENJc0lGd2lUV0Z3YkdWY0lpd2dYQ0pOUVZCUVJWSWdibTkzSUhCaGNuUWdiMllnUWtsVFhDSXNJRndpVFVGU1N5MUpWaUJ1YjNjZ1ZrbFRTVTlPT2tKVlNVeEVSVkpjSWl3Z1hDSk5ZWEo1WENJc0lGd2lUVUZUVFNCTmFXTnliM052Wm5RZ1FYTnpaVzFpYkhrZ2VEZzJYQ0lzSUZ3aVRVRlVTQzFOUVZSSlExd2lMQ0JjSWsxaGRHaGxiV0YwYVdOaFhDSXNJRndpVFVGVVRFRkNYQ0lzSUZ3aVRXRjRhVzFoSUNoelpXVWdZV3h6YnlCTllXTnplVzFoS1Z3aUxDQmNJazFoZUNBb1RXRjRJRTF6Y0NEaWdKTWdSM0poY0docFkyRnNJRkJ5YjJkeVlXMXRhVzVuSUVWdWRtbHliMjV0Wlc1MEtWd2lMQ0JjSWsxaGVXRWdLRTFGVENsY0lpd2dYQ0pOUkV4Y0lpd2dYQ0pOWlhKamRYSjVYQ0lzSUZ3aVRXVnpZVndpTENCY0lrMWxkR0ZtYjI1MFhDSXNJRndpVFdsamNtOWpiMlJsWENJc0lGd2lUV2xqY205VFkzSnBjSFJjSWl3Z1hDSk5TVWxUWENJc0lGd2lUV2xzYXlBb2NISnZaM0poYlcxcGJtY2diR0Z1WjNWaFoyVXBYQ0lzSUZ3aVRVbE5TVU5jSWl3Z1hDSk5hWEpoYUZ3aUxDQmNJazFwY21GdVpHRmNJaXdnWENKTlNWWkJJRk5qY21sd2RGd2lMQ0JjSWsxTVhDSXNJRndpVFc5a1pXd2dNakEwWENJc0lGd2lUVzlrWld4cFkyRmNJaXdnWENKTmIyUjFiR0ZjSWl3Z1hDSk5iMlIxYkdFdE1sd2lMQ0JjSWsxdlpIVnNZUzB6WENJc0lGd2lUVzlvYjJ4Y0lpd2dYQ0pOVDA5Y0lpd2dYQ0pOYjNKMGNtRnVYQ0lzSUZ3aVRXOTFjMlZjSWl3Z1hDSk5VRVJjSWl3Z1hDSk5ZWFJvWTJGa1hDSXNJRndpVFZOSlRDRGlnSk1nWkdWd2NtVmpZWFJsWkNCdVlXMWxJR1p2Y2lCRFNVeGNJaXdnWENKTlUweGNJaXdnWENKTlZVMVFVMXdpTENCY0lrMTVjM1JwWXlCUWNtOW5jbUZ0YldsdVp5Qk1YQ0pkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhoVVlXZHpPaUF4TUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkhKdmNHUnZkMjQ2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlRWwwWlcxek9pQXlNQ3dnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJRzFwZUhWdGRXMGdZV3hzYjNkbFpDQnlaVzVrWlhKbFpDQnpkV2RuWlhOMGFXOXVjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTnVZVzFsT2lCY0luUmhaMmxtZVY5ZmFXNXNhVzVsWDE5emRXZG5aWE4wYVc5dWMxd2lMQ0F2THlBOExTQmpkWE4wYjIwZ1kyeGhjM051WVcxbElHWnZjaUIwYUdseklHUnliM0JrYjNkdUxDQnpieUJwZENCamIzVnNaQ0JpWlNCMFlYSm5aWFJsWkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWhZbXhsWkRvZ01Dd2dJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdjMmh2ZHlCemRXZG5aWE4wYVc5dWN5QnZiaUJtYjJOMWMxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh2YzJWUGJsTmxiR1ZqZERvZ1ptRnNjMlVnSUNBZ0x5OGdQQzBnWkc4Z2JtOTBJR2hwWkdVZ2RHaGxJSE4xWjJkbGMzUnBiMjV6SUdSeWIzQmtiM2R1SUc5dVkyVWdZVzRnYVhSbGJTQm9ZWE1nWW1WbGJpQnpaV3hsWTNSbFpGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRzVsZHlCVVlXZHBabmtvYVc1d2RYUXlMQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVhSbGJHbHpkRG9nVzF3aVFTTWdMazVGVkZ3aUxDQmNJa0VqSUNoQmVHbHZiU2xjSWl3Z1hDSkJMVEFnVTNsemRHVnRYQ0lzSUZ3aVFTdGNJaXdnWENKQkt5dGNJaXdnWENKQlFrRlFYQ0lzSUZ3aVFVSkRYQ0lzSUZ3aVFVSkRJRUZNUjA5TVhDSXNJRndpUVVKVFJWUmNJaXdnWENKQlFsTlpVMXdpTENCY0lrRkRRMXdpTENCY0lrRmpZMlZ1ZEZ3aUxDQmNJa0ZqWlNCRVFWTk1YQ0lzSUZ3aVFVTk1NbHdpTENCY0lrRjJhV056YjJaMFhDSXNJRndpUVVOVUxVbEpTVndpTENCY0lrRmpkR2x2YmlGY0lpd2dYQ0pCWTNScGIyNVRZM0pwY0hSY0lpd2dYQ0pCWkdGY0lpd2dYQ0pCWkdWdWFXNWxYQ0lzSUZ3aVFXZGtZVndpTENCY0lrRm5hV3hsYm5RZ1ZrVkZYQ0lzSUZ3aVFXZHZjbUZjSWl3Z1hDSkJTVTFOVTF3aUxDQmNJa0ZzWldaY0lpd2dYQ0pCVEVaY0lpd2dYQ0pCVEVkUFRDQTFPRndpTENCY0lrRk1SMDlNSURZd1hDSXNJRndpUVV4SFQwd2dOamhjSWl3Z1hDSkJURWRQVENCWFhDSXNJRndpUVd4cFkyVmNJaXdnWENKQmJHMWhMVEJjSWl3Z1hDSkJiV0pwWlc1MFZHRnNhMXdpTENCY0lrRnRhV2RoSUVWY0lpd2dYQ0pCVFU5VFhDSXNJRndpUVUxUVRGd2lMQ0JjSWtGd1pYZ2dLRk5oYkdWelptOXlZMlV1WTI5dEtWd2lMQ0JjSWtGUVRGd2lMQ0JjSWtGd2NHeGxVMk55YVhCMFhDSXNJRndpUVhKalhDSXNJRndpUVZKbGVIaGNJaXdnWENKQmNtZDFjMXdpTENCY0lrRnpjR1ZqZEVwY0lpd2dYQ0pCYzNObGJXSnNlU0JzWVc1bmRXRm5aVndpTENCY0lrRlVVMXdpTENCY0lrRjBaV3BwSUZCWVhDSXNJRndpUVhWMGIwaHZkR3RsZVZ3aUxDQmNJa0YxZEc5amIyUmxjbHdpTENCY0lrRjFkRzlKZEZ3aUxDQmNJa0YxZEc5TVNWTlFJQzhnVm1semRXRnNJRXhKVTFCY0lpd2dYQ0pCZG1WeVpYTjBYQ0lzSUZ3aVFWZExYQ0lzSUZ3aVFYaDFiVndpTENCY0lrRmpkR2wyWlNCVFpYSjJaWElnVUdGblpYTmNJaXdnWENKQlUxQXVUa1ZVWENJc0lGd2lRbHdpTENCY0lrSmhZbUpoWjJWY0lpd2dYQ0pDWVhOb1hDSXNJRndpUWtGVFNVTmNJaXdnWENKaVkxd2lMQ0JjSWtKRFVFeGNJaXdnWENKQ1pXRnVVMmhsYkd4Y0lpd2dYQ0pDWVhSamFDQW9WMmx1Wkc5M2N5OUViM01wWENJc0lGd2lRbVZ5ZEhKaGJtUmNJaXdnWENKQ1JWUkJYQ0lzSUZ3aVFtbG5kMmxuWENJc0lGd2lRbWx6ZEhKdlhDSXNJRndpUW1sMFExd2lMQ0JjSWtKTVNWTlRYQ0lzSUZ3aVFteHZZMnRzZVZ3aUxDQmNJa0pzYjI5UVhDSXNJRndpUW14MVpWd2lMQ0JjSWtKdmIxd2lMQ0JjSWtKdmIyMWxjbUZ1WjF3aUxDQmNJa0p2ZFhKdVpTQnphR1ZzYkNBb2FXNWpiSFZrYVc1bklHSmhjMmdnWVc1a0lHdHphQ2xjSWl3Z1hDSkNVa1ZYWENJc0lGd2lRbEJGVEZ3aUxDQmNJa0pjSWl3Z1hDSkRMUzFjSWl3Z1hDSkRLeXNnNG9DVElFbFRUeTlKUlVNZ01UUTRPREpjSWl3Z1hDSkRJeURpZ0pNZ1NWTlBMMGxGUXlBeU16STNNRndpTENCY0lrTXZRVXhjSWl3Z1hDSkRZV05vdzZrZ1QySnFaV04wVTJOeWFYQjBYQ0lzSUZ3aVF5QlRhR1ZzYkZ3aUxDQmNJa05oYld4Y0lpd2dYQ0pEWVhsbGJtNWxYQ0lzSUZ3aVEwUjFZMlZjSWl3Z1hDSkRaV05wYkZ3aUxDQmNJa05sYzJsc1hDSXNJRndpUThPcGRWd2lMQ0JjSWtObGVXeHZibHdpTENCY0lrTkdSVzVuYVc1bFhDSXNJRndpUTBaTlRGd2lMQ0JjSWtOblhDSXNJRndpUTJoY0lpd2dYQ0pEYUdGd1pXeGNJaXdnWENKRGFHRnlhWFI1WENJc0lGd2lRMmhoY20xY0lpd2dYQ0pEYUdWbVhDSXNJRndpUTBoSlRFeGNJaXdnWENKRFNFbFFMVGhjSWl3Z1hDSmphRzl0YzJ0cFhDSXNJRndpUTJoMVkwdGNJaXdnWENKRFNVTlRYQ0lzSUZ3aVEybHNhMXdpTENCY0lrTnBkSEpwYm1VZ0tIQnliMmR5WVcxdGFXNW5JR3hoYm1kMVlXZGxLVndpTENCY0lrTk1JQ2hKUWswcFhDSXNJRndpUTJ4aGFYSmxYQ0lzSUZ3aVEyeGhjbWx2Ymx3aUxDQmNJa05zWldGdVhDSXNJRndpUTJ4cGNIQmxjbHdpTENCY0lrTk1TVkJUWENJc0lGd2lRMHhKVTFSY0lpd2dYQ0pEYkc5cWRYSmxYQ0lzSUZ3aVEweFZYQ0lzSUZ3aVEwMVRMVEpjSWl3Z1hDSkRUMEpQVENEaWdKTWdTVk5QTDBsRlF5QXhPVGc1WENJc0lGd2lRMjlpYjJ4VFkzSnBjSFFnNG9DVElFTlBRazlNSUZOamNtbHdkR2x1WnlCc1lXNW5kV0ZuWlZ3aUxDQmNJa052WW5KaFhDSXNJRndpUTA5RVJWd2lMQ0JjSWtOdlptWmxaVk5qY21sd2RGd2lMQ0JjSWtOdmJHUkdkWE5wYjI1Y0lpd2dYQ0pEVDAxQlRGd2lMQ0JjSWtOdmJXSnBibVZrSUZCeWIyZHlZVzF0YVc1bklFeGhibWQxWVdkbElDaERVRXdwWENJc0lGd2lRMDlOU1ZSY0lpd2dYQ0pEYjIxdGIyNGdTVzUwWlhKdFpXUnBZWFJsSUV4aGJtZDFZV2RsSUNoRFNVd3BYQ0lzSUZ3aVEyOXRiVzl1SUV4cGMzQWdLR0ZzYzI4Z2EyNXZkMjRnWVhNZ1Ewd3BYQ0lzSUZ3aVEwOU5VRUZUVTF3aUxDQmNJa052YlhCdmJtVnVkQ0JRWVhOallXeGNJaXdnWENKRGIyNXpkSEpoYVc1MElFaGhibVJzYVc1bklGSjFiR1Z6SUNoRFNGSXBYQ0lzSUZ3aVEwOU5WRkpCVGx3aUxDQmNJa052Ym5abGNtZGxYQ0lzSUZ3aVEyOXZiRndpTENCY0lrTnZjVndpTENCY0lrTnZjbUZzSURZMlhDSXNJRndpUTI5eWJsd2lMQ0JjSWtOdmNsWnBjMmx2Ymx3aUxDQmNJa05QVjFORlRGd2lMQ0JjSWtOUVRGd2lMQ0JjSWtOUVRGd2lMQ0JjSWtOeWVYQjBiMnhjSWl3Z1hDSmpjMmhjSWl3Z1hDSkRjMjkxYm1SY0lpd2dYQ0pEVTFCY0lpd2dYQ0pEVlVSQlhDSXNJRndpUTNWeWJGd2lMQ0JjSWtOMWNuSjVYQ0lzSUZ3aVEzbGlhV3hjSWl3Z1hDSkRlV05zYjI1bFhDSXNJRndpUTNsMGFHOXVYQ0lzSUZ3aVNtRjJZVndpTENCY0lrcGhkbUZ6WTNKcGNIUmNJaXdnWENKTk1qQXdNVndpTENCY0lrMDBYQ0lzSUZ3aVRTTmNJaXdnWENKTllXTm9hVzVsSUdOdlpHVmNJaXdnWENKTlFVUWdLRTFwWTJocFoyRnVJRUZzWjI5eWFYUm9iU0JFWldOdlpHVnlLVndpTENCY0lrMUJSQzlKWENJc0lGd2lUV0ZuYVd0Y0lpd2dYQ0pOWVdkdFlWd2lMQ0JjSW0xaGEyVmNJaXdnWENKTllYQnNaVndpTENCY0lrMUJVRkJGVWlCdWIzY2djR0Z5ZENCdlppQkNTVk5jSWl3Z1hDSk5RVkpMTFVsV0lHNXZkeUJXU1ZOSlQwNDZRbFZKVEVSRlVsd2lMQ0JjSWsxaGNubGNJaXdnWENKTlFWTk5JRTFwWTNKdmMyOW1kQ0JCYzNObGJXSnNlU0I0T0RaY0lpd2dYQ0pOUVZSSUxVMUJWRWxEWENJc0lGd2lUV0YwYUdWdFlYUnBZMkZjSWl3Z1hDSk5RVlJNUVVKY0lpd2dYQ0pOWVhocGJXRWdLSE5sWlNCaGJITnZJRTFoWTNONWJXRXBYQ0lzSUZ3aVRXRjRJQ2hOWVhnZ1RYTndJT0tBa3lCSGNtRndhR2xqWVd3Z1VISnZaM0poYlcxcGJtY2dSVzUyYVhKdmJtMWxiblFwWENJc0lGd2lUV0Y1WVNBb1RVVk1LVndpTENCY0lrMUVURndpTENCY0lrMWxjbU4xY25sY0lpd2dYQ0pOWlhOaFhDSXNJRndpVFdWMFlXWnZiblJjSWl3Z1hDSk5hV055YjJOdlpHVmNJaXdnWENKTmFXTnliMU5qY21sd2RGd2lMQ0JjSWsxSlNWTmNJaXdnWENKTmFXeHJJQ2h3Y205bmNtRnRiV2x1WnlCc1lXNW5kV0ZuWlNsY0lpd2dYQ0pOU1UxSlExd2lMQ0JjSWsxcGNtRm9YQ0lzSUZ3aVRXbHlZVzVrWVZ3aUxDQmNJazFKVmtFZ1UyTnlhWEIwWENJc0lGd2lUVXhjSWl3Z1hDSk5iMlJsYkNBeU1EUmNJaXdnWENKTmIyUmxiR2xqWVZ3aUxDQmNJazF2WkhWc1lWd2lMQ0JjSWsxdlpIVnNZUzB5WENJc0lGd2lUVzlrZFd4aExUTmNJaXdnWENKTmIyaHZiRndpTENCY0lrMVBUMXdpTENCY0lrMXZjblJ5WVc1Y0lpd2dYQ0pOYjNWelpWd2lMQ0JjSWsxUVJGd2lMQ0JjSWsxaGRHaGpZV1JjSWl3Z1hDSk5VMGxNSU9LQWt5QmtaWEJ5WldOaGRHVmtJRzVoYldVZ1ptOXlJRU5KVEZ3aUxDQmNJazFUVEZ3aUxDQmNJazFWVFZCVFhDSXNJRndpVFhsemRHbGpJRkJ5YjJkeVlXMXRhVzVuSUV4Y0lsMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhlRlJoWjNNNklERXdMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtjbTl3Wkc5M2Jqb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNFNYUmxiWE02SURJd0xDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2JXbDRkVzExYlNCaGJHeHZkMlZrSUhKbGJtUmxjbVZrSUhOMVoyZGxjM1JwYjI1elhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzI1aGJXVTZJRndpWENJc0lDOHZJRHd0SUdOMWMzUnZiU0JqYkdGemMyNWhiV1VnWm05eUlIUm9hWE1nWkhKdmNHUnZkMjRzSUhOdklHbDBJR052ZFd4a0lHSmxJSFJoY21kbGRHVmtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm1GaWJHVmtPaUF3TENBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCemFHOTNJSE4xWjJkbGMzUnBiMjV6SUc5dUlHWnZZM1Z6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaVTl1VTJWc1pXTjBPaUJtWVd4elpTQWdJQ0F2THlBOExTQmtieUJ1YjNRZ2FHbGtaU0IwYUdVZ2MzVm5aMlZ6ZEdsdmJuTWdaSEp2Y0dSdmQyNGdiMjVqWlNCaGJpQnBkR1Z0SUdoaGN5QmlaV1Z1SUhObGJHVmpkR1ZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1pYaGhiWEJzWlRRZ1BTQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0JFVDAwZ1pXeGxiV1Z1ZEhNZ2VXOTFJSGRwYzJnZ2RHOGdjbVZ3YkdGalpTQjNhWFJvSUZSaFoybG1lVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibkIxZERFZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkydDBYM1JoWjJsbWVWODRYQ0lwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCSmJtbDBhV0ZzYVhwbElGUmhaMmxtZVNCamIyMXdiMjVsYm5SeklHOXVJSFJvWlNCaFltOTJaU0JwYm5CMWRITmNjbHh1SUNBZ0lDQWdJQ0J1WlhjZ1ZHRm5hV1o1S0dsdWNIVjBNU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnlJR1Y0WVcxd2JHVkRkWE4wYjIxVGRXZG5aWE4wYVc5dWN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYm5CMWRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5TnJkRjkwWVdkcFpubGZZM1Z6ZEc5dEp5a3NYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRWx1YVhRZ1ZHRm5hV1o1SUhOamNtbHdkQ0J2YmlCMGFHVWdZV0p2ZG1VZ2FXNXdkWFJ6WEhKY2JpQWdJQ0FnSUNBZ2RHRm5hV1o1SUQwZ2JtVjNJRlJoWjJsbWVTaHBibkIxZEN3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHbDBaV3hwYzNRNklGdGNJa0p2YjNSemRISmhjRndpTENCY0lrRnVaM1ZzWVhKY0lpd2dYQ0pTWldGamRGd2lMQ0JjSWxaMVpWd2lYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk2SUZ3aVZIbHdaU0J6YjIxbGRHaHBibWRjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1bWIzSmpaVmRvYVhSbGJHbHpkRG9nZEhKMVpWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCVGRXZG5aWE4wYVc5dWMxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCemRXZG5aWE4wYVc5dWN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5TnJkRjkwWVdkcFpubGZZM1Z6ZEc5dFgzTjFaMmRsYzNScGIyNXpKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZOMVoyZGxjM1JwYjI0Z2FYUmxiU0JqYkdsamExeHlYRzRnSUNBZ0lDQWdJRXRVVlhScGJDNXZiaWh6ZFdkblpYTjBhVzl1Y3l3Z0lDZGJaR0YwWVMxcmRDMXpkV2RuWlhOMGFXOXVQVndpZEhKMVpWd2lYU2NzSUNkamJHbGpheWNzSUdaMWJtTjBhVzl1S0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRm5hV1o1TG1Ga1pGUmhaM01vVzNSb2FYTXVhVzV1WlhKVVpYaDBYU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdaWGhoYlhCc1pVTnZkVzUwY25rZ1BTQW9LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhSaFoybG1lU0E5SUc1bGR5QlVZV2RwWm5rb1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduSTJ0MFgzUmhaMmxtZVY5amIzVnVkSEo1Snlrc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNhVzFwZEdWeWN6b2diblZzYkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1Z6T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZV2M2SUdaMWJtTjBhVzl1SUNoMFlXZEVZWFJoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMjkxYm5SeWVWQmhkR2dnUFNCb2IzTjBWWEpzSUNzZ0oyMWxaR2xoTDJac1lXZHpMeWNnS3lCMFlXZEVZWFJoTG5aaGJIVmxMblJ2VEc5M1pYSkRZWE5sS0NrdWNtVndiR0ZqWlNndlhGeHpLeTluTENBbkxTY3BJQ3NnSnk1emRtY25PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGOUZVME5CVUVWZlUxUkJVbFJmWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJnUEhSaFp5QjBhWFJzWlQwbkpIdDBZV2RFWVhSaExuWmhiSFZsZlNjZ1kyOXVkR1Z1ZEdWa2FYUmhZbXhsUFNkbVlXeHpaU2NnYzNCbGJHeGphR1ZqYXoxY0ltWmhiSE5sWENJZ1kyeGhjM005SjNSaFoybG1lVjlmZEdGbklDUjdkR0ZuUkdGMFlTNWpiR0Z6Y3lBL0lIUmhaMFJoZEdFdVkyeGhjM01nT2lCY0lsd2lmU2NnSkh0MGFHbHpMbWRsZEVGMGRISnBZblYwWlhNb2RHRm5SR0YwWVNsOVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDRJSFJwZEd4bFBTZHlaVzF2ZG1VZ2RHRm5KeUJqYkdGemN6MG5kR0ZuYVdaNVgxOTBZV2RmWDNKbGJXOTJaVUowYmljK1BDOTRQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKa0xXWnNaWGdnWVd4cFoyNHRhWFJsYlhNdFkyVnVkR1Z5WENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1I3ZEdGblJHRjBZUzVqYjJSbElEOWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdQR2x0WnlCdmJtVnljbTl5UFZ3aWRHaHBjeTV6ZEhsc1pTNTJhWE5wWW1sc2FYUjVJRDBnSjJocFpHUmxiaWRjSWlCamJHRnpjejFjSW5jdE1qVndlQ0J5YjNWdVpHVmtMV05wY21Oc1pTQnRaUzB5WENJZ2MzSmpQU2NrZTJOdmRXNTBjbmxRWVhSb2ZTY2dMejVnSURvZ0p5ZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005SjNSaFoybG1lVjlmZEdGbkxYUmxlSFFuUGlSN2RHRm5SR0YwWVM1MllXeDFaWDA4TDNOd1lXNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSaFp6NWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUY5RlUwTkJVRVZmUlU1RVgxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhSamFDQW9aWEp5S1NCN0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEp2Y0dSdmQyNUpkR1Z0T2lCbWRXNWpkR2x2YmlBb2RHRm5SR0YwWVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR052ZFc1MGNubFFZWFJvSUQwZ2FHOXpkRlZ5YkNBcklDZHRaV1JwWVM5bWJHRm5jeThuSUNzZ2RHRm5SR0YwWVM1MllXeDFaUzUwYjB4dmQyVnlRMkZ6WlNncExuSmxjR3hoWTJVb0wxeGNjeXN2Wnl3Z0p5MG5LU0FySUNjdWMzWm5KenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmZSVk5EUVZCRlgxTlVRVkpVWDF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWUR4a2FYWWdZMnhoYzNNOUozUmhaMmxtZVY5ZlpISnZjR1J2ZDI1ZlgybDBaVzBnSkh0MFlXZEVZWFJoTG1Oc1lYTnpJRDhnZEdGblJHRjBZUzVqYkdGemN5QTZJRndpWENKOUp6NWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdsdFp5QnZibVZ5Y205eVBWd2lkR2hwY3k1emRIbHNaUzUyYVhOcFltbHNhWFI1SUQwZ0oyaHBaR1JsYmlkY0lpQmpiR0Z6Y3oxY0luY3RNalZ3ZUNCeWIzVnVaR1ZrTFdOcGNtTnNaU0J0WlMweVhDSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjbU05SnlSN1kyOTFiblJ5ZVZCaGRHaDlKeUF2UGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmo0a2UzUmhaMFJoZEdFdWRtRnNkV1Y5UEM5emNHRnVQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBtQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWDBWVFEwRlFSVjlGVGtSZlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oZEdOb0lDaGxjbklwSUhzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxibVp2Y21ObFYyaHBkR1ZzYVhOME9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzYUdsMFpXeHBjM1E2SUZ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklDZEJjbWRsYm5ScGJtRW5MQ0JqYjJSbE9pQW5RVkluSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQW5RWFZ6ZEhKaGJHbGhKeXdnWTI5a1pUb2dKMEZWSnl3Z2MyVmhjbU5vUW5rNklDZGlaV0ZqYUN3Z2MzVmlMWFJ5YjNCcFkyRnNKeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QjJZV3gxWlRvZ0owRjFjM1J5YVdFbkxDQmpiMlJsT2lBblFWUW5JSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIWmhiSFZsT2lBblFuSmhlbWxzSnl3Z1kyOWtaVG9nSjBKU0p5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMllXeDFaVG9nSjBOb2FXNWhKeXdnWTI5a1pUb2dKME5PSnlCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUIyWVd4MVpUb2dKMFZuZVhCMEp5d2dZMjlrWlRvZ0owVkhKeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QjJZV3gxWlRvZ0owWnBibXhoYm1RbkxDQmpiMlJsT2lBblJra25JSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIWmhiSFZsT2lBblJuSmhibU5sSnl3Z1kyOWtaVG9nSjBaU0p5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMllXeDFaVG9nSjBkbGNtMWhibmtuTENCamIyUmxPaUFuUkVVbklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUFuU0c5dVp5QkxiMjVuSnl3Z1kyOWtaVG9nSjBoTEp5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMllXeDFaVG9nSjBoMWJtZGhjbmtuTENCamIyUmxPaUFuU0ZVbklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUFuU1dObGJHRnVaQ2NzSUdOdlpHVTZJQ2RKVXljZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJQ2RKYm1ScFlTY3NJR052WkdVNklDZEpUaWNnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklDZEpibVJ2Ym1WemFXRW5MQ0JqYjJSbE9pQW5TVVFuSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQW5TWFJoYkhrbkxDQmpiMlJsT2lBblNWUW5JSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIWmhiSFZsT2lBblNtRnRZV2xqWVNjc0lHTnZaR1U2SUNkS1RTY2dmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhzZ2RtRnNkV1U2SUNkS1lYQmhiaWNzSUdOdlpHVTZJQ2RLVUNjZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJQ2RLWlhKelpYa25MQ0JqYjJSbE9pQW5Ta1VuSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQW5USFY0WlcxaWIzVnlaeWNzSUdOdlpHVTZJQ2RNVlNjZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJQ2ROWlhocFkyOG5MQ0JqYjJSbE9pQW5UVmduSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQW5UbVYwYUdWeWJHRnVaSE1uTENCamIyUmxPaUFuVGt3bklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUFuVG1WM0lGcGxZV3hoYm1RbkxDQmpiMlJsT2lBblRsb25JSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIWmhiSFZsT2lBblRtOXlkMkY1Snl3Z1kyOWtaVG9nSjA1UEp5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMllXeDFaVG9nSjFCb2FXeHBjSEJwYm1Wekp5d2dZMjlrWlRvZ0oxQklKeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QjJZV3gxWlRvZ0oxTnBibWRoY0c5eVpTY3NJR052WkdVNklDZFRSeWNnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklDZFRiM1YwYUNCTGIzSmxZU2NzSUdOdlpHVTZJQ2RMVWljZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJQ2RUZDJWa1pXNG5MQ0JqYjJSbE9pQW5VMFVuSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQW5VM2RwZEhwbGNteGhibVFuTENCamIyUmxPaUFuUTBnbklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUFuVkdoaGFXeGhibVFuTENCamIyUmxPaUFuVkVnbklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUFuVld0eVlXbHVaU2NzSUdOdlpHVTZJQ2RWUVNjZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJQ2RWYm1sMFpXUWdTMmx1WjJSdmJTY3NJR052WkdVNklDZEhRaWNnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklDZFZibWwwWldRZ1UzUmhkR1Z6Snl3Z1kyOWtaVG9nSjFWVEp5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMllXeDFaVG9nSjFacFpYUnVZVzBuTENCamIyUmxPaUFuVms0bklIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1hTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pISnZjR1J2ZDI0NklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WVdKc1pXUTZJREVzSUM4dklITjFaMmRsYzNRZ2RHRm5jeUJoWm5SbGNpQmhJSE5wYm1kc1pTQmphR0Z5WVdOMFpYSWdhVzV3ZFhSY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56Ym1GdFpUb2dKMlY0ZEhKaExYQnliM0JsY25ScFpYTW5JQzh2SUdOMWMzUnZiU0JqYkdGemN5Qm1iM0lnZEdobElITjFaMmRsYzNScGIyNXpJR1J5YjNCa2IzZHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdMeThnYldGd0lIUmhaM01uSUhaaGJIVmxjeUIwYnlCMGFHbHpJSEJ5YjNCbGNuUjVJRzVoYldVc0lITnZJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2QybHNiQ0JpWlNCMGFHVWdZV04wZFdGc0lIWmhiSFZsSUdGdVpDQnViM1FnZEdobElIQnlhVzUwWldRZ2RtRnNkV1VnYjI0Z2RHaGxJSE5qY21WbGJseHlYRzRnSUNBZ0lDQWdJSDBwWEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUdGa1pDQjBhR1VnWm1seWMzUWdNaUIwWVdkeklHRnVaQ0J0WVd0bGN5QjBhR1Z0SUhKbFlXUnZibXg1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFJoWjNOVWIwRmtaQ0E5SUhSaFoybG1lUzV6WlhSMGFXNW5jeTUzYUdsMFpXeHBjM1F1YzJ4cFkyVW9NQ3dnTWlrN1hISmNiaUFnSUNBZ0lDQWdkR0ZuYVdaNUxtRmtaRlJoWjNNb2RHRm5jMVJ2UVdSa0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQmxlR0Z0Y0d4bFZYTmxjbk1nUFNBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2x1Y0hWMFJXeHRJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25JMnQwWDNSaFoybG1lVjkxYzJWeWN5Y3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWMyVnljMHhwYzNRZ1BTQmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklERXNJRzVoYldVNklDZEZiVzFoSUZOdGFYUm9KeXdnWVhaaGRHRnlPaUFuWVhaaGRHRnljeTh6TURBdE5pNXFjR2NuTENCbGJXRnBiRG9nSjJVdWMyMXBkR2hBYTNCdFp5NWpiMjB1WVhVbklIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIc2dkbUZzZFdVNklESXNJRzVoYldVNklDZE5ZWGdnVTIxcGRHZ25MQ0JoZG1GMFlYSTZJQ2RoZG1GMFlYSnpMek13TUMweExtcHdaeWNzSUdWdFlXbHNPaUFuYldGNFFHdDBMbU52YlNjZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QjJZV3gxWlRvZ015d2dibUZ0WlRvZ0oxTmxZVzRnUW1WaGJpY3NJR0YyWVhSaGNqb2dKMkYyWVhSaGNuTXZNekF3TFRVdWFuQm5KeXdnWlcxaGFXdzZJQ2R6WldGdVFHUmxiR3hwZEc4dVkyOXRKeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3SUhaaGJIVmxPaUEwTENCdVlXMWxPaUFuUW5KcFlXNGdRMjk0Snl3Z1lYWmhkR0Z5T2lBbllYWmhkR0Z5Y3k4ek1EQXRNalV1YW5Cbkp5d2daVzFoYVd3NklDZGljbWxoYmtCbGVHTm9ZVzVuWlM1amIyMG5JSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHNnZG1Gc2RXVTZJRFVzSUc1aGJXVTZJQ2RHY21GdVkybHpJRTFwZEdOb1lXMG5MQ0JoZG1GMFlYSTZJQ2RoZG1GMFlYSnpMek13TUMwNUxtcHdaeWNzSUdWdFlXbHNPaUFuWmk1dGFYUmphR0Z0UUd0d2JXY3VZMjl0TG1GMUp5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQTJMQ0J1WVcxbE9pQW5SR0Z1SUZkcGJITnZiaWNzSUdGMllYUmhjam9nSjJGMllYUmhjbk12TXpBd0xUSXpMbXB3Wnljc0lHVnRZV2xzT2lBblpHRnRRR052Ym5OcGJIUnBibWN1WTI5dEp5QjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjdJSFpoYkhWbE9pQTNMQ0J1WVcxbE9pQW5RVzVoSUVOeWIzZHVKeXdnWVhaaGRHRnlPaUFuWVhaaGRHRnljeTh6TURBdE1USXVhbkJuSnl3Z1pXMWhhV3c2SUNkaGJtRXVZMlpBYkdsdGRHVnNMbU52YlNjZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QjJZV3gxWlRvZ09Dd2dibUZ0WlRvZ0owcHZhRzRnVFdsc2JHVnlKeXdnWVhaaGRHRnlPaUFuWVhaaGRHRnljeTh6TURBdE1UTXVhbkJuSnl3Z1pXMWhhV3c2SUNkdGFXeHNaWEpBYldGd2NHeGxMbU52YlNjZ2ZWeHlYRzRnSUNBZ0lDQWdJRjA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFJoWjFSbGJYQnNZWFJsS0hSaFowUmhkR0VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4MFlXY2dkR2wwYkdVOVhDSWtleWgwWVdkRVlYUmhMblJwZEd4bElIeDhJSFJoWjBSaGRHRXVaVzFoYVd3cGZWd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGJuUmxaR2wwWVdKc1pUMG5abUZzYzJVblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndaV3hzWTJobFkyczlKMlpoYkhObEoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZV0pKYm1SbGVEMWNJaTB4WENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENJa2UzUm9hWE11YzJWMGRHbHVaM011WTJ4aGMzTk9ZVzFsY3k1MFlXZDlJQ1I3ZEdGblJHRjBZUzVqYkdGemN5QS9JSFJoWjBSaGRHRXVZMnhoYzNNZ09pQmNJbHdpZlZ3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjdkR2hwY3k1blpYUkJkSFJ5YVdKMWRHVnpLSFJoWjBSaGRHRXBmVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThlQ0IwYVhSc1pUMG5KeUJqYkdGemN6MG5kR0ZuYVdaNVgxOTBZV2RmWDNKbGJXOTJaVUowYmljZ2NtOXNaVDBuWW5WMGRHOXVKeUJoY21saExXeGhZbVZzUFNkeVpXMXZkbVVnZEdGbkp6NDhMM2crWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1RdFpteGxlQ0JoYkdsbmJpMXBkR1Z0Y3kxalpXNTBaWEpjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MG5kR0ZuYVdaNVgxOTBZV2RmWDJGMllYUmhjaTEzY21Gd0lIQnpMVEFuUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR2x0WnlCdmJtVnljbTl5UFZ3aWRHaHBjeTV6ZEhsc1pTNTJhWE5wWW1sc2FYUjVQU2RvYVdSa1pXNG5YQ0lnWTJ4aGMzTTlYQ0p5YjNWdVpHVmtMV05wY21Oc1pTQjNMVEkxY0hnZ2JXVXRNbHdpSUhOeVl6MWNJaVI3YUc5emRGVnliSDF0WldScFlTOGtlM1JoWjBSaGRHRXVZWFpoZEdGeWZWd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005SjNSaFoybG1lVjlmZEdGbkxYUmxlSFFuUGlSN2RHRm5SR0YwWVM1dVlXMWxmVHd2YzNCaGJqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmRHRm5QbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6ZFdkblpYTjBhVzl1U1hSbGJWUmxiWEJzWVhSbEtIUmhaMFJoZEdFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnSkh0MGFHbHpMbWRsZEVGMGRISnBZblYwWlhNb2RHRm5SR0YwWVNsOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTTlKM1JoWjJsbWVWOWZaSEp2Y0dSdmQyNWZYMmwwWlcwZ1pDMW1iR1Y0SUdGc2FXZHVMV2wwWlcxekxXTmxiblJsY2lBa2UzUmhaMFJoZEdFdVkyeGhjM01nUHlCMFlXZEVZWFJoTG1Oc1lYTnpJRG9nWENKY0luMG5YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRmlhVzVrWlhnOVhDSXdYQ0pjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMnhsUFZ3aWIzQjBhVzl1WENJK1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjdkR0ZuUkdGMFlTNWhkbUYwWVhJZ1B5QmdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelBTZDBZV2RwWm5sZlgyUnliM0JrYjNkdVgxOXBkR1Z0WDE5aGRtRjBZWEl0ZDNKaGNDQnRaUzB5Sno1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFXMW5JRzl1WlhKeWIzSTlYQ0owYUdsekxuTjBlV3hsTG5acGMybGlhV3hwZEhrOUoyaHBaR1JsYmlkY0lpQWdZMnhoYzNNOVhDSnliM1Z1WkdWa0xXTnBjbU5zWlNCM0xUVXdjSGdnYldVdE1sd2lJSE55WXoxY0lpUjdhRzl6ZEZWeWJIMXRaV1JwWVM4a2UzUmhaMFJoZEdFdVlYWmhkR0Z5ZlZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStZQ0E2SUNjblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW1RdFpteGxlQ0JtYkdWNExXTnZiSFZ0Ymx3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM1J5YjI1blBpUjdkR0ZuUkdGMFlTNXVZVzFsZlR3dmMzUnliMjVuUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiajRrZTNSaFowUmhkR0V1WlcxaGFXeDlQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHQmNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUdsdWFYUnBZV3hwZW1VZ1ZHRm5hV1o1SUc5dUlIUm9aU0JoWW05MlpTQnBibkIxZENCdWIyUmxJSEpsWm1WeVpXNWpaVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjBZV2RwWm5rZ1BTQnVaWGNnVkdGbmFXWjVLR2x1Y0hWMFJXeHRMQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJoWjFSbGVIUlFjbTl3T2lBbmJtRnRaU2NzSUM4dklIWmxjbmtnYVcxd2IzSjBZVzUwSUhOcGJtTmxJR0VnWTNWemRHOXRJSFJsYlhCc1lYUmxJR2x6SUhWelpXUWdkMmwwYUNCMGFHbHpJSEJ5YjNCbGNuUjVJR0Z6SUhSbGVIUXVJR0ZzYkc5M2N5QjBlWEJwYm1jZ1lTQmNJblpoYkhWbFhDSWdiM0lnWVNCY0ltNWhiV1ZjSWlCMGJ5QnRZWFJqYUNCcGJuQjFkQ0IzYVhSb0lIZG9hWFJsYkdsemRGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJtWnZjbU5sVjJocGRHVnNhWE4wT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphMmx3U1c1MllXeHBaRG9nZEhKMVpTd2dMeThnWkc4Z2JtOTBJSEpsYlhCdmNtRnlhV3g1SUdGa1pDQnBiblpoYkdsa0lIUmhaM05jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaSEp2Y0dSdmQyNDZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2IzTmxUMjVUWld4bFkzUTZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzVoWW14bFpEb2dNQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpibUZ0WlRvZ0ozVnpaWEp6TFd4cGMzUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWaGNtTm9TMlY1Y3pvZ1d5ZHVZVzFsSnl3Z0oyVnRZV2xzSjEwZ0lDOHZJSFpsY25rZ2FXMXdiM0owWVc1MElIUnZJSE5sZENCaWVTQjNhR2xqYUNCclpYbHpJSFJ2SUhObFlYSmphQ0JtYjNJZ2MzVm5aMlZ6ZEhScGIyNXpJSGRvWlc0Z2RIbHdhVzVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRm5PaUIwWVdkVVpXMXdiR0YwWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnliM0JrYjNkdVNYUmxiVG9nYzNWbloyVnpkR2x2YmtsMFpXMVVaVzF3YkdGMFpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHbDBaV3hwYzNRNklIVnpaWEp6VEdsemRGeHlYRzRnSUNBZ0lDQWdJSDBwWEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJoWjJsbWVTNXZiaWduWkhKdmNHUnZkMjQ2YzJodmR5QmtjbTl3Wkc5M2JqcDFjR1JoZEdWa0p5d2diMjVFY205d1pHOTNibE5vYjNjcFhISmNiaUFnSUNBZ0lDQWdkR0ZuYVdaNUxtOXVLQ2RrY205d1pHOTNianB6Wld4bFkzUW5MQ0J2YmxObGJHVmpkRk4xWjJkbGMzUnBiMjRwWEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCaFpHUkJiR3hUZFdkblpYTjBhVzl1YzBWc2JUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyNUVjbTl3Wkc5M2JsTm9iM2NvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaSEp2Y0dSdmQyNURiMjUwWlc1MFJXeHRJRDBnWlM1a1pYUmhhV3d1ZEdGbmFXWjVMa1JQVFM1a2NtOXdaRzkzYmk1amIyNTBaVzUwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJoWjJsbWVTNXpkV2RuWlhOMFpXUk1hWE4wU1hSbGJYTXViR1Z1WjNSb0lENGdNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmtRV3hzVTNWbloyVnpkR2x2Ym5ORmJHMGdQU0JuWlhSQlpHUkJiR3hUZFdkblpYTjBhVzl1YzBWc2JTZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2x1YzJWeWRDQmNJbUZrWkVGc2JGTjFaMmRsYzNScGIyNXpSV3h0WENJZ1lYTWdkR2hsSUdacGNuTjBJR1ZzWlcxbGJuUWdhVzRnZEdobElITjFaMmRsYzNScGIyNXpJR3hwYzNSY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnliM0JrYjNkdVEyOXVkR1Z1ZEVWc2JTNXBibk5sY25SQ1pXWnZjbVVvWVdSa1FXeHNVM1ZuWjJWemRHbHZibk5GYkcwc0lHUnliM0JrYjNkdVEyOXVkR1Z1ZEVWc2JTNW1hWEp6ZEVOb2FXeGtLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2YmxObGJHVmpkRk4xWjJkbGMzUnBiMjRvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzVrWlhSaGFXd3VaV3h0SUQwOUlHRmtaRUZzYkZOMVoyZGxjM1JwYjI1elJXeHRLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGbmFXWjVMbVJ5YjNCa2IzZHVMbk5sYkdWamRFRnNiQzVqWVd4c0tIUmhaMmxtZVNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqY21WaGRHVWdZU0JjSW1Ga1pDQmhiR3hjSWlCamRYTjBiMjBnYzNWbloyVnpkR2x2YmlCbGJHVnRaVzUwSUdWMlpYSjVJSFJwYldVZ2RHaGxJR1J5YjNCa2IzZHVJR05vWVc1blpYTmNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJuWlhSQlpHUkJiR3hUZFdkblpYTjBhVzl1YzBWc2JTZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzNWbloyVnpkR2x2Ym5NZ2FYUmxiWE1nYzJodmRXeGtJR0psSUdKaGMyVmtJRzl1SUZ3aVpISnZjR1J2ZDI1SmRHVnRYQ0lnZEdWdGNHeGhkR1ZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUmhaMmxtZVM1d1lYSnpaVlJsYlhCc1lYUmxLQ2RrY205d1pHOTNia2wwWlcwbkxDQmJlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTTZJRndpWVdSa1FXeHNYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUJjSWtGa1pDQmhiR3hjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnRZV2xzT2lCMFlXZHBabmt1YzJWMGRHbHVaM011ZDJocGRHVnNhWE4wTG5KbFpIVmpaU2htZFc1amRHbHZiaUFvY21WdFlXbHVhVzVuVTNWbloyVnpkR2x2Ym5Nc0lHbDBaVzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR0ZuYVdaNUxtbHpWR0ZuUkhWd2JHbGpZWFJsS0dsMFpXMHVkbUZzZFdVcElEOGdjbVZ0WVdsdWFXNW5VM1ZuWjJWemRHbHZibk1nT2lCeVpXMWhhVzVwYm1kVGRXZG5aWE4wYVc5dWN5QXJJREZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lEQXBJQ3NnWENJZ1RXVnRZbVZ5YzF3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxZFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QlFkV0pzYVdNZ1JuVnVZM1JwYjI1elhISmNiaUFnSUNBZ0lDQWdhVzVwZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bE1TZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bE1pZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bE15Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bE5DZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bFEzVnpkRzl0VTNWbloyVnpkR2x2Ym5Nb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaGhiWEJzWlVOdmRXNTBjbmtvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoaGJYQnNaVlZ6WlhKektDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVmU2dwTzF4eVhHNWNjbHh1THk4Z1QyNGdaRzlqZFcxbGJuUWdjbVZoWkhsY2NseHVTMVJWZEdsc0xtOXVSRTlOUTI5dWRHVnVkRXh2WVdSbFpDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0JMVkVadmNtMXpWR0ZuYVdaNVJHVnRiM011YVc1cGRDZ3BPMXh5WEc1OUtUdGNjbHh1SWwwc0ltNWhiV1Z6SWpwYklrdFVSbTl5YlhOVVlXZHBabmxFWlcxdmN5SXNJbVY0WVcxd2JHVXhJaXdpWld4bGJXVnVkQ0lzSW1sdWNIVjBNU0lzSW1SdlkzVnRaVzUwSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW1sdWNIVjBNaUlzSWxSaFoybG1lU0lzSW5Cc1lXTmxhRzlzWkdWeUlpd2laWGhoYlhCc1pUSWlMQ0pwYm5CMWRETWlMQ0psZUdGdGNHeGxNeUlzSW5kb2FYUmxiR2x6ZENJc0ltMWhlRlJoWjNNaUxDSmtjbTl3Wkc5M2JpSXNJbTFoZUVsMFpXMXpJaXdpWTJ4aGMzTnVZVzFsSWl3aVpXNWhZbXhsWkNJc0ltTnNiM05sVDI1VFpXeGxZM1FpTENKbGVHRnRjR3hsTkNJc0ltVjRZVzF3YkdWRGRYTjBiMjFUZFdkblpYTjBhVzl1Y3lJc0ltbHVjSFYwSWl3aWRHRm5hV1o1SWl3aVpXNW1iM0pqWlZkb2FYUmxiR2x6ZENJc0luTjFaMmRsYzNScGIyNXpJaXdpUzFSVmRHbHNJaXdpYjI0aUxDSmxJaXdpWVdSa1ZHRm5jeUlzSW1sdWJtVnlWR1Y0ZENJc0ltVjRZVzF3YkdWRGIzVnVkSEo1SWl3aVpHVnNhVzFwZEdWeWN5SXNJblJsYlhCc1lYUmxjeUlzSW5SaFp5SXNJblJoWjBSaGRHRWlMQ0pqYjNWdWRISjVVR0YwYUNJc0ltaHZjM1JWY213aUxDSjJZV3gxWlNJc0luUnZURzkzWlhKRFlYTmxJaXdpY21Wd2JHRmpaU0lzSW1kbGRFRjBkSEpwWW5WMFpYTWlMQ0pqYjJSbElpd2laWEp5SWl3aVpISnZjR1J2ZDI1SmRHVnRJaXdpYzJWaGNtTm9RbmtpTENKMFlXZHpWRzlCWkdRaUxDSnpaWFIwYVc1bmN5SXNJbk5zYVdObElpd2laWGhoYlhCc1pWVnpaWEp6SWl3aWFXNXdkWFJGYkcwaUxDSjFjMlZ5YzB4cGMzUWlMQ0p1WVcxbElpd2lZWFpoZEdGeUlpd2laVzFoYVd3aUxDSjBZV2RVWlcxd2JHRjBaU0lzSW5ScGRHeGxJaXdpWTJ4aGMzTk9ZVzFsY3lJc0luTjFaMmRsYzNScGIyNUpkR1Z0VkdWdGNHeGhkR1VpTENKMFlXZFVaWGgwVUhKdmNDSXNJbk5yYVhCSmJuWmhiR2xrSWl3aWMyVmhjbU5vUzJWNWN5SXNJbTl1UkhKdmNHUnZkMjVUYUc5M0lpd2liMjVUWld4bFkzUlRkV2RuWlhOMGFXOXVJaXdpWVdSa1FXeHNVM1ZuWjJWemRHbHZibk5GYkcwaUxDSmtjbTl3Wkc5M2JrTnZiblJsYm5SRmJHMGlMQ0prWlhSaGFXd2lMQ0pFVDAwaUxDSmpiMjUwWlc1MElpd2ljM1ZuWjJWemRHVmtUR2x6ZEVsMFpXMXpJaXdpYkdWdVozUm9JaXdpWjJWMFFXUmtRV3hzVTNWbloyVnpkR2x2Ym5ORmJHMGlMQ0pwYm5ObGNuUkNaV1p2Y21VaUxDSm1hWEp6ZEVOb2FXeGtJaXdpWld4dElpd2ljMlZzWldOMFFXeHNJaXdpWTJGc2JDSXNJbkJoY25ObFZHVnRjR3hoZEdVaUxDSnlaV1IxWTJVaUxDSnlaVzFoYVc1cGJtZFRkV2RuWlhOMGFXOXVjeUlzSW1sMFpXMGlMQ0pwYzFSaFowUjFjR3hwWTJGMFpTSXNJbWx1YVhRaUxDSnZia1JQVFVOdmJuUmxiblJNYjJGa1pXUWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvdGFnaWZ5LmpzXFxuXCIpO1xyXG5cclxuLyoqKi8gfSlcclxuXHJcbi8qKioqKiovIFx0fSk7XHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0Ly8gc3RhcnR1cFxyXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xyXG4vKioqKioqLyBcdC8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbC1zb3VyY2UtbWFwIGRldnRvb2wgaXMgdXNlZC5cclxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xyXG4vKioqKioqLyBcdF9fd2VicGFja19tb2R1bGVzX19bXCIuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vZG9jdW1lbnRhdGlvbi9mb3Jtcy90YWdpZnkuanNcIl0oKTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gfSkoKVxyXG47Il0sImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvZGVtbzEvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvdGFnaWZ5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/forms/tagify.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/forms/tagify.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/forms/tagify.js"]();
/******/ 	
/******/ })()
;