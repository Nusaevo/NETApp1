/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/forms/dropzonejs.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/forms/dropzonejs.js ***!
  \***************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTFormsDropzoneJSDemos = function () {\n  // Private functions\n  var exampleBasic = function exampleBasic() {\n    // For more info about Dropzone plugin visit:  https://www.dropzonejs.com/#usage\n    var myDropzone = new Dropzone(\"#kt_dropzonejs_example_1\", {\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 10,\n      maxFilesize: 10,\n      // MB\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        if (file.name == \"wow.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    });\n  };\n  var exampleQueue = function exampleQueue() {\n    // set the dropzone container id\n    var id = \"#kt_dropzonejs_example_2\";\n    var dropzone = document.querySelector(id);\n\n    // set the preview element template\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://preview.keenthemes.com/api/dropzone/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      previewTemplate: previewTemplate,\n      maxFilesize: 1,\n      // Max filesize in MB\n      autoQueue: false,\n      // Make sure the files aren't queued until manually added\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n        myDropzone.enqueueFile(file);\n      };\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n      dropzone.querySelector('.dropzone-upload').style.display = \"inline-block\";\n      dropzone.querySelector('.dropzone-remove-all').style.display = \"inline-block\";\n    });\n\n    // Update the total progress bar\n    myDropzone.on(\"totaluploadprogress\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.width = progress + \"%\";\n      });\n    });\n    myDropzone.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.opacity = \"1\";\n      });\n      // And disable the start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").setAttribute(\"disabled\", \"disabled\");\n    });\n\n    // Hide the total progress bar when nothing's uploading anymore\n    myDropzone.on(\"complete\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n          progressBar.querySelector('.dropzone-start').style.opacity = \"0\";\n        });\n      }, 300);\n    });\n\n    // Setup the buttons for all transfers\n    dropzone.querySelector(\".dropzone-upload\").addEventListener('click', function () {\n      myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));\n    });\n\n    // Setup the button for remove all files\n    dropzone.querySelector(\".dropzone-remove-all\").addEventListener('click', function () {\n      dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n      dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n      myDropzone.removeAllFiles(true);\n    });\n\n    // On all files completed upload\n    myDropzone.on(\"queuecomplete\", function (progress) {\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\n      uploadIcons.forEach(function (uploadIcon) {\n        uploadIcon.style.display = \"none\";\n      });\n    });\n\n    // On all files removed\n    myDropzone.on(\"removedfile\", function (file) {\n      if (myDropzone.files.length < 1) {\n        dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n        dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n      }\n    });\n  };\n  var exampleQueueAutoUpload = function exampleQueueAutoUpload() {\n    // set the dropzone container id\n    var id = \"#kt_dropzonejs_example_3\";\n    var dropzone = document.querySelector(id);\n\n    // set the preview element template\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"https://preview.keenthemes.com/api/dropzone/void.php\",\n      // Set the url for your upload script location\n      parallelUploads: 20,\n      maxFilesize: 1,\n      // Max filesize in MB\n      previewTemplate: previewTemplate,\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hookup the start button\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n    });\n\n    // Update the total progress bar\n    myDropzone.on(\"totaluploadprogress\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.width = progress + \"%\";\n      });\n    });\n    myDropzone.on(\"sending\", function (file) {\n      // Show the total progress bar when upload starts\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\n      progressBars.forEach(function (progressBar) {\n        progressBar.style.opacity = \"1\";\n      });\n    });\n\n    // Hide the total progress bar when nothing\"s uploading anymore\n    myDropzone.on(\"complete\", function (progress) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n        });\n      }, 300);\n    });\n  };\n  return {\n    // Public Functions\n    init: function init(element) {\n      exampleBasic();\n      exampleQueue();\n      exampleQueueAutoUpload();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTFormsDropzoneJSDemos.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/documentation/forms/dropzonejs.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/documentation/forms/dropzonejs.js ***!
  \****************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\": (\n    /*!***************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/documentation/forms/dropzonejs.js ***!\n      \\***************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationFormsDropzonejsJs() {\n      eval(\" // Class definition\\n\\nvar KTFormsDropzoneJSDemos = function () {\\n  // Private functions\\n  var exampleBasic = function exampleBasic() {\\n    // For more info about Dropzone plugin visit:  https://www.dropzonejs.com/#usage\\n    var myDropzone = new Dropzone(\\\"#kt_dropzonejs_example_1\\\", {\\n      url: \\\"https://keenthemes.com/scripts/void.php\\\",\\n      // Set the url for your upload script location\\n      paramName: \\\"file\\\",\\n      // The name that will be used to transfer the file\\n      maxFiles: 10,\\n      maxFilesize: 10,\\n      // MB\\n      addRemoveLinks: true,\\n      accept: function accept(file, done) {\\n        if (file.name == \\\"wow.jpg\\\") {\\n          done(\\\"Naha, you don't.\\\");\\n        } else {\\n          done();\\n        }\\n      }\\n    });\\n  };\\n\\n  var exampleQueue = function exampleQueue() {\\n    // set the dropzone container id\\n    var id = \\\"#kt_dropzonejs_example_2\\\";\\n    var dropzone = document.querySelector(id); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"https://preview.keenthemes.com/api/dropzone/void.php\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 20,\\n      previewTemplate: previewTemplate,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      autoQueue: false,\\n      // Make sure the files aren't queued until manually added\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: id + \\\" .dropzone-select\\\" // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hookup the start button\\n      file.previewElement.querySelector(id + \\\" .dropzone-start\\\").onclick = function () {\\n        myDropzone.enqueueFile(file);\\n      };\\n\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n      dropzone.querySelector('.dropzone-upload').style.display = \\\"inline-block\\\";\\n      dropzone.querySelector('.dropzone-remove-all').style.display = \\\"inline-block\\\";\\n    }); // Update the total progress bar\\n\\n    myDropzone.on(\\\"totaluploadprogress\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.width = progress + \\\"%\\\";\\n      });\\n    });\\n    myDropzone.on(\\\"sending\\\", function (file) {\\n      // Show the total progress bar when upload starts\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.opacity = \\\"1\\\";\\n      }); // And disable the start button\\n\\n      file.previewElement.querySelector(id + \\\" .dropzone-start\\\").setAttribute(\\\"disabled\\\", \\\"disabled\\\");\\n    }); // Hide the total progress bar when nothing's uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.dropzone-start').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    }); // Setup the buttons for all transfers\\n\\n    dropzone.querySelector(\\\".dropzone-upload\\\").addEventListener('click', function () {\\n      myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));\\n    }); // Setup the button for remove all files\\n\\n    dropzone.querySelector(\\\".dropzone-remove-all\\\").addEventListener('click', function () {\\n      dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n      dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n      myDropzone.removeAllFiles(true);\\n    }); // On all files completed upload\\n\\n    myDropzone.on(\\\"queuecomplete\\\", function (progress) {\\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\\n      uploadIcons.forEach(function (uploadIcon) {\\n        uploadIcon.style.display = \\\"none\\\";\\n      });\\n    }); // On all files removed\\n\\n    myDropzone.on(\\\"removedfile\\\", function (file) {\\n      if (myDropzone.files.length < 1) {\\n        dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n        dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n      }\\n    });\\n  };\\n\\n  var exampleQueueAutoUpload = function exampleQueueAutoUpload() {\\n    // set the dropzone container id\\n    var id = \\\"#kt_dropzonejs_example_3\\\";\\n    var dropzone = document.querySelector(id); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"https://preview.keenthemes.com/api/dropzone/void.php\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 20,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      previewTemplate: previewTemplate,\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: id + \\\" .dropzone-select\\\" // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hookup the start button\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n    }); // Update the total progress bar\\n\\n    myDropzone.on(\\\"totaluploadprogress\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.width = progress + \\\"%\\\";\\n      });\\n    });\\n    myDropzone.on(\\\"sending\\\", function (file) {\\n      // Show the total progress bar when upload starts\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.opacity = \\\"1\\\";\\n      });\\n    }); // Hide the total progress bar when nothing\\\"s uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init(element) {\\n      exampleBasic();\\n      exampleQueue();\\n      exampleQueueAutoUpload();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFormsDropzoneJSDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/documentation/forms/dropzonejs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/forms/dropzonejs.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/documentation/forms/dropzonejs.js"]();
/******/ 	
/******/ })()
;