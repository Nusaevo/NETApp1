/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/create-project/budget.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/create-project/budget.js ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTModalCreateProjectBudget = function () {\n  // Variables\n  var nextButton;\n  var previousButton;\n  var validator;\n  var form;\n  var stepper; // Private functions\n\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'budget_setup': {\n          validators: {\n            notEmpty: {\n              message: 'Budget amount is required'\n            },\n            callback: {\n              message: 'The budget amount must be greater than $100',\n              callback: function callback(input) {\n                var currency = input.value;\n                currency = currency.replace(/[$,]+/g, \"\");\n\n                if (parseFloat(currency) < 100) {\n                  return false;\n                }\n              }\n            }\n          }\n        },\n        'budget_usage': {\n          validators: {\n            notEmpty: {\n              message: 'Budget usage type is required'\n            }\n          }\n        },\n        'budget_allow': {\n          validators: {\n            notEmpty: {\n              message: 'Allowing budget is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Revalidate on change\n\n    KTDialer.getInstance(form.querySelector('#kt_modal_create_project_budget_setup')).on('kt.dialer.changed', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('budget_setup');\n    });\n  };\n\n  var handleForm = function handleForm() {\n    nextButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Disable button to avoid multiple click \n\n      nextButton.disabled = true; // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            nextButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              nextButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              nextButton.disabled = false; // Go to next step\n\n              stepper.goNext();\n            }, 1500);\n          } else {\n            // Enable button\n            nextButton.disabled = false; // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    previousButton.addEventListener('click', function () {\n      stepper.goPrevious();\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      form = KTModalCreateProject.getForm();\n      stepper = KTModalCreateProject.getStepperObj();\n      nextButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\"budget-next\"]');\n      previousButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\"budget-previous\"]');\n      initValidation();\n      handleForm();\n    }\n  };\n}(); // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  window.KTModalCreateProjectBudget = module.exports = KTModalCreateProjectBudget;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-project/budget.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/create-project/budget.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/create-project/budget.js ***!
  \************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/utilities/modals/create-project/budget.js\":\n    /*!***********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/utilities/modals/create-project/budget.js ***!\r\n      \\***********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsCreateProjectBudgetJs(module) {\n      eval(\" // Class definition\\n\\nvar KTModalCreateProjectBudget = function () {\\n  // Variables\\n  var nextButton;\\n  var previousButton;\\n  var validator;\\n  var form;\\n  var stepper; // Private functions\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'budget_setup': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Budget amount is required'\\n            },\\n            callback: {\\n              message: 'The budget amount must be greater than $100',\\n              callback: function callback(input) {\\n                var currency = input.value;\\n                currency = currency.replace(/[$,]+/g, \\\"\\\");\\n\\n                if (parseFloat(currency) < 100) {\\n                  return false;\\n                }\\n              }\\n            }\\n          }\\n        },\\n        'budget_usage': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Budget usage type is required'\\n            }\\n          }\\n        },\\n        'budget_allow': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Allowing budget is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Revalidate on change\\n\\n    KTDialer.getInstance(form.querySelector('#kt_modal_create_project_budget_setup')).on('kt.dialer.changed', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('budget_setup');\\n    });\\n  };\\n\\n  var handleForm = function handleForm() {\\n    nextButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Disable button to avoid multiple click \\n\\n      nextButton.disabled = true; // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            nextButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n            setTimeout(function () {\\n              // Simulate form submission\\n              nextButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              nextButton.disabled = false; // Go to next step\\n\\n              stepper.goNext();\\n            }, 1500);\\n          } else {\\n            // Enable button\\n            nextButton.disabled = false; // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    previousButton.addEventListener('click', function () {\\n      stepper.goPrevious();\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      form = KTModalCreateProject.getForm();\\n      stepper = KTModalCreateProject.getStepperObj();\\n      nextButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\\\"budget-next\\\"]');\\n      previousButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\\\"budget-previous\\\"]');\\n      initValidation();\\n      handleForm();\\n    }\\n  };\\n}(); // Webpack support\\n\\n\\nif ( true && typeof module.exports !== 'undefined') {\\n  window.KTModalCreateProjectBudget = module.exports = KTModalCreateProjectBudget;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-project/budget.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n  // The module cache\n\n  /******/\n\n  var __webpack_module_cache__ = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __nested_webpack_require_17103__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    var cachedModule = __webpack_module_cache__[moduleId];\n    /******/\n\n    if (cachedModule !== undefined) {\n      /******/\n      return cachedModule.exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/\n      // no module.id needed\n\n      /******/\n      // no module.loaded needed\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_17103__);\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module is referenced by other modules so it can't be inlined\n\n  /******/\n\n\n  var __webpack_exports__ = __nested_webpack_require_17103__(\"./resources/assets/core/js/custom/utilities/modals/create-project/budget.js\");\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/create-project/budget.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./resources/assets/core/js/custom/utilities/modals/create-project/budget.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/demo1/js/custom/utilities/modals/create-project/budget.js");
/******/ 	
/******/ })()
;