/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/create-project/settings.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/create-project/settings.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTModalCreateProjectSettings = function () {\n  // Variables\n  var nextButton;\n  var previousButton;\n  var validator;\n  var form;\n  var stepper;\n\n  // Private functions\n  var initForm = function initForm() {\n    // Project logo\n    // For more info about Dropzone plugin visit:  https://www.dropzonejs.com/#usage\n    var myDropzone = new Dropzone(\"#kt_modal_create_project_settings_logo\", {\n      url: \"https://keenthemes.com/scripts/void.php\",\n      // Set the url for your upload script location\n      paramName: \"file\",\n      // The name that will be used to transfer the file\n      maxFiles: 10,\n      maxFilesize: 10,\n      // MB\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        } else {\n          done();\n        }\n      }\n    });\n\n    // Due date. For more info, please visit the official plugin site: https://flatpickr.js.org/\n    var releaseDate = $(form.querySelector('[name=\"settings_release_date\"]'));\n    releaseDate.flatpickr({\n      enableTime: true,\n      dateFormat: \"d, M Y, H:i\"\n    });\n\n    // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"settings_customer\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('settings_customer');\n    });\n  };\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'settings_name': {\n          validators: {\n            notEmpty: {\n              message: 'Project name is required'\n            }\n          }\n        },\n        'settings_customer': {\n          validators: {\n            notEmpty: {\n              message: 'Customer is required'\n            }\n          }\n        },\n        'settings_description': {\n          validators: {\n            notEmpty: {\n              message: 'Description is required'\n            }\n          }\n        },\n        'settings_release_date': {\n          validators: {\n            notEmpty: {\n              message: 'Release date is required'\n            }\n          }\n        },\n        'settings_notifications[]': {\n          validators: {\n            notEmpty: {\n              message: 'Notifications are required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n  };\n  var handleForm = function handleForm() {\n    nextButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Disable button to avoid multiple click \n      nextButton.disabled = true;\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            nextButton.setAttribute('data-kt-indicator', 'on');\n\n            // Simulate form submission\n            setTimeout(function () {\n              // Simulate form submission\n              nextButton.removeAttribute('data-kt-indicator');\n\n              // Enable button\n              nextButton.disabled = false;\n\n              // Go to next step\n              stepper.goNext();\n            }, 1500);\n          } else {\n            // Enable button\n            nextButton.disabled = false;\n\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    previousButton.addEventListener('click', function () {\n      // Go to previous step\n      stepper.goPrevious();\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      form = KTModalCreateProject.getForm();\n      stepper = KTModalCreateProject.getStepperObj();\n      nextButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\"settings-next\"]');\n      previousButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\"settings-previous\"]');\n      initForm();\n      initValidation();\n      handleForm();\n    }\n  };\n}();\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  window.KTModalCreateProjectSettings = module.exports = KTModalCreateProjectSettings;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-project/settings.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/create-project/settings.js":
/*!**************************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/create-project/settings.js ***!
  \**************************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/utilities/modals/create-project/settings.js\": (\n    /*!*************************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/utilities/modals/create-project/settings.js ***!\n      \\*************************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsCreateProjectSettingsJs(module) {\n      eval(\" // Class definition\\n\\nvar KTModalCreateProjectSettings = function () {\\n  // Variables\\n  var nextButton;\\n  var previousButton;\\n  var validator;\\n  var form;\\n  var stepper; // Private functions\\n\\n  var initForm = function initForm() {\\n    // Project logo\\n    // For more info about Dropzone plugin visit:  https://www.dropzonejs.com/#usage\\n    var myDropzone = new Dropzone(\\\"#kt_modal_create_project_settings_logo\\\", {\\n      url: \\\"https://keenthemes.com/scripts/void.php\\\",\\n      // Set the url for your upload script location\\n      paramName: \\\"file\\\",\\n      // The name that will be used to transfer the file\\n      maxFiles: 10,\\n      maxFilesize: 10,\\n      // MB\\n      addRemoveLinks: true,\\n      accept: function accept(file, done) {\\n        if (file.name == \\\"justinbieber.jpg\\\") {\\n          done(\\\"Naha, you don't.\\\");\\n        } else {\\n          done();\\n        }\\n      }\\n    }); // Due date. For more info, please visit the official plugin site: https://flatpickr.js.org/\\n\\n    var releaseDate = $(form.querySelector('[name=\\\"settings_release_date\\\"]'));\\n    releaseDate.flatpickr({\\n      enableTime: true,\\n      dateFormat: \\\"d, M Y, H:i\\\"\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"settings_customer\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('settings_customer');\\n    });\\n  };\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'settings_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Project name is required'\\n            }\\n          }\\n        },\\n        'settings_customer': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Customer is required'\\n            }\\n          }\\n        },\\n        'settings_description': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Description is required'\\n            }\\n          }\\n        },\\n        'settings_release_date': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Release date is required'\\n            }\\n          }\\n        },\\n        'settings_notifications[]': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Notifications are required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    });\\n  };\\n\\n  var handleForm = function handleForm() {\\n    nextButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Disable button to avoid multiple click \\n\\n      nextButton.disabled = true; // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            nextButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n            setTimeout(function () {\\n              // Simulate form submission\\n              nextButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              nextButton.disabled = false; // Go to next step\\n\\n              stepper.goNext();\\n            }, 1500);\\n          } else {\\n            // Enable button\\n            nextButton.disabled = false; // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    previousButton.addEventListener('click', function () {\\n      // Go to previous step\\n      stepper.goPrevious();\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      form = KTModalCreateProject.getForm();\\n      stepper = KTModalCreateProject.getStepperObj();\\n      nextButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\\\"settings-next\\\"]');\\n      previousButton = KTModalCreateProject.getStepper().querySelector('[data-kt-element=\\\"settings-previous\\\"]');\\n      initForm();\\n      initValidation();\\n      handleForm();\\n    }\\n  };\\n}(); // Webpack support\\n\\n\\nif ( true && typeof module.exports !== 'undefined') {\\n  window.KTModalCreateProjectSettings = module.exports = KTModalCreateProjectSettings;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-project/settings.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/ // The module cache\n  /******/\n  var __webpack_module_cache__ = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __nested_webpack_require_20651__(moduleId) {\n    /******/ // Check if module is in cache\n    /******/var cachedModule = __webpack_module_cache__[moduleId];\n    /******/\n    if (cachedModule !== undefined) {\n      /******/return cachedModule.exports;\n      /******/\n    }\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/ // no module.id needed\n      /******/ // no module.loaded needed\n      /******/exports: {}\n      /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_20651__);\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module is referenced by other modules so it can't be inlined\n  /******/\n  var __webpack_exports__ = __nested_webpack_require_20651__(\"./resources/assets/core/js/custom/utilities/modals/create-project/settings.js\");\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/create-project/settings.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./resources/assets/core/js/custom/utilities/modals/create-project/settings.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/demo1/js/custom/utilities/modals/create-project/settings.js");
/******/ 	
/******/ })()
;