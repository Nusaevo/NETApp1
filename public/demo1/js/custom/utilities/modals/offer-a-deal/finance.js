/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTModalOfferADealFinance = function () {\n  // Variables\n  var nextButton;\n  var previousButton;\n  var validator;\n  var form;\n  var stepper; // Private functions\n\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'finance_setup': {\n          validators: {\n            notEmpty: {\n              message: 'Amount is required'\n            },\n            callback: {\n              message: 'The amount must be greater than $100',\n              callback: function callback(input) {\n                var currency = input.value;\n                currency = currency.replace(/[$,]+/g, \"\");\n\n                if (parseFloat(currency) < 100) {\n                  return false;\n                }\n              }\n            }\n          }\n        },\n        'finance_usage': {\n          validators: {\n            notEmpty: {\n              message: 'Usage type is required'\n            }\n          }\n        },\n        'finance_allow': {\n          validators: {\n            notEmpty: {\n              message: 'Allowing budget is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Revalidate on change\n\n    KTDialer.getInstance(form.querySelector('#kt_modal_finance_setup')).on('kt.dialer.changed', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('finance_setup');\n    });\n  };\n\n  var handleForm = function handleForm() {\n    nextButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Disable button to avoid multiple click \n\n      nextButton.disabled = true; // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            nextButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              nextButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              nextButton.disabled = false; // Go to next step\n\n              stepper.goNext();\n            }, 1500);\n          } else {\n            // Enable button\n            nextButton.disabled = false; // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    previousButton.addEventListener('click', function () {\n      stepper.goPrevious();\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      form = KTModalOfferADeal.getForm();\n      stepper = KTModalOfferADeal.getStepperObj();\n      nextButton = KTModalOfferADeal.getStepper().querySelector('[data-kt-element=\"finance-next\"]');\n      previousButton = KTModalOfferADeal.getStepper().querySelector('[data-kt-element=\"finance-previous\"]');\n      initValidation();\n      handleForm();\n    }\n  };\n}(); // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  window.KTModalOfferADealFinance = module.exports = KTModalOfferADealFinance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL3V0aWxpdGllcy9tb2RhbHMvb2ZmZXItYS1kZWFsL2ZpbmFuY2UuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsd0JBQXdCLEdBQUcsWUFBWTtBQUMxQztBQUNBLE1BQUlDLFVBQUo7QUFDQSxNQUFJQyxjQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxPQUFKLENBTjBDLENBUTFDOztBQUNBLE1BQUlDLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsR0FBVztBQUMvQjtBQUNBSCxJQUFBQSxTQUFTLEdBQUdJLGNBQWMsQ0FBQ0MsY0FBZixDQUNYSixJQURXLEVBRVg7QUFDQ0ssTUFBQUEsTUFBTSxFQUFFO0FBQ1AseUJBQWlCO0FBQ2hCQyxVQUFBQSxVQUFVLEVBQUU7QUFDWEMsWUFBQUEsUUFBUSxFQUFFO0FBQ1RDLGNBQUFBLE9BQU8sRUFBRTtBQURBLGFBREM7QUFJWEMsWUFBQUEsUUFBUSxFQUFFO0FBQ1RELGNBQUFBLE9BQU8sRUFBRSxzQ0FEQTtBQUVUQyxjQUFBQSxRQUFRLEVBQUUsa0JBQVNDLEtBQVQsRUFBZ0I7QUFDekIsb0JBQUlDLFFBQVEsR0FBR0QsS0FBSyxDQUFDRSxLQUFyQjtBQUNBRCxnQkFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNFLE9BQVQsQ0FBaUIsUUFBakIsRUFBMEIsRUFBMUIsQ0FBWDs7QUFFQSxvQkFBSUMsVUFBVSxDQUFDSCxRQUFELENBQVYsR0FBdUIsR0FBM0IsRUFBZ0M7QUFDL0IseUJBQU8sS0FBUDtBQUNBO0FBQ0Q7QUFUUTtBQUpDO0FBREksU0FEVjtBQW1CUCx5QkFBaUI7QUFDaEJMLFVBQUFBLFVBQVUsRUFBRTtBQUNYQyxZQUFBQSxRQUFRLEVBQUU7QUFDVEMsY0FBQUEsT0FBTyxFQUFFO0FBREE7QUFEQztBQURJLFNBbkJWO0FBMEJQLHlCQUFpQjtBQUNoQkYsVUFBQUEsVUFBVSxFQUFFO0FBQ1hDLFlB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QUEsY0FBYyxHQUFHc0QsaUJBQWlCLENBQUNHLFVBQWxCLEdBQStCOUIsYUFBL0IsQ0FBNkMsc0NBQTdDLENBQWpCO0FBRUF2QixNQUFBQSxjQUFjO0FBQ2QwQixNQUFBQSxVQUFVO0FBQ1Y7QUFWSyxHQUFQO0FBWUEsQ0FuSThCLEVBQS9CLEMsQ0FxSUE7OztBQUNBLElBQUksU0FBaUMsT0FBTzRCLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUMzRUMsRUFBQUEsTUFBTSxDQUFDOUQsd0JBQVAsR0FBa0M0RCxNQUFNLENBQUNDLE9BQVAsR0FBaUI3RCx3QkFBbkQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vdXRpbGl0aWVzL21vZGFscy9vZmZlci1hLWRlYWwvZmluYW5jZS5qcz83YzdmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RNb2RhbE9mZmVyQURlYWxGaW5hbmNlID0gZnVuY3Rpb24gKCkge1xyXG5cdC8vIFZhcmlhYmxlc1xyXG5cdHZhciBuZXh0QnV0dG9uO1xyXG5cdHZhciBwcmV2aW91c0J1dHRvbjtcclxuXHR2YXIgdmFsaWRhdG9yO1xyXG5cdHZhciBmb3JtO1xyXG5cdHZhciBzdGVwcGVyO1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBpbml0VmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cclxuXHRcdHZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG5cdFx0XHRmb3JtLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHQnZmluYW5jZV9zZXR1cCc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQW1vdW50IGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2s6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdUaGUgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuICQxMDAnLFxyXG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGlucHV0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBjdXJyZW5jeSA9IGlucHV0LnZhbHVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW5jeSA9IGN1cnJlbmN5LnJlcGxhY2UoL1skLF0rL2csXCJcIik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAocGFyc2VGbG9hdChjdXJyZW5jeSkgPCAxMDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnZmluYW5jZV91c2FnZSc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnVXNhZ2UgdHlwZSBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnZmluYW5jZV9hbGxvdyc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQWxsb3dpbmcgYnVkZ2V0IGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0cGx1Z2luczoge1xyXG5cdFx0XHRcdFx0dHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG5cdFx0XHRcdFx0Ym9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcclxuXHRcdFx0XHRcdFx0cm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIFJldmFsaWRhdGUgb24gY2hhbmdlXHJcblx0XHRLVERpYWxlci5nZXRJbnN0YW5jZShmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9maW5hbmNlX3NldHVwJykpLm9uKCdrdC5kaWFsZXIuY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBSZXZhbGlkYXRlIHRoZSBmaWVsZCB3aGVuIGFuIG9wdGlvbiBpcyBjaG9zZW5cclxuICAgICAgICAgICAgdmFsaWRhdG9yLnJldmFsaWRhdGVGaWVsZCgnZmluYW5jZV9zZXR1cCcpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2YXIgaGFuZGxlRm9ybSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0bmV4dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdC8vIFByZXZlbnQgZGVmYXVsdCBidXR0b24gYWN0aW9uXHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdC8vIERpc2FibGUgYnV0dG9uIHRvIGF2b2lkIG11bHRpcGxlIGNsaWNrIFxyXG5cdFx0XHRuZXh0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIHN1Ym1pdFxyXG5cdFx0XHRpZiAodmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0dmFsaWRhdG9yLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG5cdFx0XHRcdFx0XHQvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxyXG5cdFx0XHRcdFx0XHRuZXh0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFNpbXVsYXRlIGZvcm0gc3VibWlzc2lvblxyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFNpbXVsYXRlIGZvcm0gc3VibWlzc2lvblxyXG5cdFx0XHRcdFx0XHRcdG5leHRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBFbmFibGUgYnV0dG9uXHJcblx0XHRcdFx0XHRcdFx0bmV4dEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdC8vIEdvIHRvIG5leHQgc3RlcFxyXG5cdFx0XHRcdFx0XHRcdHN0ZXBwZXIuZ29OZXh0KCk7XHJcblx0XHRcdFx0XHRcdH0sIDE1MDApOyAgIFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gRW5hYmxlIGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRuZXh0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTaG93IHBvcHVwIHdhcm5pbmcuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246IGh0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvL1xyXG5cdFx0XHRcdFx0XHRTd2FsLmZpcmUoe1xyXG5cdFx0XHRcdFx0XHRcdHRleHQ6IFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiLFxyXG5cdFx0XHRcdFx0XHRcdGljb246IFwiZXJyb3JcIixcclxuXHRcdFx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuXHRcdFx0XHRcdFx0XHRjdXN0b21DbGFzczoge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIlxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cdFx0XHRcclxuXHRcdH0pO1xyXG5cclxuXHRcdHByZXZpb3VzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRzdGVwcGVyLmdvUHJldmlvdXMoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdC8vIFB1YmxpYyBmdW5jdGlvbnNcclxuXHRcdGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Zm9ybSA9IEtUTW9kYWxPZmZlckFEZWFsLmdldEZvcm0oKTtcclxuXHRcdFx0c3RlcHBlciA9IEtUTW9kYWxPZmZlckFEZWFsLmdldFN0ZXBwZXJPYmooKTtcclxuXHRcdFx0bmV4dEJ1dHRvbiA9IEtUTW9kYWxPZmZlckFEZWFsLmdldFN0ZXBwZXIoKS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1lbGVtZW50PVwiZmluYW5jZS1uZXh0XCJdJyk7XHJcblx0XHRcdHByZXZpb3VzQnV0dG9uID0gS1RNb2RhbE9mZmVyQURlYWwuZ2V0U3RlcHBlcigpLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWVsZW1lbnQ9XCJmaW5hbmNlLXByZXZpb3VzXCJdJyk7XHJcblxyXG5cdFx0XHRpbml0VmFsaWRhdGlvbigpO1xyXG5cdFx0XHRoYW5kbGVGb3JtKCk7XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0d2luZG93LktUTW9kYWxPZmZlckFEZWFsRmluYW5jZSA9IG1vZHVsZS5leHBvcnRzID0gS1RNb2RhbE9mZmVyQURlYWxGaW5hbmNlO1xyXG59Il0sIm5hbWVzIjpbIktUTW9kYWxPZmZlckFEZWFsRmluYW5jZSIsIm5leHRCdXR0b24iLCJwcmV2aW91c0J1dHRvbiIsInZhbGlkYXRvciIsImZvcm0iLCJzdGVwcGVyIiwiaW5pdFZhbGlkYXRpb24iLCJGb3JtVmFsaWRhdGlvbiIsImZvcm1WYWxpZGF0aW9uIiwiZmllbGRzIiwidmFsaWRhdG9ycyIsIm5vdEVtcHR5IiwibWVzc2FnZSIsImNhbGxiYWNrIiwiaW5wdXQiLCJjdXJyZW5jeSIsInZhbHVlIiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJwbHVnaW5zIiwidHJpZ2dlciIsIlRyaWdnZXIiLCJib290c3RyYXAiLCJCb290c3RyYXA1Iiwicm93U2VsZWN0b3IiLCJlbGVJbnZhbGlkQ2xhc3MiLCJlbGVWYWxpZENsYXNzIiwiS1REaWFsZXIiLCJnZXRJbnN0YW5jZSIsInF1ZXJ5U2VsZWN0b3IiLCJvbiIsInJldmFsaWRhdGVGaWVsZCIsImhhbmRsZUZvcm0iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiZGlzYWJsZWQiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsImdvTmV4dCIsIlN3YWwiLCJmaXJlIiwidGV4dCIsImljb24iLCJidXR0b25zU3R5bGluZyIsImNvbmZpcm1CdXR0b25UZXh0IiwiY3VzdG9tQ2xhc3MiLCJjb25maXJtQnV0dG9uIiwiZ29QcmV2aW91cyIsImluaXQiLCJLVE1vZGFsT2ZmZXJBRGVhbCIsImdldEZvcm0iLCJnZXRTdGVwcGVyT2JqIiwiZ2V0U3RlcHBlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/offer-a-deal/finance.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/offer-a-deal/finance.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js\":\n    /*!**********************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js ***!\r\n      \\**********************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsOfferADealFinanceJs(module) {\n      eval(\" // Class definition\\n\\nvar KTModalOfferADealFinance = function () {\\n  // Variables\\n  var nextButton;\\n  var previousButton;\\n  var validator;\\n  var form;\\n  var stepper; // Private functions\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'finance_setup': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Amount is required'\\n            },\\n            callback: {\\n              message: 'The amount must be greater than $100',\\n              callback: function callback(input) {\\n                var currency = input.value;\\n                currency = currency.replace(/[$,]+/g, \\\"\\\");\\n\\n                if (parseFloat(currency) < 100) {\\n                  return false;\\n                }\\n              }\\n            }\\n          }\\n        },\\n        'finance_usage': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Usage type is required'\\n            }\\n          }\\n        },\\n        'finance_allow': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Allowing budget is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Revalidate on change\\n\\n    KTDialer.getInstance(form.querySelector('#kt_modal_finance_setup')).on('kt.dialer.changed', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('finance_setup');\\n    });\\n  };\\n\\n  var handleForm = function handleForm() {\\n    nextButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Disable button to avoid multiple click \\n\\n      nextButton.disabled = true; // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            nextButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n            setTimeout(function () {\\n              // Simulate form submission\\n              nextButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              nextButton.disabled = false; // Go to next step\\n\\n              stepper.goNext();\\n            }, 1500);\\n          } else {\\n            // Enable button\\n            nextButton.disabled = false; // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    previousButton.addEventListener('click', function () {\\n      stepper.goPrevious();\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      form = KTModalOfferADeal.getForm();\\n      stepper = KTModalOfferADeal.getStepperObj();\\n      nextButton = KTModalOfferADeal.getStepper().querySelector('[data-kt-element=\\\"finance-next\\\"]');\\n      previousButton = KTModalOfferADeal.getStepper().querySelector('[data-kt-element=\\\"finance-previous\\\"]');\\n      initValidation();\\n      handleForm();\\n    }\\n  };\\n}(); // Webpack support\\n\\n\\nif ( true && typeof module.exports !== 'undefined') {\\n  window.KTModalOfferADealFinance = module.exports = KTModalOfferADealFinance;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n  // The module cache\n\n  /******/\n\n  var __webpack_module_cache__ = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __nested_webpack_require_16973__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    var cachedModule = __webpack_module_cache__[moduleId];\n    /******/\n\n    if (cachedModule !== undefined) {\n      /******/\n      return cachedModule.exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/\n      // no module.id needed\n\n      /******/\n      // no module.loaded needed\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_16973__);\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module is referenced by other modules so it can't be inlined\n\n  /******/\n\n\n  var __webpack_exports__ = __nested_webpack_require_16973__(\"./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js\");\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/offer-a-deal/finance.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./resources/assets/core/js/custom/utilities/modals/offer-a-deal/finance.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/demo1/js/custom/utilities/modals/offer-a-deal/finance.js");
/******/ 	
/******/ })()
;