/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/new-target.js":
/*!************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/new-target.js ***!
  \************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTModalNewTarget = function () {\n  var submitButton;\n  var cancelButton;\n  var validator;\n  var form;\n  var modal;\n  var modalEl;\n\n  // Init form inputs\n  var initForm = function initForm() {\n    // Tags. For more info, please visit the official plugin site: https://yaireo.github.io/tagify/\n    var tags = new Tagify(form.querySelector('[name=\"tags\"]'), {\n      whitelist: [\"Important\", \"Urgent\", \"High\", \"Medium\", \"Low\"],\n      maxTags: 5,\n      dropdown: {\n        maxItems: 10,\n        // <- mixumum allowed rendered suggestions\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n      }\n    });\n    tags.on(\"change\", function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('tags');\n    });\n\n    // Due date. For more info, please visit the official plugin site: https://flatpickr.js.org/\n    var dueDate = $(form.querySelector('[name=\"due_date\"]'));\n    dueDate.flatpickr({\n      enableTime: true,\n      dateFormat: \"d, M Y, H:i\"\n    });\n\n    // Team assign. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"team_assign\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('team_assign');\n    });\n  };\n\n  // Handle form validation and submittion\n  var handleForm = function handleForm() {\n    // Stepper custom navigation\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        target_title: {\n          validators: {\n            notEmpty: {\n              message: 'Target title is required'\n            }\n          }\n        },\n        target_assign: {\n          validators: {\n            notEmpty: {\n              message: 'Target assign is required'\n            }\n          }\n        },\n        target_due_date: {\n          validators: {\n            notEmpty: {\n              message: 'Target due date is required'\n            }\n          }\n        },\n        target_tags: {\n          validators: {\n            notEmpty: {\n              message: 'Target tags are required'\n            }\n          }\n        },\n        'targets_notifications[]': {\n          validators: {\n            notEmpty: {\n              message: 'Please select at least one communication method'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n\n    // Action buttons\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable button to avoid multiple click \n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Enable button\n              submitButton.disabled = false;\n\n              // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show error message.\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_new_target');\n      if (!modalEl) {\n        return;\n      }\n      modal = new bootstrap.Modal(modalEl);\n      form = document.querySelector('#kt_modal_new_target_form');\n      submitButton = document.getElementById('kt_modal_new_target_submit');\n      cancelButton = document.getElementById('kt_modal_new_target_cancel');\n      initForm();\n      handleForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTModalNewTarget.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/new-target.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/new-target.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/new-target.js ***!
  \*************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/utilities/modals/new-target.js\": (\n    /*!************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/utilities/modals/new-target.js ***!\n      \\************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsNewTargetJs() {\n      eval(\" // Class definition\\n\\nvar KTModalNewTarget = function () {\\n  var submitButton;\\n  var cancelButton;\\n  var validator;\\n  var form;\\n  var modal;\\n  var modalEl; // Init form inputs\\n\\n  var initForm = function initForm() {\\n    // Tags. For more info, please visit the official plugin site: https://yaireo.github.io/tagify/\\n    var tags = new Tagify(form.querySelector('[name=\\\"tags\\\"]'), {\\n      whitelist: [\\\"Important\\\", \\\"Urgent\\\", \\\"High\\\", \\\"Medium\\\", \\\"Low\\\"],\\n      maxTags: 5,\\n      dropdown: {\\n        maxItems: 10,\\n        // <- mixumum allowed rendered suggestions\\n        enabled: 0,\\n        // <- show suggestions on focus\\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\\n\\n      }\\n    });\\n    tags.on(\\\"change\\\", function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('tags');\\n    }); // Due date. For more info, please visit the official plugin site: https://flatpickr.js.org/\\n\\n    var dueDate = $(form.querySelector('[name=\\\"due_date\\\"]'));\\n    dueDate.flatpickr({\\n      enableTime: true,\\n      dateFormat: \\\"d, M Y, H:i\\\"\\n    }); // Team assign. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"team_assign\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('team_assign');\\n    });\\n  }; // Handle form validation and submittion\\n\\n\\n  var handleForm = function handleForm() {\\n    // Stepper custom navigation\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        target_title: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Target title is required'\\n            }\\n          }\\n        },\\n        target_assign: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Target assign is required'\\n            }\\n          }\\n        },\\n        target_due_date: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Target due date is required'\\n            }\\n          }\\n        },\\n        target_tags: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Target tags are required'\\n            }\\n          }\\n        },\\n        'targets_notifications[]': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Please select at least one communication method'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Action buttons\\n\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true;\\n            setTimeout(function () {\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false; // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show error message.\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      // Elements\\n      modalEl = document.querySelector('#kt_modal_new_target');\\n\\n      if (!modalEl) {\\n        return;\\n      }\\n\\n      modal = new bootstrap.Modal(modalEl);\\n      form = document.querySelector('#kt_modal_new_target_form');\\n      submitButton = document.getElementById('kt_modal_new_target_submit');\\n      cancelButton = document.getElementById('kt_modal_new_target_cancel');\\n      initForm();\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTModalNewTarget.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/new-target.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/new-target.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/new-target.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/new-target.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/new-target.js"]();
/******/ 	
/******/ })()
;