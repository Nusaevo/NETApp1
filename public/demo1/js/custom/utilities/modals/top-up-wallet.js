/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js ***!
  \***************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTModalTopUpWallet = function () {\n  // Elements\n  var modal;\n  var modalEl;\n  var stepper;\n  var form;\n  var formSubmitButton;\n  var formContinueButton; // Variables\n\n  var stepperObj;\n  var validations = []; // Private Functions\n\n  var initStepper = function initStepper() {\n    // Initialize Stepper\n    stepperObj = new KTStepper(stepper); // Stepper change event(handle hiding submit button for the last step)\n\n    stepperObj.on('kt.stepper.changed', function (stepper) {\n      if (stepperObj.getCurrentStepIndex() === 4) {\n        formSubmitButton.classList.remove('d-none');\n        formSubmitButton.classList.add('d-inline-block');\n        formContinueButton.classList.add('d-none');\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\n        formSubmitButton.classList.add('d-none');\n        formContinueButton.classList.add('d-none');\n      } else {\n        formSubmitButton.classList.remove('d-inline-block');\n        formSubmitButton.classList.remove('d-none');\n        formContinueButton.classList.remove('d-none');\n      }\n    }); // Validation before going to next page\n\n    stepperObj.on('kt.stepper.next', function (stepper) {\n      console.log('stepper.next'); // Validate form before change stepper step\n\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            stepper.goNext(); //KTUtil.scrollTop();\n          } else {\n            // Show error message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-light\"\n              }\n            }).then(function () {//KTUtil.scrollTop();\n            });\n          }\n        });\n      } else {\n        stepper.goNext();\n        KTUtil.scrollTop();\n      }\n    }); // Prev event\n\n    stepperObj.on('kt.stepper.previous', function (stepper) {\n      console.log('stepper.previous');\n      stepper.goPrevious();\n      KTUtil.scrollTop();\n    });\n    formSubmitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Disable button to avoid multiple click \n\n      formSubmitButton.disabled = true; // Show loading indication\n\n      formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\n\n      setTimeout(function () {\n        // Hide loading indication\n        formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n        formSubmitButton.disabled = false;\n        stepperObj.goNext(); //KTUtil.scrollTop();\n      }, 2000);\n    });\n  }; // Init form inputs\n\n\n  var initForm = function initForm() {\n    // Handle currency swap logic\n    var currencyTypes = form.querySelectorAll('[name=\"currency_type\"]');\n    var targets = form.querySelectorAll('[data-kt-modal-top-up-wallet-option]');\n    var value = \"dollar\";\n    currencyTypes.forEach(function (currency) {\n      currency.addEventListener('change', function (e) {\n        value = e.target.value;\n        targets.forEach(function (target) {\n          target.classList.add('d-none');\n\n          if (target.getAttribute('data-kt-modal-top-up-wallet-option') === value) {\n            target.classList.remove('d-none');\n          }\n        });\n      });\n    }); // Handle top up wallet button\n\n    var restartButton = document.querySelector('#kt_modal_top_up_wallet_create_new');\n    restartButton.addEventListener('click', function () {\n      form.reset();\n      stepperObj.goTo(1);\n    });\n  }; // Init validation\n\n\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        top_up_amount: {\n          validators: {\n            notEmpty: {\n              message: 'Top up amount is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 2\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        payment_methods: {\n          validators: {\n            notEmpty: {\n              message: 'Payment method is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 3\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        top_up_password: {\n          validators: {\n            notEmpty: {\n              message: 'Password is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n  }; // Handle cancel modal\n\n\n  var handleCancelAction = function handleCancelAction() {\n    var closeButton = modalEl.querySelector('[data-kt-modal-action-type=\"close\"]');\n    closeButton.addEventListener('click', function (e) {\n      cancelAction(e);\n    });\n\n    var cancelAction = function cancelAction(e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    };\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_top_up_wallet');\n\n      if (!modalEl) {\n        return;\n      }\n\n      modal = new bootstrap.Modal(modalEl);\n      stepper = document.querySelector('#kt_modal_top_up_wallet_stepper');\n      form = document.querySelector('#kt_modal_top_up_wallet_stepper_form');\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n      initStepper();\n      initForm();\n      initValidation();\n      handleCancelAction();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTModalTopUpWallet.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/top-up-wallet.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/top-up-wallet.js ***!
  \****************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js\":\n    /*!***************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js ***!\r\n      \\***************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsTopUpWalletJs() {\n      eval(\" // Class definition\\n\\nvar KTModalTopUpWallet = function () {\\n  // Elements\\n  var modal;\\n  var modalEl;\\n  var stepper;\\n  var form;\\n  var formSubmitButton;\\n  var formContinueButton; // Variables\\n\\n  var stepperObj;\\n  var validations = []; // Private Functions\\n\\n  var initStepper = function initStepper() {\\n    // Initialize Stepper\\n    stepperObj = new KTStepper(stepper); // Stepper change event(handle hiding submit button for the last step)\\n\\n    stepperObj.on('kt.stepper.changed', function (stepper) {\\n      if (stepperObj.getCurrentStepIndex() === 4) {\\n        formSubmitButton.classList.remove('d-none');\\n        formSubmitButton.classList.add('d-inline-block');\\n        formContinueButton.classList.add('d-none');\\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\\n        formSubmitButton.classList.add('d-none');\\n        formContinueButton.classList.add('d-none');\\n      } else {\\n        formSubmitButton.classList.remove('d-inline-block');\\n        formSubmitButton.classList.remove('d-none');\\n        formContinueButton.classList.remove('d-none');\\n      }\\n    }); // Validation before going to next page\\n\\n    stepperObj.on('kt.stepper.next', function (stepper) {\\n      console.log('stepper.next'); // Validate form before change stepper step\\n\\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            stepper.goNext(); //KTUtil.scrollTop();\\n          } else {\\n            // Show error message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-light\\\"\\n              }\\n            }).then(function () {//KTUtil.scrollTop();\\n            });\\n          }\\n        });\\n      } else {\\n        stepper.goNext();\\n        KTUtil.scrollTop();\\n      }\\n    }); // Prev event\\n\\n    stepperObj.on('kt.stepper.previous', function (stepper) {\\n      console.log('stepper.previous');\\n      stepper.goPrevious();\\n      KTUtil.scrollTop();\\n    });\\n    formSubmitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Disable button to avoid multiple click \\n\\n      formSubmitButton.disabled = true; // Show loading indication\\n\\n      formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n      setTimeout(function () {\\n        // Hide loading indication\\n        formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n        formSubmitButton.disabled = false;\\n        stepperObj.goNext(); //KTUtil.scrollTop();\\n      }, 2000);\\n    });\\n  }; // Init form inputs\\n\\n\\n  var initForm = function initForm() {\\n    // Handle currency swap logic\\n    var currencyTypes = form.querySelectorAll('[name=\\\"currency_type\\\"]');\\n    var targets = form.querySelectorAll('[data-kt-modal-top-up-wallet-option]');\\n    var value = \\\"dollar\\\";\\n    currencyTypes.forEach(function (currency) {\\n      currency.addEventListener('change', function (e) {\\n        value = e.target.value;\\n        targets.forEach(function (target) {\\n          target.classList.add('d-none');\\n\\n          if (target.getAttribute('data-kt-modal-top-up-wallet-option') === value) {\\n            target.classList.remove('d-none');\\n          }\\n        });\\n      });\\n    }); // Handle top up wallet button\\n\\n    var restartButton = document.querySelector('#kt_modal_top_up_wallet_create_new');\\n    restartButton.addEventListener('click', function () {\\n      form.reset();\\n      stepperObj.goTo(1);\\n    });\\n  }; // Init validation\\n\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    // Step 1\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        top_up_amount: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Top up amount is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 2\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        payment_methods: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Payment method is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 3\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        top_up_password: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Password is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }));\\n  }; // Handle cancel modal\\n\\n\\n  var handleCancelAction = function handleCancelAction() {\\n    var closeButton = modalEl.querySelector('[data-kt-modal-action-type=\\\"close\\\"]');\\n    closeButton.addEventListener('click', function (e) {\\n      cancelAction(e);\\n    });\\n\\n    var cancelAction = function cancelAction(e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    };\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Elements\\n      modalEl = document.querySelector('#kt_modal_top_up_wallet');\\n\\n      if (!modalEl) {\\n        return;\\n      }\\n\\n      modal = new bootstrap.Modal(modalEl);\\n      stepper = document.querySelector('#kt_modal_top_up_wallet_stepper');\\n      form = document.querySelector('#kt_modal_top_up_wallet_stepper_form');\\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\\\"submit\\\"]');\\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\\\"next\\\"]');\\n      initStepper();\\n      initForm();\\n      initValidation();\\n      handleCancelAction();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTModalTopUpWallet.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/top-up-wallet.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/top-up-wallet.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/top-up-wallet.js"]();
/******/ 	
/******/ })()
;