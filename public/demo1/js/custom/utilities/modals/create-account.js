/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/create-account.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/create-account.js ***!
  \****************************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTCreateAccount = function () {\n  // Elements\n  var modal;\n  var modalEl;\n  var stepper;\n  var form;\n  var formSubmitButton;\n  var formContinueButton; // Variables\n\n  var stepperObj;\n  var validations = []; // Private Functions\n\n  var initStepper = function initStepper() {\n    // Initialize Stepper\n    stepperObj = new KTStepper(stepper); // Stepper change event\n\n    stepperObj.on('kt.stepper.changed', function (stepper) {\n      if (stepperObj.getCurrentStepIndex() === 4) {\n        formSubmitButton.classList.remove('d-none');\n        formSubmitButton.classList.add('d-inline-block');\n        formContinueButton.classList.add('d-none');\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\n        formSubmitButton.classList.add('d-none');\n        formContinueButton.classList.add('d-none');\n      } else {\n        formSubmitButton.classList.remove('d-inline-block');\n        formSubmitButton.classList.remove('d-none');\n        formContinueButton.classList.remove('d-none');\n      }\n    }); // Validation before going to next page\n\n    stepperObj.on('kt.stepper.next', function (stepper) {\n      console.log('stepper.next'); // Validate form before change stepper step\n\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            stepper.goNext();\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-light\"\n              }\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      } else {\n        stepper.goNext();\n        KTUtil.scrollTop();\n      }\n    }); // Prev event\n\n    stepperObj.on('kt.stepper.previous', function (stepper) {\n      console.log('stepper.previous');\n      stepper.goPrevious();\n      KTUtil.scrollTop();\n    });\n  };\n\n  var handleForm = function handleForm() {\n    formSubmitButton.addEventListener('click', function (e) {\n      // Validate form before change stepper step\n      var validator = validations[3]; // get validator for last form\n\n      validator.validate().then(function (status) {\n        console.log('validated!');\n\n        if (status == 'Valid') {\n          // Prevent default button action\n          e.preventDefault(); // Disable button to avoid multiple click \n\n          formSubmitButton.disabled = true; // Show loading indication\n\n          formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\n\n          setTimeout(function () {\n            // Hide loading indication\n            formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n            formSubmitButton.disabled = false;\n            stepperObj.goNext(); //KTUtil.scrollTop();\n          }, 2000);\n        } else {\n          Swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-light\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"card_expiry_month\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[3].revalidateField('card_expiry_month');\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"card_expiry_year\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[3].revalidateField('card_expiry_year');\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"business_type\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[2].revalidateField('business_type');\n    });\n  };\n\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        account_type: {\n          validators: {\n            notEmpty: {\n              message: 'Account type is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 2\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'account_team_size': {\n          validators: {\n            notEmpty: {\n              message: 'Time size is required'\n            }\n          }\n        },\n        'account_name': {\n          validators: {\n            notEmpty: {\n              message: 'Account name is required'\n            }\n          }\n        },\n        'account_plan': {\n          validators: {\n            notEmpty: {\n              message: 'Account plan is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 3\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'business_name': {\n          validators: {\n            notEmpty: {\n              message: 'Busines name is required'\n            }\n          }\n        },\n        'business_descriptor': {\n          validators: {\n            notEmpty: {\n              message: 'Busines descriptor is required'\n            }\n          }\n        },\n        'business_type': {\n          validators: {\n            notEmpty: {\n              message: 'Busines type is required'\n            }\n          }\n        },\n        'business_description': {\n          validators: {\n            notEmpty: {\n              message: 'Busines description is required'\n            }\n          }\n        },\n        'business_email': {\n          validators: {\n            notEmpty: {\n              message: 'Busines email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 4\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'card_name': {\n          validators: {\n            notEmpty: {\n              message: 'Name on card is required'\n            }\n          }\n        },\n        'card_number': {\n          validators: {\n            notEmpty: {\n              message: 'Card member is required'\n            },\n            creditCard: {\n              message: 'Card number is not valid'\n            }\n          }\n        },\n        'card_expiry_month': {\n          validators: {\n            notEmpty: {\n              message: 'Month is required'\n            }\n          }\n        },\n        'card_expiry_year': {\n          validators: {\n            notEmpty: {\n              message: 'Year is required'\n            }\n          }\n        },\n        'card_cvv': {\n          validators: {\n            notEmpty: {\n              message: 'CVV is required'\n            },\n            digits: {\n              message: 'CVV must contain only digits'\n            },\n            stringLength: {\n              min: 3,\n              max: 4,\n              message: 'CVV must contain 3 to 4 digits only'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n  };\n\n  var handleFormSubmit = function handleFormSubmit() {};\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_create_account');\n\n      if (modalEl) {\n        modal = new bootstrap.Modal(modalEl);\n      }\n\n      stepper = document.querySelector('#kt_create_account_stepper');\n      form = stepper.querySelector('#kt_create_account_form');\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n      initStepper();\n      initValidation();\n      handleForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTCreateAccount.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL3V0aWxpdGllcy9tb2RhbHMvY3JlYXRlLWFjY291bnQuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsZUFBZSxHQUFHLFlBQVk7QUFDakM7QUFDQSxNQUFJQyxLQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUVBLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxJQUFKO0FBQ0EsTUFBSUMsZ0JBQUo7QUFDQSxNQUFJQyxrQkFBSixDQVJpQyxDQVVqQzs7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLEVBQWxCLENBWmlDLENBY2pDOztBQUNBLE1BQUlDLFdBQVcsR0FBRyxTQUFkQSxXQUFjLEdBQVk7QUFDN0I7QUFDQUYsSUFBQUEsVUFBVSxHQUFHLElBQUlHLFNBQUosQ0FBY1AsT0FBZCxDQUFiLENBRjZCLENBSTdCOztBQUNBSSxJQUFBQSxVQUFVLENBQUNJLEVBQVgsQ0FBYyxvQkFBZCxFQUFvQyxVQUFVUixPQUFWLEVBQW1CO0FBQ3RELFVBQUlJLFVBQVUsQ0FBQ0ssbUJBQVgsT0FBcUMsQ0FBekMsRUFBNEM7QUFDM0NQLFFBQUFBLGdCQUFnQixDQUFDUSxTQUFqQixDQUEyQkMsTUFBM0IsQ0FBa0MsUUFBbEM7QUFDQVQsUUFBQUEsZ0JBQWdCLENBQUNRLFNBQWpCLENBQTJCRSxHQUEzQixDQUErQixnQkFBL0I7QUFDQVQsUUFBQUEsa0JBQWtCLENBQUNPLFNBQW5CLENBQTZCRSxHQUE3QixDQUFpQyxRQUFqQztBQUNBLE9BSkQsTUFJTyxJQUFJUixVQUFVLENBQUNLLG1CQUFYLE9BQXFDLENBQXpDLEVBQTRDO0FBQ2xEUCxRQUFBQSxnQkFBZ0IsQ0FBQ1EsU0FBakIsQ0FBMkJFLEdBQTNCLENBQStCLFFBQS9CO0FBQ0FULFFBQUFBLGtCQUFrQixDQUFDTyxTQUFuQixDQUE2QkUsR0FBN0IsQ0FBaUMsUUFBakM7QUFDQSxPQUhNLE1BR0E7QUFDTlYsUUFBQUEsZ0JBQWdCLENB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QVY7QUFDQXZDLE1BQUFBLElBQUksR0FBR0QsT0FBTyxDQUFDd0MsYUFBUixDQUFzQix5QkFBdEIsQ0FBUDtBQUNBdEMsTUFBQUEsZ0JBQWdCLEdBQUdGLE9BQU8sQ0FBQ3dDLGFBQVIsQ0FBc0IsbUNBQXRCLENBQW5CO0FBQ0FyQyxNQUFBQSxrQkFBa0IsR0FBR0gsT0FBTyxDQUFDd0MsYUFBUixDQUFzQixpQ0FBdEIsQ0FBckI7QUFFQWxDLE1BQUFBLFdBQVc7QUFDWG9DLE1BQUFBLGNBQWM7QUFDZFgsTUFBQUEsVUFBVTtBQUNWO0FBakJLLEdBQVA7QUFtQkEsQ0FsV3FCLEVBQXRCLEMsQ0FvV0E7OztBQUNBWCxNQUFNLENBQUNpRCxrQkFBUCxDQUEwQixZQUFXO0FBQ2pDeEUsRUFBQUEsZUFBZSxDQUFDcUUsSUFBaEI7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS91dGlsaXRpZXMvbW9kYWxzL2NyZWF0ZS1hY2NvdW50LmpzPzBjZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVENyZWF0ZUFjY291bnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0Ly8gRWxlbWVudHNcclxuXHR2YXIgbW9kYWw7XHRcclxuXHR2YXIgbW9kYWxFbDtcclxuXHJcblx0dmFyIHN0ZXBwZXI7XHJcblx0dmFyIGZvcm07XHJcblx0dmFyIGZvcm1TdWJtaXRCdXR0b247XHJcblx0dmFyIGZvcm1Db250aW51ZUJ1dHRvbjtcclxuXHJcblx0Ly8gVmFyaWFibGVzXHJcblx0dmFyIHN0ZXBwZXJPYmo7XHJcblx0dmFyIHZhbGlkYXRpb25zID0gW107XHJcblxyXG5cdC8vIFByaXZhdGUgRnVuY3Rpb25zXHJcblx0dmFyIGluaXRTdGVwcGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Ly8gSW5pdGlhbGl6ZSBTdGVwcGVyXHJcblx0XHRzdGVwcGVyT2JqID0gbmV3IEtUU3RlcHBlcihzdGVwcGVyKTtcclxuXHJcblx0XHQvLyBTdGVwcGVyIGNoYW5nZSBldmVudFxyXG5cdFx0c3RlcHBlck9iai5vbigna3Quc3RlcHBlci5jaGFuZ2VkJywgZnVuY3Rpb24gKHN0ZXBwZXIpIHtcclxuXHRcdFx0aWYgKHN0ZXBwZXJPYmouZ2V0Q3VycmVudFN0ZXBJbmRleCgpID09PSA0KSB7XHJcblx0XHRcdFx0Zm9ybVN1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuXHRcdFx0XHRmb3JtU3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2QtaW5saW5lLWJsb2NrJyk7XHJcblx0XHRcdFx0Zm9ybUNvbnRpbnVlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHN0ZXBwZXJPYmouZ2V0Q3VycmVudFN0ZXBJbmRleCgpID09PSA1KSB7XHJcblx0XHRcdFx0Zm9ybVN1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuXHRcdFx0XHRmb3JtQ29udGludWVCdXR0b24uY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9ybVN1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdkLWlubGluZS1ibG9jaycpO1xyXG5cdFx0XHRcdGZvcm1TdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcblx0XHRcdFx0Zm9ybUNvbnRpbnVlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBWYWxpZGF0aW9uIGJlZm9yZSBnb2luZyB0byBuZXh0IHBhZ2VcclxuXHRcdHN0ZXBwZXJPYmoub24oJ2t0LnN0ZXBwZXIubmV4dCcsIGZ1bmN0aW9uIChzdGVwcGVyKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdzdGVwcGVyLm5leHQnKTtcclxuXHJcblx0XHRcdC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIGNoYW5nZSBzdGVwcGVyIHN0ZXBcclxuXHRcdFx0dmFyIHZhbGlkYXRvciA9IHZhbGlkYXRpb25zW3N0ZXBwZXIuZ2V0Q3VycmVudFN0ZXBJbmRleCgpIC0gMV07IC8vIGdldCB2YWxpZGF0b3IgZm9yIGN1cnJudCBzdGVwXHJcblxyXG5cdFx0XHRpZiAodmFsaWRhdG9yKSB7XHJcblx0XHRcdFx0dmFsaWRhdG9yLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG5cdFx0XHRcdFx0XHRzdGVwcGVyLmdvTmV4dCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0U3dhbC5maXJlKHtcclxuXHRcdFx0XHRcdFx0XHR0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuXHRcdFx0XHRcdFx0XHRpY29uOiBcImVycm9yXCIsXHJcblx0XHRcdFx0XHRcdFx0YnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcblx0XHRcdFx0XHRcdFx0Y3VzdG9tQ2xhc3M6IHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1saWdodFwiXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRLVFV0aWwuc2Nyb2xsVG9wKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0ZXBwZXIuZ29OZXh0KCk7XHJcblxyXG5cdFx0XHRcdEtUVXRpbC5zY3JvbGxUb3AoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gUHJldiBldmVudFxyXG5cdFx0c3RlcHBlck9iai5vbigna3Quc3RlcHBlci5wcmV2aW91cycsIGZ1bmN0aW9uIChzdGVwcGVyKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdzdGVwcGVyLnByZXZpb3VzJyk7XHJcblxyXG5cdFx0XHRzdGVwcGVyLmdvUHJldmlvdXMoKTtcclxuXHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2YXIgaGFuZGxlRm9ybSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Zm9ybVN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdC8vIFZhbGlkYXRlIGZvcm0gYmVmb3JlIGNoYW5nZSBzdGVwcGVyIHN0ZXBcclxuXHRcdFx0dmFyIHZhbGlkYXRvciA9IHZhbGlkYXRpb25zWzNdOyAvLyBnZXQgdmFsaWRhdG9yIGZvciBsYXN0IGZvcm1cclxuXHJcblx0XHRcdHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCd2YWxpZGF0ZWQhJyk7XHJcblxyXG5cdFx0XHRcdGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdFx0XHQvLyBEaXNhYmxlIGJ1dHRvbiB0byBhdm9pZCBtdWx0aXBsZSBjbGljayBcclxuXHRcdFx0XHRcdGZvcm1TdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdC8vIFNob3cgbG9hZGluZyBpbmRpY2F0aW9uXHJcblx0XHRcdFx0XHRmb3JtU3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcblx0XHRcdFx0XHQvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdC8vIEhpZGUgbG9hZGluZyBpbmRpY2F0aW9uXHJcblx0XHRcdFx0XHRcdGZvcm1TdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRW5hYmxlIGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRmb3JtU3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHRzdGVwcGVyT2JqLmdvTmV4dCgpO1xyXG5cdFx0XHRcdFx0XHQvL0tUVXRpbC5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdH0sIDIwMDApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRTd2FsLmZpcmUoe1xyXG5cdFx0XHRcdFx0XHR0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuXHRcdFx0XHRcdFx0aWNvbjogXCJlcnJvclwiLFxyXG5cdFx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcblx0XHRcdFx0XHRcdGN1c3RvbUNsYXNzOiB7XHJcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gYnRuLWxpZ2h0XCJcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdEtUVXRpbC5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBFeHBpcnkgbW9udGguIEZvciBtb3JlIGluZm8sIHBsYXNlIHZpc2l0IHRoZSBvZmZpY2lhbCBwbHVnaW4gc2l0ZTogaHR0cHM6Ly9zZWxlY3QyLm9yZy9cclxuICAgICAgICAkKGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJjYXJkX2V4cGlyeV9tb250aFwiXScpKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIFJldmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gYW4gb3B0aW9uIGlzIGNob3NlblxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uc1szXS5yZXZhbGlkYXRlRmllbGQoJ2NhcmRfZXhwaXJ5X21vbnRoJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cdFx0Ly8gRXhwaXJ5IHllYXIuIEZvciBtb3JlIGluZm8sIHBsYXNlIHZpc2l0IHRoZSBvZmZpY2lhbCBwbHVnaW4gc2l0ZTogaHR0cHM6Ly9zZWxlY3QyLm9yZy9cclxuICAgICAgICAkKGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJjYXJkX2V4cGlyeV95ZWFyXCJdJykpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gUmV2YWxpZGF0ZSB0aGUgZmllbGQgd2hlbiBhbiBvcHRpb24gaXMgY2hvc2VuXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25zWzNdLnJldmFsaWRhdGVGaWVsZCgnY2FyZF9leHBpcnlfeWVhcicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHRcdC8vIEV4cGlyeSB5ZWFyLiBGb3IgbW9yZSBpbmZvLCBwbGFzZSB2aXNpdCB0aGUgb2ZmaWNpYWwgcGx1Z2luIHNpdGU6IGh0dHBzOi8vc2VsZWN0Mi5vcmcvXHJcbiAgICAgICAgJChmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiYnVzaW5lc3NfdHlwZVwiXScpKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIFJldmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gYW4gb3B0aW9uIGlzIGNob3NlblxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uc1syXS5yZXZhbGlkYXRlRmllbGQoJ2J1c2luZXNzX3R5cGUnKTtcclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG5cdHZhciBpbml0VmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXHJcblx0XHQvLyBTdGVwIDFcclxuXHRcdHZhbGlkYXRpb25zLnB1c2goRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXHJcblx0XHRcdGZvcm0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdGFjY291bnRfdHlwZToge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdBY2NvdW50IHR5cGUgaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRwbHVnaW5zOiB7XHJcblx0XHRcdFx0XHR0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcblx0XHRcdFx0XHRib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG5cdFx0XHRcdFx0XHRyb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdCkpO1xyXG5cclxuXHRcdC8vIFN0ZXAgMlxyXG5cdFx0dmFsaWRhdGlvbnMucHVzaChGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcclxuXHRcdFx0Zm9ybSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0J2FjY291bnRfdGVhbV9zaXplJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdUaW1lIHNpemUgaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J2FjY291bnRfbmFtZSc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQWNjb3VudCBuYW1lIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdhY2NvdW50X3BsYW4nOiB7XHJcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcclxuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0FjY291bnQgcGxhbiBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHBsdWdpbnM6IHtcclxuXHRcdFx0XHRcdHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcclxuXHRcdFx0XHRcdC8vIEJvb3RzdHJhcCBGcmFtZXdvcmsgSW50ZWdyYXRpb25cclxuXHRcdFx0XHRcdGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XHJcblx0XHRcdFx0XHRcdHJvd1NlbGVjdG9yOiAnLmZ2LXJvdycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZUludmFsaWRDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZVZhbGlkQ2xhc3M6ICcnXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0KSk7XHJcblxyXG5cdFx0Ly8gU3RlcCAzXHJcblx0XHR2YWxpZGF0aW9ucy5wdXNoKEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG5cdFx0XHRmb3JtLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHQnYnVzaW5lc3NfbmFtZSc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQnVzaW5lcyBuYW1lIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdidXNpbmVzc19kZXNjcmlwdG9yJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdCdXNpbmVzIGRlc2NyaXB0b3IgaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J2J1c2luZXNzX3R5cGUnOiB7XHJcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcclxuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0J1c2luZXMgdHlwZSBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnYnVzaW5lc3NfZGVzY3JpcHRpb24nOiB7XHJcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcclxuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0J1c2luZXMgZGVzY3JpcHRpb24gaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J2J1c2luZXNzX2VtYWlsJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdCdXNpbmVzIGVtYWlsIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0ZW1haWxBZGRyZXNzOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnVGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRwbHVnaW5zOiB7XHJcblx0XHRcdFx0XHR0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcblx0XHRcdFx0XHQvLyBCb290c3RyYXAgRnJhbWV3b3JrIEludGVncmF0aW9uXHJcblx0XHRcdFx0XHRib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG5cdFx0XHRcdFx0XHRyb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdCkpO1xyXG5cclxuXHRcdC8vIFN0ZXAgNFxyXG5cdFx0dmFsaWRhdGlvbnMucHVzaChGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcclxuXHRcdFx0Zm9ybSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0J2NhcmRfbmFtZSc6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnTmFtZSBvbiBjYXJkIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdjYXJkX251bWJlcic6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ2FyZCBtZW1iZXIgaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRpdENhcmQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQ2FyZCBudW1iZXIgaXMgbm90IHZhbGlkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J2NhcmRfZXhwaXJ5X21vbnRoJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdNb250aCBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnY2FyZF9leHBpcnlfeWVhcic6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnWWVhciBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnY2FyZF9jdnYnOiB7XHJcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcclxuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0NWViBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdGRpZ2l0czoge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0NWViBtdXN0IGNvbnRhaW4gb25seSBkaWdpdHMnXHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRzdHJpbmdMZW5ndGg6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1pbjogMyxcclxuXHRcdFx0XHRcdFx0XHRcdG1heDogNCxcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDVlYgbXVzdCBjb250YWluIDMgdG8gNCBkaWdpdHMgb25seSdcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRwbHVnaW5zOiB7XHJcblx0XHRcdFx0XHR0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcblx0XHRcdFx0XHQvLyBCb290c3RyYXAgRnJhbWV3b3JrIEludGVncmF0aW9uXHJcblx0XHRcdFx0XHRib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG5cdFx0XHRcdFx0XHRyb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdCkpO1xyXG5cdH1cclxuXHJcblx0dmFyIGhhbmRsZUZvcm1TdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdC8vIFB1YmxpYyBGdW5jdGlvbnNcclxuXHRcdGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Ly8gRWxlbWVudHNcclxuXHRcdFx0bW9kYWxFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9jcmVhdGVfYWNjb3VudCcpO1xyXG5cdFx0XHRpZiAobW9kYWxFbCkge1xyXG5cdFx0XHRcdG1vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbChtb2RhbEVsKTtcdFxyXG5cdFx0XHR9XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0c3RlcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9jcmVhdGVfYWNjb3VudF9zdGVwcGVyJyk7XHJcblx0XHRcdGZvcm0gPSBzdGVwcGVyLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jcmVhdGVfYWNjb3VudF9mb3JtJyk7XHJcblx0XHRcdGZvcm1TdWJtaXRCdXR0b24gPSBzdGVwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXN0ZXBwZXItYWN0aW9uPVwic3VibWl0XCJdJyk7XHJcblx0XHRcdGZvcm1Db250aW51ZUJ1dHRvbiA9IHN0ZXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEta3Qtc3RlcHBlci1hY3Rpb249XCJuZXh0XCJdJyk7XHJcblxyXG5cdFx0XHRpbml0U3RlcHBlcigpO1xyXG5cdFx0XHRpbml0VmFsaWRhdGlvbigpO1xyXG5cdFx0XHRoYW5kbGVGb3JtKCk7XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbigpIHtcclxuICAgIEtUQ3JlYXRlQWNjb3VudC5pbml0KCk7XHJcbn0pOyJdLCJuYW1lcyI6WyJLVENyZWF0ZUFjY291bnQiLCJtb2RhbCIsIm1vZGFsRWwiLCJzdGVwcGVyIiwiZm9ybSIsImZvcm1TdWJtaXRCdXR0b24iLCJmb3JtQ29udGludWVCdXR0b24iLCJzdGVwcGVyT2JqIiwidmFsaWRhdGlvbnMiLCJpbml0U3RlcHBlciIsIktUU3RlcHBlciIsIm9uIiwiZ2V0Q3VycmVudFN0ZXBJbmRleCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImNvbnNvbGUiLCJsb2ciLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJnb05leHQiLCJLVFV0aWwiLCJzY3JvbGxUb3AiLCJTd2FsIiwiZmlyZSIsInRleHQiLCJpY29uIiwiYnV0dG9uc1N0eWxpbmciLCJjb25maXJtQnV0dG9uVGV4dCIsImN1c3RvbUNsYXNzIiwiY29uZmlybUJ1dHRvbiIsImdvUHJldmlvdXMiLCJoYW5kbGVGb3JtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRpc2FibGVkIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsIiQiLCJxdWVyeVNlbGVjdG9yIiwicmV2YWxpZGF0ZUZpZWxkIiwiaW5pdFZhbGlkYXRpb24iLCJwdXNoIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsImFjY291bnRfdHlwZSIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwbHVnaW5zIiwidHJpZ2dlciIsIlRyaWdnZXIiLCJib290c3RyYXAiLCJCb290c3RyYXA1Iiwicm93U2VsZWN0b3IiLCJlbGVJbnZhbGlkQ2xhc3MiLCJlbGVWYWxpZENsYXNzIiwiZW1haWxBZGRyZXNzIiwiY3JlZGl0Q2FyZCIsImRpZ2l0cyIsInN0cmluZ0xlbmd0aCIsIm1pbiIsIm1heCIsImhhbmRsZUZvcm1TdWJtaXQiLCJpbml0IiwiZG9jdW1lbnQiLCJNb2RhbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-account.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/create-account.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/create-account.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/utilities/modals/create-account.js\":\n    /*!****************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/utilities/modals/create-account.js ***!\r\n      \\****************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsCreateAccountJs() {\n      eval(\" // Class definition\\n\\nvar KTCreateAccount = function () {\\n  // Elements\\n  var modal;\\n  var modalEl;\\n  var stepper;\\n  var form;\\n  var formSubmitButton;\\n  var formContinueButton; // Variables\\n\\n  var stepperObj;\\n  var validations = []; // Private Functions\\n\\n  var initStepper = function initStepper() {\\n    // Initialize Stepper\\n    stepperObj = new KTStepper(stepper); // Stepper change event\\n\\n    stepperObj.on('kt.stepper.changed', function (stepper) {\\n      if (stepperObj.getCurrentStepIndex() === 4) {\\n        formSubmitButton.classList.remove('d-none');\\n        formSubmitButton.classList.add('d-inline-block');\\n        formContinueButton.classList.add('d-none');\\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\\n        formSubmitButton.classList.add('d-none');\\n        formContinueButton.classList.add('d-none');\\n      } else {\\n        formSubmitButton.classList.remove('d-inline-block');\\n        formSubmitButton.classList.remove('d-none');\\n        formContinueButton.classList.remove('d-none');\\n      }\\n    }); // Validation before going to next page\\n\\n    stepperObj.on('kt.stepper.next', function (stepper) {\\n      console.log('stepper.next'); // Validate form before change stepper step\\n\\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            stepper.goNext();\\n            KTUtil.scrollTop();\\n          } else {\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-light\\\"\\n              }\\n            }).then(function () {\\n              KTUtil.scrollTop();\\n            });\\n          }\\n        });\\n      } else {\\n        stepper.goNext();\\n        KTUtil.scrollTop();\\n      }\\n    }); // Prev event\\n\\n    stepperObj.on('kt.stepper.previous', function (stepper) {\\n      console.log('stepper.previous');\\n      stepper.goPrevious();\\n      KTUtil.scrollTop();\\n    });\\n  };\\n\\n  var handleForm = function handleForm() {\\n    formSubmitButton.addEventListener('click', function (e) {\\n      // Validate form before change stepper step\\n      var validator = validations[3]; // get validator for last form\\n\\n      validator.validate().then(function (status) {\\n        console.log('validated!');\\n\\n        if (status == 'Valid') {\\n          // Prevent default button action\\n          e.preventDefault(); // Disable button to avoid multiple click \\n\\n          formSubmitButton.disabled = true; // Show loading indication\\n\\n          formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n          setTimeout(function () {\\n            // Hide loading indication\\n            formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            formSubmitButton.disabled = false;\\n            stepperObj.goNext(); //KTUtil.scrollTop();\\n          }, 2000);\\n        } else {\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-light\\\"\\n            }\\n          }).then(function () {\\n            KTUtil.scrollTop();\\n          });\\n        }\\n      });\\n    }); // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"card_expiry_month\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[3].revalidateField('card_expiry_month');\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"card_expiry_year\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[3].revalidateField('card_expiry_year');\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"business_type\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[2].revalidateField('business_type');\\n    });\\n  };\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    // Step 1\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        account_type: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account type is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 2\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'account_team_size': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Time size is required'\\n            }\\n          }\\n        },\\n        'account_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account name is required'\\n            }\\n          }\\n        },\\n        'account_plan': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account plan is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 3\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'business_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines name is required'\\n            }\\n          }\\n        },\\n        'business_descriptor': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines descriptor is required'\\n            }\\n          }\\n        },\\n        'business_type': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines type is required'\\n            }\\n          }\\n        },\\n        'business_description': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines description is required'\\n            }\\n          }\\n        },\\n        'business_email': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines email is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 4\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'card_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Name on card is required'\\n            }\\n          }\\n        },\\n        'card_number': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Card member is required'\\n            },\\n            creditCard: {\\n              message: 'Card number is not valid'\\n            }\\n          }\\n        },\\n        'card_expiry_month': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Month is required'\\n            }\\n          }\\n        },\\n        'card_expiry_year': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Year is required'\\n            }\\n          }\\n        },\\n        'card_cvv': {\\n          validators: {\\n            notEmpty: {\\n              message: 'CVV is required'\\n            },\\n            digits: {\\n              message: 'CVV must contain only digits'\\n            },\\n            stringLength: {\\n              min: 3,\\n              max: 4,\\n              message: 'CVV must contain 3 to 4 digits only'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }));\\n  };\\n\\n  var handleFormSubmit = function handleFormSubmit() {};\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Elements\\n      modalEl = document.querySelector('#kt_modal_create_account');\\n\\n      if (modalEl) {\\n        modal = new bootstrap.Modal(modalEl);\\n      }\\n\\n      stepper = document.querySelector('#kt_create_account_stepper');\\n      form = stepper.querySelector('#kt_create_account_form');\\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\\\"submit\\\"]');\\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\\\"next\\\"]');\\n      initStepper();\\n      initValidation();\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCreateAccount.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-account.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/create-account.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/create-account.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/create-account.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/create-account.js"]();
/******/ 	
/******/ })()
;