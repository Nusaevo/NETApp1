/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/create-account.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/create-account.js ***!
  \****************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTCreateAccount = function () {\n  // Elements\n  var modal;\n  var modalEl;\n  var stepper;\n  var form;\n  var formSubmitButton;\n  var formContinueButton;\n\n  // Variables\n  var stepperObj;\n  var validations = [];\n\n  // Private Functions\n  var initStepper = function initStepper() {\n    // Initialize Stepper\n    stepperObj = new KTStepper(stepper);\n\n    // Stepper change event\n    stepperObj.on('kt.stepper.changed', function (stepper) {\n      if (stepperObj.getCurrentStepIndex() === 4) {\n        formSubmitButton.classList.remove('d-none');\n        formSubmitButton.classList.add('d-inline-block');\n        formContinueButton.classList.add('d-none');\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\n        formSubmitButton.classList.add('d-none');\n        formContinueButton.classList.add('d-none');\n      } else {\n        formSubmitButton.classList.remove('d-inline-block');\n        formSubmitButton.classList.remove('d-none');\n        formContinueButton.classList.remove('d-none');\n      }\n    });\n\n    // Validation before going to next page\n    stepperObj.on('kt.stepper.next', function (stepper) {\n      console.log('stepper.next');\n\n      // Validate form before change stepper step\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            stepper.goNext();\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-light\"\n              }\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      } else {\n        stepper.goNext();\n        KTUtil.scrollTop();\n      }\n    });\n\n    // Prev event\n    stepperObj.on('kt.stepper.previous', function (stepper) {\n      console.log('stepper.previous');\n      stepper.goPrevious();\n      KTUtil.scrollTop();\n    });\n  };\n  var handleForm = function handleForm() {\n    formSubmitButton.addEventListener('click', function (e) {\n      // Validate form before change stepper step\n      var validator = validations[3]; // get validator for last form\n\n      validator.validate().then(function (status) {\n        console.log('validated!');\n        if (status == 'Valid') {\n          // Prevent default button action\n          e.preventDefault();\n\n          // Disable button to avoid multiple click \n          formSubmitButton.disabled = true;\n\n          // Show loading indication\n          formSubmitButton.setAttribute('data-kt-indicator', 'on');\n\n          // Simulate form submission\n          setTimeout(function () {\n            // Hide loading indication\n            formSubmitButton.removeAttribute('data-kt-indicator');\n\n            // Enable button\n            formSubmitButton.disabled = false;\n            stepperObj.goNext();\n            //KTUtil.scrollTop();\n          }, 2000);\n        } else {\n          Swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-light\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    });\n\n    // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"card_expiry_month\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[3].revalidateField('card_expiry_month');\n    });\n\n    // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"card_expiry_year\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[3].revalidateField('card_expiry_year');\n    });\n\n    // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"business_type\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validations[2].revalidateField('business_type');\n    });\n  };\n  var initValidation = function initValidation() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        account_type: {\n          validators: {\n            notEmpty: {\n              message: 'Account type is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 2\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'account_team_size': {\n          validators: {\n            notEmpty: {\n              message: 'Time size is required'\n            }\n          }\n        },\n        'account_name': {\n          validators: {\n            notEmpty: {\n              message: 'Account name is required'\n            }\n          }\n        },\n        'account_plan': {\n          validators: {\n            notEmpty: {\n              message: 'Account plan is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 3\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'business_name': {\n          validators: {\n            notEmpty: {\n              message: 'Busines name is required'\n            }\n          }\n        },\n        'business_descriptor': {\n          validators: {\n            notEmpty: {\n              message: 'Busines descriptor is required'\n            }\n          }\n        },\n        'business_type': {\n          validators: {\n            notEmpty: {\n              message: 'Busines type is required'\n            }\n          }\n        },\n        'business_description': {\n          validators: {\n            notEmpty: {\n              message: 'Busines description is required'\n            }\n          }\n        },\n        'business_email': {\n          validators: {\n            notEmpty: {\n              message: 'Busines email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n\n    // Step 4\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        'card_name': {\n          validators: {\n            notEmpty: {\n              message: 'Name on card is required'\n            }\n          }\n        },\n        'card_number': {\n          validators: {\n            notEmpty: {\n              message: 'Card member is required'\n            },\n            creditCard: {\n              message: 'Card number is not valid'\n            }\n          }\n        },\n        'card_expiry_month': {\n          validators: {\n            notEmpty: {\n              message: 'Month is required'\n            }\n          }\n        },\n        'card_expiry_year': {\n          validators: {\n            notEmpty: {\n              message: 'Year is required'\n            }\n          }\n        },\n        'card_cvv': {\n          validators: {\n            notEmpty: {\n              message: 'CVV is required'\n            },\n            digits: {\n              message: 'CVV must contain only digits'\n            },\n            stringLength: {\n              min: 3,\n              max: 4,\n              message: 'CVV must contain 3 to 4 digits only'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }));\n  };\n  var handleFormSubmit = function handleFormSubmit() {};\n  return {\n    // Public Functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_create_account');\n      if (modalEl) {\n        modal = new bootstrap.Modal(modalEl);\n      }\n      stepper = document.querySelector('#kt_create_account_stepper');\n      form = stepper.querySelector('#kt_create_account_form');\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n      initStepper();\n      initValidation();\n      handleForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTCreateAccount.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-account.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/create-account.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/create-account.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/utilities/modals/create-account.js\": (\n    /*!****************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/utilities/modals/create-account.js ***!\n      \\****************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsCreateAccountJs() {\n      eval(\" // Class definition\\n\\nvar KTCreateAccount = function () {\\n  // Elements\\n  var modal;\\n  var modalEl;\\n  var stepper;\\n  var form;\\n  var formSubmitButton;\\n  var formContinueButton; // Variables\\n\\n  var stepperObj;\\n  var validations = []; // Private Functions\\n\\n  var initStepper = function initStepper() {\\n    // Initialize Stepper\\n    stepperObj = new KTStepper(stepper); // Stepper change event\\n\\n    stepperObj.on('kt.stepper.changed', function (stepper) {\\n      if (stepperObj.getCurrentStepIndex() === 4) {\\n        formSubmitButton.classList.remove('d-none');\\n        formSubmitButton.classList.add('d-inline-block');\\n        formContinueButton.classList.add('d-none');\\n      } else if (stepperObj.getCurrentStepIndex() === 5) {\\n        formSubmitButton.classList.add('d-none');\\n        formContinueButton.classList.add('d-none');\\n      } else {\\n        formSubmitButton.classList.remove('d-inline-block');\\n        formSubmitButton.classList.remove('d-none');\\n        formContinueButton.classList.remove('d-none');\\n      }\\n    }); // Validation before going to next page\\n\\n    stepperObj.on('kt.stepper.next', function (stepper) {\\n      console.log('stepper.next'); // Validate form before change stepper step\\n\\n      var validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            stepper.goNext();\\n            KTUtil.scrollTop();\\n          } else {\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-light\\\"\\n              }\\n            }).then(function () {\\n              KTUtil.scrollTop();\\n            });\\n          }\\n        });\\n      } else {\\n        stepper.goNext();\\n        KTUtil.scrollTop();\\n      }\\n    }); // Prev event\\n\\n    stepperObj.on('kt.stepper.previous', function (stepper) {\\n      console.log('stepper.previous');\\n      stepper.goPrevious();\\n      KTUtil.scrollTop();\\n    });\\n  };\\n\\n  var handleForm = function handleForm() {\\n    formSubmitButton.addEventListener('click', function (e) {\\n      // Validate form before change stepper step\\n      var validator = validations[3]; // get validator for last form\\n\\n      validator.validate().then(function (status) {\\n        console.log('validated!');\\n\\n        if (status == 'Valid') {\\n          // Prevent default button action\\n          e.preventDefault(); // Disable button to avoid multiple click \\n\\n          formSubmitButton.disabled = true; // Show loading indication\\n\\n          formSubmitButton.setAttribute('data-kt-indicator', 'on'); // Simulate form submission\\n\\n          setTimeout(function () {\\n            // Hide loading indication\\n            formSubmitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            formSubmitButton.disabled = false;\\n            stepperObj.goNext(); //KTUtil.scrollTop();\\n          }, 2000);\\n        } else {\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-light\\\"\\n            }\\n          }).then(function () {\\n            KTUtil.scrollTop();\\n          });\\n        }\\n      });\\n    }); // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"card_expiry_month\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[3].revalidateField('card_expiry_month');\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"card_expiry_year\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[3].revalidateField('card_expiry_year');\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"business_type\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validations[2].revalidateField('business_type');\\n    });\\n  };\\n\\n  var initValidation = function initValidation() {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    // Step 1\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        account_type: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account type is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 2\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'account_team_size': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Time size is required'\\n            }\\n          }\\n        },\\n        'account_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account name is required'\\n            }\\n          }\\n        },\\n        'account_plan': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Account plan is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 3\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'business_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines name is required'\\n            }\\n          }\\n        },\\n        'business_descriptor': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines descriptor is required'\\n            }\\n          }\\n        },\\n        'business_type': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines type is required'\\n            }\\n          }\\n        },\\n        'business_description': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines description is required'\\n            }\\n          }\\n        },\\n        'business_email': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Busines email is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    })); // Step 4\\n\\n    validations.push(FormValidation.formValidation(form, {\\n      fields: {\\n        'card_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Name on card is required'\\n            }\\n          }\\n        },\\n        'card_number': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Card member is required'\\n            },\\n            creditCard: {\\n              message: 'Card number is not valid'\\n            }\\n          }\\n        },\\n        'card_expiry_month': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Month is required'\\n            }\\n          }\\n        },\\n        'card_expiry_year': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Year is required'\\n            }\\n          }\\n        },\\n        'card_cvv': {\\n          validators: {\\n            notEmpty: {\\n              message: 'CVV is required'\\n            },\\n            digits: {\\n              message: 'CVV must contain only digits'\\n            },\\n            stringLength: {\\n              min: 3,\\n              max: 4,\\n              message: 'CVV must contain 3 to 4 digits only'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        // Bootstrap Framework Integration\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }));\\n  };\\n\\n  var handleFormSubmit = function handleFormSubmit() {};\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Elements\\n      modalEl = document.querySelector('#kt_modal_create_account');\\n\\n      if (modalEl) {\\n        modal = new bootstrap.Modal(modalEl);\\n      }\\n\\n      stepper = document.querySelector('#kt_create_account_stepper');\\n      form = stepper.querySelector('#kt_create_account_form');\\n      formSubmitButton = stepper.querySelector('[data-kt-stepper-action=\\\"submit\\\"]');\\n      formContinueButton = stepper.querySelector('[data-kt-stepper-action=\\\"next\\\"]');\\n      initStepper();\\n      initValidation();\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTCreateAccount.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/create-account.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/create-account.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/create-account.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/create-account.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/create-account.js"]();
/******/ 	
/******/ })()
;