/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/bidding.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/bidding.js ***!
  \*********************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTModalBidding = function () {\n  // Shared variables\n  var element;\n  var form;\n  var modal;\n\n  // Private functions\n  var initForm = function initForm() {\n    // Dynamically create validation non-empty rule\n    var requiredFields = form.querySelectorAll('.required');\n    var detectedField;\n    var validationFields = {\n      fields: {},\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    };\n\n    // Detect required fields\n    requiredFields.forEach(function (el) {\n      var input = el.closest('.fv-row').querySelector('input');\n      if (input) {\n        detectedField = input;\n      }\n      var textarea = el.closest('.fv-row').querySelector('textarea');\n      if (textarea) {\n        detectedField = textarea;\n      }\n      var select = el.closest('.fv-row').querySelector('select');\n      if (select) {\n        detectedField = select;\n      }\n\n      // Add validation rule                \n      var name = detectedField.getAttribute('name');\n      validationFields.fields[name] = {\n        validators: {\n          notEmpty: {\n            message: el.innerText + ' is required'\n          }\n        }\n      };\n    });\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    var validator = FormValidation.formValidation(form, validationFields);\n\n    // Submit button handler\n    var submitButton = form.querySelector('[data-kt-modal-action-type=\"submit\"]');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable button to avoid multiple click \n            submitButton.disabled = true;\n\n            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Enable button\n              submitButton.disabled = false;\n\n              // Show popup confirmation \n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function () {\n                //form.submit(); // Submit form\n                form.reset();\n                modal.hide();\n              });\n            }, 2000);\n          } else {\n            // Show popup error \n            Swal.fire({\n              text: \"Oops! There are some error(s) detected.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  // Init Select2 template options\n  var initSelect2Templates = function initSelect2Templates() {\n    var elements = form.querySelectorAll('[data-kt-modal-bidding-type] select');\n    if (!elements) {\n      return;\n    }\n\n    // Format options\n    var format = function format(item) {\n      if (!item.id) {\n        return item.text;\n      }\n      var url = 'assets/media/' + item.element.getAttribute('data-kt-bidding-modal-option-icon');\n      var img = $(\"<img>\", {\n        \"class\": \"rounded-circle me-2\",\n        width: 26,\n        src: url\n      });\n      var span = $(\"<span>\", {\n        text: \" \" + item.text\n      });\n      span.prepend(img);\n      return span;\n    };\n    elements.forEach(function (el) {\n      // Init Select2 --- more info: https://select2.org/\n      $(el).select2({\n        minimumResultsForSearch: Infinity,\n        templateResult: function templateResult(item) {\n          return format(item);\n        }\n      });\n    });\n  };\n\n  // Handle bid options\n  var handleBidOptions = function handleBidOptions() {\n    var options = form.querySelectorAll('[data-kt-modal-bidding=\"option\"]');\n    var inputEl = form.querySelector('[name=\"bid_amount\"]');\n    options.forEach(function (option) {\n      option.addEventListener('click', function (e) {\n        e.preventDefault();\n        inputEl.value = e.target.innerText;\n      });\n    });\n  };\n\n  // Handle currency selector\n  var handleCurrencySelector = function handleCurrencySelector() {\n    var element = form.querySelector('.form-select[name=\"currency_type\"]');\n\n    // Select2 event listener\n    $(element).on('select2:select', function (e) {\n      var value = e.params.data;\n      swapCurrency(value);\n    });\n    var swapCurrency = function swapCurrency(target) {\n      console.log(target);\n      var currencies = form.querySelectorAll('[data-kt-modal-bidding-type]');\n      currencies.forEach(function (currency) {\n        currency.classList.add('d-none');\n        if (currency.getAttribute('data-kt-modal-bidding-type') === target.id) {\n          currency.classList.remove('d-none');\n        }\n      });\n    };\n  };\n\n  // Handle cancel modal\n  var handleCancelAction = function handleCancelAction() {\n    var cancelButton = element.querySelector('[data-kt-modal-action-type=\"cancel\"]');\n    var closeButton = element.querySelector('[data-kt-modal-action-type=\"close\"]');\n    cancelButton.addEventListener('click', function (e) {\n      cancelAction(e);\n    });\n    closeButton.addEventListener('click', function (e) {\n      cancelAction(e);\n    });\n    var cancelAction = function cancelAction(e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    };\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_modal_bidding');\n      form = document.getElementById('kt_modal_bidding_form');\n      modal = new bootstrap.Modal(element);\n      if (!form) {\n        return;\n      }\n      initForm();\n      initSelect2Templates();\n      handleBidOptions();\n      handleCurrencySelector();\n      handleCancelAction();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTModalBidding.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/bidding.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/bidding.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/bidding.js ***!
  \**********************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/utilities/modals/bidding.js\": (\n    /*!*********************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/utilities/modals/bidding.js ***!\n      \\*********************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsBiddingJs() {\n      eval(\" // Class definition\\n\\nvar KTModalBidding = function () {\\n  // Shared variables\\n  var element;\\n  var form;\\n  var modal; // Private functions\\n\\n  var initForm = function initForm() {\\n    // Dynamically create validation non-empty rule\\n    var requiredFields = form.querySelectorAll('.required');\\n    var detectedField;\\n    var validationFields = {\\n      fields: {},\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }; // Detect required fields\\n\\n    requiredFields.forEach(function (el) {\\n      var input = el.closest('.fv-row').querySelector('input');\\n\\n      if (input) {\\n        detectedField = input;\\n      }\\n\\n      var textarea = el.closest('.fv-row').querySelector('textarea');\\n\\n      if (textarea) {\\n        detectedField = textarea;\\n      }\\n\\n      var select = el.closest('.fv-row').querySelector('select');\\n\\n      if (select) {\\n        detectedField = select;\\n      } // Add validation rule                \\n\\n\\n      var name = detectedField.getAttribute('name');\\n      validationFields.fields[name] = {\\n        validators: {\\n          notEmpty: {\\n            message: el.innerText + ' is required'\\n          }\\n        }\\n      };\\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n    var validator = FormValidation.formValidation(form, validationFields); // Submit button handler\\n\\n    var submitButton = form.querySelector('[data-kt-modal-action-type=\\\"submit\\\"]');\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            setTimeout(function () {\\n              // Remove loading indication\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false; // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function () {\\n                //form.submit(); // Submit form\\n                form.reset();\\n                modal.hide();\\n              });\\n            }, 2000);\\n          } else {\\n            // Show popup error \\n            Swal.fire({\\n              text: \\\"Oops! There are some error(s) detected.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n  }; // Init Select2 template options\\n\\n\\n  var initSelect2Templates = function initSelect2Templates() {\\n    var elements = form.querySelectorAll('[data-kt-modal-bidding-type] select');\\n\\n    if (!elements) {\\n      return;\\n    } // Format options\\n\\n\\n    var format = function format(item) {\\n      if (!item.id) {\\n        return item.text;\\n      }\\n\\n      var url = 'assets/media/' + item.element.getAttribute('data-kt-bidding-modal-option-icon');\\n      var img = $(\\\"<img>\\\", {\\n        \\\"class\\\": \\\"rounded-circle me-2\\\",\\n        width: 26,\\n        src: url\\n      });\\n      var span = $(\\\"<span>\\\", {\\n        text: \\\" \\\" + item.text\\n      });\\n      span.prepend(img);\\n      return span;\\n    };\\n\\n    elements.forEach(function (el) {\\n      // Init Select2 --- more info: https://select2.org/\\n      $(el).select2({\\n        minimumResultsForSearch: Infinity,\\n        templateResult: function templateResult(item) {\\n          return format(item);\\n        }\\n      });\\n    });\\n  }; // Handle bid options\\n\\n\\n  var handleBidOptions = function handleBidOptions() {\\n    var options = form.querySelectorAll('[data-kt-modal-bidding=\\\"option\\\"]');\\n    var inputEl = form.querySelector('[name=\\\"bid_amount\\\"]');\\n    options.forEach(function (option) {\\n      option.addEventListener('click', function (e) {\\n        e.preventDefault();\\n        inputEl.value = e.target.innerText;\\n      });\\n    });\\n  }; // Handle currency selector\\n\\n\\n  var handleCurrencySelector = function handleCurrencySelector() {\\n    var element = form.querySelector('.form-select[name=\\\"currency_type\\\"]'); // Select2 event listener\\n\\n    $(element).on('select2:select', function (e) {\\n      var value = e.params.data;\\n      swapCurrency(value);\\n    });\\n\\n    var swapCurrency = function swapCurrency(target) {\\n      console.log(target);\\n      var currencies = form.querySelectorAll('[data-kt-modal-bidding-type]');\\n      currencies.forEach(function (currency) {\\n        currency.classList.add('d-none');\\n\\n        if (currency.getAttribute('data-kt-modal-bidding-type') === target.id) {\\n          currency.classList.remove('d-none');\\n        }\\n      });\\n    };\\n  }; // Handle cancel modal\\n\\n\\n  var handleCancelAction = function handleCancelAction() {\\n    var cancelButton = element.querySelector('[data-kt-modal-action-type=\\\"cancel\\\"]');\\n    var closeButton = element.querySelector('[data-kt-modal-action-type=\\\"close\\\"]');\\n    cancelButton.addEventListener('click', function (e) {\\n      cancelAction(e);\\n    });\\n    closeButton.addEventListener('click', function (e) {\\n      cancelAction(e);\\n    });\\n\\n    var cancelAction = function cancelAction(e) {\\n      e.preventDefault();\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    };\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      // Elements\\n      element = document.querySelector('#kt_modal_bidding');\\n      form = document.getElementById('kt_modal_bidding_form');\\n      modal = new bootstrap.Modal(element);\\n\\n      if (!form) {\\n        return;\\n      }\\n\\n      initForm();\\n      initSelect2Templates();\\n      handleBidOptions();\\n      handleCurrencySelector();\\n      handleCancelAction();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTModalBidding.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/bidding.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/bidding.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/bidding.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/bidding.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/bidding.js"]();
/******/ 	
/******/ })()
;