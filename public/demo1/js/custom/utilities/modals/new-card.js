/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/utilities/modals/new-card.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/core/js/custom/utilities/modals/new-card.js ***!
  \**********************************************************************/
/***/ (() => {

"use strict";
eval(" // Class definition\n\nvar KTModalNewCard = function () {\n  var submitButton;\n  var cancelButton;\n  var validator;\n  var form;\n  var modal;\n  var modalEl; // Init form inputs\n\n  var initForm = function initForm() {\n    // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"card_expiry_month\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('card_expiry_month');\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"card_expiry_year\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('card_expiry_year');\n    });\n  }; // Handle form validation and submittion\n\n\n  var handleForm = function handleForm() {\n    // Stepper custom navigation\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'card_name': {\n          validators: {\n            notEmpty: {\n              message: 'Name on card is required'\n            }\n          }\n        },\n        'card_number': {\n          validators: {\n            notEmpty: {\n              message: 'Card member is required'\n            },\n            creditCard: {\n              message: 'Card number is not valid'\n            }\n          }\n        },\n        'card_expiry_month': {\n          validators: {\n            notEmpty: {\n              message: 'Month is required'\n            }\n          }\n        },\n        'card_expiry_year': {\n          validators: {\n            notEmpty: {\n              message: 'Year is required'\n            }\n          }\n        },\n        'card_cvv': {\n          validators: {\n            notEmpty: {\n              message: 'CVV is required'\n            },\n            digits: {\n              message: 'CVV must contain only digits'\n            },\n            stringLength: {\n              min: 3,\n              max: 4,\n              message: 'CVV must contain 3 to 4 digits only'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Action buttons\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          // Show error message.\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      modalEl = document.querySelector('#kt_modal_new_card');\n\n      if (!modalEl) {\n        return;\n      }\n\n      modal = new bootstrap.Modal(modalEl);\n      form = document.querySelector('#kt_modal_new_card_form');\n      submitButton = document.getElementById('kt_modal_new_card_submit');\n      cancelButton = document.getElementById('kt_modal_new_card_cancel');\n      initForm();\n      handleForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTModalNewCard.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL3V0aWxpdGllcy9tb2RhbHMvbmV3LWNhcmQuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsY0FBYyxHQUFHLFlBQVk7QUFDaEMsTUFBSUMsWUFBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsSUFBSjtBQUNBLE1BQUlDLEtBQUo7QUFDQSxNQUFJQyxPQUFKLENBTmdDLENBUWhDOztBQUNBLE1BQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQVc7QUFDekI7QUFDTUMsSUFBQUEsQ0FBQyxDQUFDSixJQUFJLENBQUNLLGFBQUwsQ0FBbUIsNEJBQW5CLENBQUQsQ0FBRCxDQUFvREMsRUFBcEQsQ0FBdUQsUUFBdkQsRUFBaUUsWUFBVztBQUN4RTtBQUNBUCxNQUFBQSxTQUFTLENBQUNRLGVBQVYsQ0FBMEIsbUJBQTFCO0FBQ0gsS0FIRCxFQUZtQixDQU96Qjs7QUFDTUgsSUFBQUEsQ0FBQyxDQUFDSixJQUFJLENBQUNLLGFBQUwsQ0FBbUIsMkJBQW5CLENBQUQsQ0FBRCxDQUFtREMsRUFBbkQsQ0FBc0QsUUFBdEQsRUFBZ0UsWUFBVztBQUN2RTtBQUNBUCxNQUFBQSxTQUFTLENBQUNRLGVBQVYsQ0FBMEIsa0JBQTFCO0FBQ0gsS0FIRDtBQUlOLEdBWkQsQ0FUZ0MsQ0F1QmhDOzs7QUFDQSxNQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQzNCO0FBRUE7QUFDQVQsSUFBQUEsU0FBUyxHQUFHVSxjQUFjLENBQUNDLGNBQWYsQ0FDWFYsSUFEVyxFQUVYO0FBQ0NXLE1BQUFBLE1BQU0sRUFBRTtBQUNQLHFCQUFhO0FBQ1pDLFVBQUFBLFVBQVUsRUFBRTtBQUNYQyxZQUFBQSxRQUFRLEVBQUU7QUFDVEMsY0FBQUEsT0FBTyxFQUFFO0FBREE7QUFEQztBQURBLFNBRE47QUFRUCx1QkFBZTtBQUNkRixVQUFBQSxVQUFVLEVBQUU7QUFDWEMsWUFBQUEs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QUFBQSxJQUFJLEVBQUUsT0FGRztBQUdUQyxZQUFBQSxjQUFjLEVBQUUsS0FIUDtBQUlUQyxZQUFBQSxpQkFBaUIsRUFBRSxhQUpWO0FBS1RDLFlBQUFBLFdBQVcsRUFBRTtBQUNaQyxjQUFBQSxhQUFhLEVBQUU7QUFESDtBQUxKLFdBQVY7QUFTQTtBQUNELE9BM0JEO0FBNEJBLEtBaENEO0FBaUNBLEdBOUpEOztBQWdLQSxTQUFPO0FBQ047QUFDQVMsSUFBQUEsSUFBSSxFQUFFLGdCQUFZO0FBQ2pCO0FBQ0F0RCxNQUFBQSxPQUFPLEdBQUd1RCxRQUFRLENBQUNwRCxhQUFULENBQXVCLG9CQUF2QixDQUFWOztBQUVBLFVBQUksQ0FBQ0gsT0FBTCxFQUFjO0FBQ2I7QUFDQTs7QUFFREQsTUFBQUEsS0FBSyxHQUFHLElBQUlzQixTQUFTLENBQUNtQyxLQUFkLENBQW9CeEQsT0FBcEIsQ0FBUjtBQUVBRixNQUFBQSxJQUFJLEdBQUd5RCxRQUFRLENBQUNwRCxhQUFULENBQXVCLHlCQUF2QixDQUFQO0FBQ0FSLE1BQUFBLFlBQVksR0FBRzRELFFBQVEsQ0FBQ0UsY0FBVCxDQUF3QiwwQkFBeEIsQ0FBZjtBQUNBN0QsTUFBQUEsWUFBWSxHQUFHMkQsUUFBUSxDQUFDRSxjQUFULENBQXdCLDBCQUF4QixDQUFmO0FBRUF4RCxNQUFBQSxRQUFRO0FBQ1JLLE1BQUFBLFVBQVU7QUFDVjtBQWxCSyxHQUFQO0FBb0JBLENBNU1vQixFQUFyQixDLENBOE1BOzs7QUFDQW9ELE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEIsWUFBWTtBQUNyQ2pFLEVBQUFBLGNBQWMsQ0FBQzRELElBQWY7QUFDQSxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS91dGlsaXRpZXMvbW9kYWxzL25ldy1jYXJkLmpzPzQ4ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVE1vZGFsTmV3Q2FyZCA9IGZ1bmN0aW9uICgpIHtcclxuXHR2YXIgc3VibWl0QnV0dG9uO1xyXG5cdHZhciBjYW5jZWxCdXR0b247XHJcblx0dmFyIHZhbGlkYXRvcjtcclxuXHR2YXIgZm9ybTtcclxuXHR2YXIgbW9kYWw7XHJcblx0dmFyIG1vZGFsRWw7XHJcblx0XHJcblx0Ly8gSW5pdCBmb3JtIGlucHV0c1xyXG5cdHZhciBpbml0Rm9ybSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gRXhwaXJ5IG1vbnRoLiBGb3IgbW9yZSBpbmZvLCBwbGFzZSB2aXNpdCB0aGUgb2ZmaWNpYWwgcGx1Z2luIHNpdGU6IGh0dHBzOi8vc2VsZWN0Mi5vcmcvXHJcbiAgICAgICAgJChmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiY2FyZF9leHBpcnlfbW9udGhcIl0nKSkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBSZXZhbGlkYXRlIHRoZSBmaWVsZCB3aGVuIGFuIG9wdGlvbiBpcyBjaG9zZW5cclxuICAgICAgICAgICAgdmFsaWRhdG9yLnJldmFsaWRhdGVGaWVsZCgnY2FyZF9leHBpcnlfbW9udGgnKTtcclxuICAgICAgICB9KTtcclxuXHJcblx0XHQvLyBFeHBpcnkgeWVhci4gRm9yIG1vcmUgaW5mbywgcGxhc2UgdmlzaXQgdGhlIG9mZmljaWFsIHBsdWdpbiBzaXRlOiBodHRwczovL3NlbGVjdDIub3JnL1xyXG4gICAgICAgICQoZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhcmRfZXhwaXJ5X3llYXJcIl0nKSkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBSZXZhbGlkYXRlIHRoZSBmaWVsZCB3aGVuIGFuIG9wdGlvbiBpcyBjaG9zZW5cclxuICAgICAgICAgICAgdmFsaWRhdG9yLnJldmFsaWRhdGVGaWVsZCgnY2FyZF9leHBpcnlfeWVhcicpO1xyXG4gICAgICAgIH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gSGFuZGxlIGZvcm0gdmFsaWRhdGlvbiBhbmQgc3VibWl0dGlvblxyXG5cdHZhciBoYW5kbGVGb3JtID0gZnVuY3Rpb24oKSB7XHJcblx0XHQvLyBTdGVwcGVyIGN1c3RvbSBuYXZpZ2F0aW9uXHJcblxyXG5cdFx0Ly8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cclxuXHRcdHZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG5cdFx0XHRmb3JtLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHQnY2FyZF9uYW1lJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdOYW1lIG9uIGNhcmQgaXMgcmVxdWlyZWQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J2NhcmRfbnVtYmVyJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDYXJkIG1lbWJlciBpcyByZXF1aXJlZCdcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGl0Q2FyZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDYXJkIG51bWJlciBpcyBub3QgdmFsaWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnY2FyZF9leHBpcnlfbW9udGgnOiB7XHJcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcclxuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ01vbnRoIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdjYXJkX2V4cGlyeV95ZWFyJzoge1xyXG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XHJcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcclxuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdZZWFyIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdjYXJkX2N2dic6IHtcclxuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xyXG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ1ZWIGlzIHJlcXVpcmVkJ1xyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0ZGlnaXRzOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ1ZWIG11c3QgY29udGFpbiBvbmx5IGRpZ2l0cydcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0xlbmd0aDoge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWluOiAzLFxyXG5cdFx0XHRcdFx0XHRcdFx0bWF4OiA0LFxyXG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0NWViBtdXN0IGNvbnRhaW4gMyB0byA0IGRpZ2l0cyBvbmx5J1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0cGx1Z2luczoge1xyXG5cdFx0XHRcdFx0dHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG5cdFx0XHRcdFx0Ym9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcclxuXHRcdFx0XHRcdFx0cm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIEFjdGlvbiBidXR0b25zXHJcblx0XHRzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHQvLyBQcmV2ZW50IGRlZmF1bHQgYnV0dG9uIGFjdGlvblxyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHQvLyBWYWxpZGF0ZSBmb3JtIGJlZm9yZSBzdWJtaXRcclxuXHRcdFx0aWYgKHZhbGlkYXRvcikge1xyXG5cdFx0XHRcdHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ3ZhbGlkYXRlZCEnKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcclxuXHRcdFx0XHRcdFx0Ly8gU2hvdyBsb2FkaW5nIGluZGljYXRpb25cclxuXHRcdFx0XHRcdFx0c3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIERpc2FibGUgYnV0dG9uIHRvIGF2b2lkIG11bHRpcGxlIGNsaWNrIFxyXG5cdFx0XHRcdFx0XHRzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuXHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgbG9hZGluZyBpbmRpY2F0aW9uXHJcblx0XHRcdFx0XHRcdFx0c3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRW5hYmxlIGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdC8vIFNob3cgcG9wdXAgY29uZmlybWF0aW9uIFxyXG5cdFx0XHRcdFx0XHRcdFN3YWwuZmlyZSh7XHJcblx0XHRcdFx0XHRcdFx0XHR0ZXh0OiBcIkZvcm0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHN1Ym1pdHRlZCFcIixcclxuXHRcdFx0XHRcdFx0XHRcdGljb246IFwic3VjY2Vzc1wiLFxyXG5cdFx0XHRcdFx0XHRcdFx0YnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuXHRcdFx0XHRcdFx0XHRcdGN1c3RvbUNsYXNzOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kYWwuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvL2Zvcm0uc3VibWl0KCk7IC8vIFN1Ym1pdCBmb3JtXHJcblx0XHRcdFx0XHRcdH0sIDIwMDApOyAgIFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gU2hvdyBwb3B1cCB3YXJuaW5nLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuXHRcdFx0XHRcdFx0U3dhbC5maXJlKHtcclxuXHRcdFx0XHRcdFx0XHR0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcclxuXHRcdFx0XHRcdFx0XHRpY29uOiBcImVycm9yXCIsXHJcblx0XHRcdFx0XHRcdFx0YnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcblx0XHRcdFx0XHRcdFx0Y3VzdG9tQ2xhc3M6IHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHQvLyBTaG93IHN1Y2Nlc3MgbWVzc2FnZS4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXHJcblx0XHRcdFN3YWwuZmlyZSh7XHJcblx0XHRcdFx0dGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gY2FuY2VsP1wiLFxyXG5cdFx0XHRcdGljb246IFwid2FybmluZ1wiLFxyXG5cdFx0XHRcdHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcblx0XHRcdFx0YnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgY2FuY2VsIGl0IVwiLFxyXG5cdFx0XHRcdGNhbmNlbEJ1dHRvblRleHQ6IFwiTm8sIHJldHVyblwiLFxyXG5cdFx0XHRcdGN1c3RvbUNsYXNzOiB7XHJcblx0XHRcdFx0XHRjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG5cdFx0XHRcdFx0Y2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG5cdFx0XHRcdGlmIChyZXN1bHQudmFsdWUpIHtcclxuXHRcdFx0XHRcdGZvcm0ucmVzZXQoKTsgLy8gUmVzZXQgZm9ybVx0XHJcblx0XHRcdFx0XHRtb2RhbC5oaWRlKCk7IC8vIEhpZGUgbW9kYWxcdFx0XHRcdFxyXG5cdFx0XHRcdH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcblx0XHRcdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2UuXHJcblx0XHRcdFx0XHRTd2FsLmZpcmUoe1xyXG5cdFx0XHRcdFx0XHR0ZXh0OiBcIllvdXIgZm9ybSBoYXMgbm90IGJlZW4gY2FuY2VsbGVkIS5cIixcclxuXHRcdFx0XHRcdFx0aWNvbjogXCJlcnJvclwiLFxyXG5cdFx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcblx0XHRcdFx0XHRcdGN1c3RvbUNsYXNzOiB7XHJcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdC8vIFB1YmxpYyBmdW5jdGlvbnNcclxuXHRcdGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Ly8gRWxlbWVudHNcclxuXHRcdFx0bW9kYWxFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9uZXdfY2FyZCcpO1xyXG5cclxuXHRcdFx0aWYgKCFtb2RhbEVsKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtb2RhbCA9IG5ldyBib290c3RyYXAuTW9kYWwobW9kYWxFbCk7XHJcblxyXG5cdFx0XHRmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX25ld19jYXJkX2Zvcm0nKTtcclxuXHRcdFx0c3VibWl0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X21vZGFsX25ld19jYXJkX3N1Ym1pdCcpO1xyXG5cdFx0XHRjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfbW9kYWxfbmV3X2NhcmRfY2FuY2VsJyk7XHJcblxyXG5cdFx0XHRpbml0Rm9ybSgpO1xyXG5cdFx0XHRoYW5kbGVGb3JtKCk7XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XHJcblx0S1RNb2RhbE5ld0NhcmQuaW5pdCgpO1xyXG59KTsiXSwibmFtZXMiOlsiS1RNb2RhbE5ld0NhcmQiLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJ2YWxpZGF0b3IiLCJmb3JtIiwibW9kYWwiLCJtb2RhbEVsIiwiaW5pdEZvcm0iLCIkIiwicXVlcnlTZWxlY3RvciIsIm9uIiwicmV2YWxpZGF0ZUZpZWxkIiwiaGFuZGxlRm9ybSIsIkZvcm1WYWxpZGF0aW9uIiwiZm9ybVZhbGlkYXRpb24iLCJmaWVsZHMiLCJ2YWxpZGF0b3JzIiwibm90RW1wdHkiLCJtZXNzYWdlIiwiY3JlZGl0Q2FyZCIsImRpZ2l0cyIsInN0cmluZ0xlbmd0aCIsIm1pbiIsIm1heCIsInBsdWdpbnMiLCJ0cmlnZ2VyIiwiVHJpZ2dlciIsImJvb3RzdHJhcCIsIkJvb3RzdHJhcDUiLCJyb3dTZWxlY3RvciIsImVsZUludmFsaWRDbGFzcyIsImVsZVZhbGlkQ2xhc3MiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGUiLCJ0aGVuIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsInNldEF0dHJpYnV0ZSIsImRpc2FibGVkIiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsIlN3YWwiLCJmaXJlIiwidGV4dCIsImljb24iLCJidXR0b25zU3R5bGluZyIsImNvbmZpcm1CdXR0b25UZXh0IiwiY3VzdG9tQ2xhc3MiLCJjb25maXJtQnV0dG9uIiwicmVzdWx0IiwiaXNDb25maXJtZWQiLCJoaWRlIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNhbmNlbEJ1dHRvblRleHQiLCJ2YWx1ZSIsInJlc2V0IiwiZGlzbWlzcyIsImluaXQiLCJkb2N1bWVudCIsIk1vZGFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/new-card.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/utilities/modals/new-card.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/utilities/modals/new-card.js ***!
  \***********************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/utilities/modals/new-card.js\":\n    /*!**********************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/utilities/modals/new-card.js ***!\r\n      \\**********************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomUtilitiesModalsNewCardJs() {\n      eval(\" // Class definition\\n\\nvar KTModalNewCard = function () {\\n  var submitButton;\\n  var cancelButton;\\n  var validator;\\n  var form;\\n  var modal;\\n  var modalEl; // Init form inputs\\n\\n  var initForm = function initForm() {\\n    // Expiry month. For more info, plase visit the official plugin site: https://select2.org/\\n    $(form.querySelector('[name=\\\"card_expiry_month\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('card_expiry_month');\\n    }); // Expiry year. For more info, plase visit the official plugin site: https://select2.org/\\n\\n    $(form.querySelector('[name=\\\"card_expiry_year\\\"]')).on('change', function () {\\n      // Revalidate the field when an option is chosen\\n      validator.revalidateField('card_expiry_year');\\n    });\\n  }; // Handle form validation and submittion\\n\\n\\n  var handleForm = function handleForm() {\\n    // Stepper custom navigation\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'card_name': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Name on card is required'\\n            }\\n          }\\n        },\\n        'card_number': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Card member is required'\\n            },\\n            creditCard: {\\n              message: 'Card number is not valid'\\n            }\\n          }\\n        },\\n        'card_expiry_month': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Month is required'\\n            }\\n          }\\n        },\\n        'card_expiry_year': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Year is required'\\n            }\\n          }\\n        },\\n        'card_cvv': {\\n          validators: {\\n            notEmpty: {\\n              message: 'CVV is required'\\n            },\\n            digits: {\\n              message: 'CVV must contain only digits'\\n            },\\n            stringLength: {\\n              min: 3,\\n              max: 4,\\n              message: 'CVV must contain 3 to 4 digits only'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Action buttons\\n\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent default button action\\n      e.preventDefault(); // Validate form before submit\\n\\n      if (validator) {\\n        validator.validate().then(function (status) {\\n          console.log('validated!');\\n\\n          if (status == 'Valid') {\\n            // Show loading indication\\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            setTimeout(function () {\\n              // Remove loading indication\\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n              submitButton.disabled = false; // Show popup confirmation \\n\\n              Swal.fire({\\n                text: \\\"Form has been successfully submitted!\\\",\\n                icon: \\\"success\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"Ok, got it!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              }).then(function (result) {\\n                if (result.isConfirmed) {\\n                  modal.hide();\\n                }\\n              }); //form.submit(); // Submit form\\n            }, 2000);\\n          } else {\\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      }\\n    });\\n    cancelButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Show success message. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n      Swal.fire({\\n        text: \\\"Are you sure you would like to cancel?\\\",\\n        icon: \\\"warning\\\",\\n        showCancelButton: true,\\n        buttonsStyling: false,\\n        confirmButtonText: \\\"Yes, cancel it!\\\",\\n        cancelButtonText: \\\"No, return\\\",\\n        customClass: {\\n          confirmButton: \\\"btn btn-primary\\\",\\n          cancelButton: \\\"btn btn-active-light\\\"\\n        }\\n      }).then(function (result) {\\n        if (result.value) {\\n          form.reset(); // Reset form\\t\\n\\n          modal.hide(); // Hide modal\\t\\t\\t\\t\\n        } else if (result.dismiss === 'cancel') {\\n          // Show error message.\\n          Swal.fire({\\n            text: \\\"Your form has not been cancelled!.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  return {\\n    // Public functions\\n    init: function init() {\\n      // Elements\\n      modalEl = document.querySelector('#kt_modal_new_card');\\n\\n      if (!modalEl) {\\n        return;\\n      }\\n\\n      modal = new bootstrap.Modal(modalEl);\\n      form = document.querySelector('#kt_modal_new_card_form');\\n      submitButton = document.getElementById('kt_modal_new_card_submit');\\n      cancelButton = document.getElementById('kt_modal_new_card_cancel');\\n      initForm();\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTModalNewCard.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/utilities/modals/new-card.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/utilities/modals/new-card.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/utilities/modals/new-card.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/utilities/modals/new-card.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/utilities/modals/new-card.js"]();
/******/ 	
/******/ })()
;