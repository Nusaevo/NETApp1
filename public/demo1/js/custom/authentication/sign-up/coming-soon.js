/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js ***!
  \*******************************************************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class Definition\nvar KTSignupComingSoon = function () {\n  // Elements\n  var form;\n  var submitButton;\n  var validator;\n  var counterDays;\n  var counterHours;\n  var counterMinutes;\n  var counterSeconds;\n  var handleForm = function handleForm(e) {\n    var validation;\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'email': {\n          validators: {\n            notEmpty: {\n              message: 'Email address is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Validate form\n      validator.validate().then(function (status) {\n        if (status == 'Valid') {\n          // Show loading indication\n          submitButton.setAttribute('data-kt-indicator', 'on');\n\n          // Disable button to avoid multiple click \n          submitButton.disabled = true;\n\n          // Simulate ajax request\n          setTimeout(function () {\n            // Hide loading indication\n            submitButton.removeAttribute('data-kt-indicator');\n\n            // Enable button\n            submitButton.disabled = false;\n\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"You have successfully subscribed !\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                form.querySelector('[name=\"email\"]').value = \"\";\n                //form.submit();\n              }\n            });\n          }, 2000);\n        } else {\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n          Swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  var initCounter = function initCounter() {\n    // Set the date we're counting down to\n    var currentTime = new Date();\n    var countDownDate = new Date(currentTime.getTime() + 1000 * 60 * 60 * 24 * 15 + 1000 * 60 * 60 * 10 + 1000 * 60 * 15).getTime();\n    var count = function count() {\n      // Get todays date and time\n      var now = new Date().getTime();\n\n      // Find the distance between now an the count down date\n      var distance = countDownDate - now;\n\n      // Time calculations for days, hours, minutes and seconds\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      var seconds = Math.floor(distance % (1000 * 60) / 1000);\n\n      // Display the result\n      counterDays.innerHTML = days;\n      counterHours.innerHTML = hours;\n      counterMinutes.innerHTML = minutes;\n      counterSeconds.innerHTML = seconds;\n    };\n\n    // Update the count down every 1 second\n    var x = setInterval(count, 1000);\n\n    // Initial count\n    count();\n  };\n\n  // Public Functions\n  return {\n    // public functions\n    init: function init() {\n      form = document.querySelector('#kt_coming_soon_form');\n      submitButton = document.querySelector('#kt_coming_soon_submit');\n      counterDays = document.querySelector('#kt_coming_soon_counter_days');\n      counterHours = document.querySelector('#kt_coming_soon_counter_hours');\n      counterMinutes = document.querySelector('#kt_coming_soon_counter_minutes');\n      counterSeconds = document.querySelector('#kt_coming_soon_counter_seconds');\n      handleForm();\n      initCounter();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTSignupComingSoon.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js\n");

/***/ }),

/***/ "./resources/assets/demo1/js/custom/authentication/sign-up/coming-soon.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/demo1/js/custom/authentication/sign-up/coming-soon.js ***!
  \********************************************************************************/
/***/ (() => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  \"use strict\";\n\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js\": (\n    /*!*******************************************************************************!*\\\n      !*** ./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js ***!\n      \\*******************************************************************************/\n    /***/\n    function resourcesAssetsCoreJsCustomAuthenticationSignUpComingSoonJs() {\n      eval(\" // Class Definition\\n\\nvar KTSignupComingSoon = function () {\\n  // Elements\\n  var form;\\n  var submitButton;\\n  var validator;\\n  var counterDays;\\n  var counterHours;\\n  var counterMinutes;\\n  var counterSeconds;\\n\\n  var handleForm = function handleForm(e) {\\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'email': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Email address is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    });\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault(); // Validate form\\n\\n      validator.validate().then(function (status) {\\n        if (status == 'Valid') {\\n          // Show loading indication\\n          submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \\n\\n          submitButton.disabled = true; // Simulate ajax request\\n\\n          setTimeout(function () {\\n            // Hide loading indication\\n            submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            submitButton.disabled = false; // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n\\n            Swal.fire({\\n              text: \\\"You have successfully subscribed !\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"Ok, got it!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            }).then(function (result) {\\n              if (result.isConfirmed) {\\n                form.querySelector('[name=\\\"email\\\"]').value = \\\"\\\"; //form.submit();\\n              }\\n            });\\n          }, 2000);\\n        } else {\\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"Ok, got it!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  var initCounter = function initCounter() {\\n    // Set the date we're counting down to\\n    var currentTime = new Date();\\n    var countDownDate = new Date(currentTime.getTime() + 1000 * 60 * 60 * 24 * 15 + 1000 * 60 * 60 * 10 + 1000 * 60 * 15).getTime();\\n\\n    var count = function count() {\\n      // Get todays date and time\\n      var now = new Date().getTime(); // Find the distance between now an the count down date\\n\\n      var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds\\n\\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\\n      var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\\n      var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\\n      var seconds = Math.floor(distance % (1000 * 60) / 1000); // Display the result\\n\\n      counterDays.innerHTML = days;\\n      counterHours.innerHTML = hours;\\n      counterMinutes.innerHTML = minutes;\\n      counterSeconds.innerHTML = seconds;\\n    }; // Update the count down every 1 second\\n\\n\\n    var x = setInterval(count, 1000); // Initial count\\n\\n    count();\\n  }; // Public Functions\\n\\n\\n  return {\\n    // public functions\\n    init: function init() {\\n      form = document.querySelector('#kt_coming_soon_form');\\n      submitButton = document.querySelector('#kt_coming_soon_submit');\\n      counterDays = document.querySelector('#kt_coming_soon_counter_days');\\n      counterHours = document.querySelector('#kt_coming_soon_counter_hours');\\n      counterMinutes = document.querySelector('#kt_coming_soon_counter_minutes');\\n      counterSeconds = document.querySelector('#kt_coming_soon_counter_seconds');\\n      handleForm();\\n      initCounter();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTSignupComingSoon.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js\\n\");\n\n      /***/\n    })\n\n    /******/\n  };\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module can't be inlined because the eval-source-map devtool is used.\n  /******/\n  var __webpack_exports__ = {};\n  /******/\n  __webpack_modules__[\"./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js\"]();\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/demo1/js/custom/authentication/sign-up/coming-soon.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/authentication/sign-up/coming-soon.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/demo1/js/custom/authentication/sign-up/coming-soon.js"]();
/******/ 	
/******/ })()
;